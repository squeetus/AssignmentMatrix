{"assignments": [{"model": "assignments.assignment", "pk": 22, "fields": {"title": "Collage", "description": "Combine images (or sounds) with modifications in order to create a creative artifact.", "upstream_url": "http://nifty.stanford.edu/2013/guzdial-collage/", "topics": ["Array", "String Processing/Manipulation", "2-D Arrays", "1-D Arrays"], "authors": ["Guzdial, Mark"], "data_sets": [], "languages": [], "courses": ["CS0", "CS1"], "classifications": ["ACM: Topic:: Arrays", "ACM: Topic:: Strings and string processing"]}}, {"model": "assignments.assignment", "pk": 4, "fields": {"title": "Random Mondrian Art", "description": "This assignment asks students to create random \"art\" in a Mondrian style using a recursive algorithm.", "upstream_url": "http://nifty.stanford.edu/2018/stephenson-mondrian-art/", "topics": ["Array", "List", "Recursion"], "authors": ["Stephenson, Ben"], "data_sets": [], "languages": ["Python", "Haskell"], "courses": ["CS1"], "classifications": ["ACM: Learning Outcome:: Identify the base case and the general case of a recursively-defined problem.", "ACM: Topic:: The concept of recursion", "ACM: Topic:: Arrays"]}}, {"model": "assignments.assignment", "pk": 5, "fields": {"title": "Hurricane Tracker", "description": "This assignment gives students an opportunity to work with loops, file io, and string manipulation in a graphical way. In this assignment students write a program that processes real-world hurricane data and animate the path of hurricanes.", "upstream_url": "http://nifty.stanford.edu/2018/ventura-hurricane-tracker/nifty-hurricanes.html", "topics": ["Array", "Graphics", "Looping", "String Processing/Manipulation"], "authors": ["Stephenson, Ben"], "data_sets": ["Weather"], "languages": ["Python"], "courses": ["CS1"], "classifications": ["ACM: Learning Outcome:: Choose appropriate conditional and iteration constructs for a given programming task.", "ACM: Learning Outcome:: Choose the appropriate data structure for modeling a given problem.", "ACM: Topic:: Conditional and iterative control structures", "ACM: Topic:: Arrays", "ACM: Topic:: Strings and string processing"]}}, {"model": "assignments.assignment", "pk": 6, "fields": {"title": "Pong AI Tournament", "description": "Write an AI engine for the game of Pong. Explore the handout code which contains the game physics. Design and implement a Pong AI engine that beats an AI that simply chases the ball's y-coordinate. Improve the AI engine further and enter it into a class-wide tournament.", "upstream_url": "http://nifty.stanford.edu/2018/guerzhoy-pong-ai-tournament/", "topics": ["AI"], "authors": ["Guerzhoy, Michael"], "data_sets": [], "languages": ["Python"], "courses": ["CS1"], "classifications": []}}, {"model": "assignments.assignment", "pk": 7, "fields": {"title": "Wiki Racer", "description": "The WikiRacer assignment lets students implement an intelligent bot that finds a Wikipedia link ladder between two given pages.", "upstream_url": "http://nifty.stanford.edu/2018/malik-wikiracer/", "topics": ["Algorithms", "String Processing/Manipulation", "Vectors", "Queue"], "authors": ["Malik, Ali"], "data_sets": [], "languages": ["C++"], "courses": ["CS2"], "classifications": ["ACM: Learning Outcome:: Choose the appropriate data structure for modeling a given problem.", "ACM: Topic:: Online algorithms and competitive analysis", "ACM: Topic:: Arrays", "ACM: Topic:: Strings and string processing", "ACM: Topic:: Stacks", "ACM: Topic:: Queues"]}}, {"model": "assignments.assignment", "pk": 8, "fields": {"title": "Nifty Remixes", "description": "These assignments demonstrate how one can take key ideas from existing nifty assignments and remix them for different audiences using different contexts. Nifty ideas from the Boggle assignment (Zelenski, 2002) are remixed into a series of assignments solving grid-based games, and pieces of the Guitar Heroine assignment (Wayne, 2012) are remixed to model other musical instruments.", "upstream_url": "http://nifty.stanford.edu/2018/reed-nifty-remixes/", "topics": ["List", "Data Structures", "Recursion", "Queue"], "authors": ["Reed, David"], "data_sets": [], "languages": ["Java"], "courses": ["DSA"], "classifications": ["ACM: Learning Outcome:: Identify the base case and the general case of a recursively-defined problem.", "ACM: Learning Outcome:: Choose the appropriate data structure for modeling a given problem.", "ACM: Topic:: The concept of recursion", "ACM: Topic:: Queues", "ACM: Topic:: Linked lists", "ACM: Topic:: Strategies for choosing the appropriate data structure"]}}, {"model": "assignments.assignment", "pk": 9, "fields": {"title": "Bear Maps", "description": "Students write the Java back end of a browser based street mapping application. They must fill in two functions. The first takes coordinates corresponding to a region of the world, and outputs a list of String filenames to display. The second takes a starting and ending point, and generates a route along real streets.", "upstream_url": "http://nifty.stanford.edu/2018/hug-bear-maps.html", "topics": ["Graphs", "OOP"], "authors": ["Hug, Josh"], "data_sets": ["Map"], "languages": ["Java"], "courses": ["CS2"], "classifications": ["ACM: Learning Outcome:: Understand the mapping of real-world problems to algorithmic solutions (eg, as graph problems, linear programs, etc).", "ACM: Learning Outcome:: Design and implement a class.", "ACM: Topic:: Graphs (e.g., topological sort, finding strongly connected components, matching)", "ACM: Topic:: Definition of classes: fields, methods, and constructors"]}}, {"model": "assignments.assignment", "pk": 10, "fields": {"title": "Falling Sand", "description": "The Falling Sand assignment lets users paint with particles--stationary metal particles, falling sand, flowing water, and whatever students can think up! Students have introduced acid, clouds, fire, gas, lightning, plants, seeds, and much more! Students are essentially inventing their own interactive 2-D cellular automata.", "upstream_url": "http://nifty.stanford.edu/2017/feinberg-falling-sand/", "topics": ["Array", "2-D Arrays"], "authors": ["Feinberg, Dave"], "data_sets": [], "languages": ["Java"], "courses": ["CS1", "CS2"], "classifications": ["ACM: Topic:: Arrays"]}}, {"model": "assignments.assignment", "pk": 11, "fields": {"title": "2048 in Python", "description": "In this assignment, students have the opportunity to create a version of the popular mobile app 2048 in Python. Since this project is targeted towards CS0 and CS1 students, this project includes skeleton code, helper functions, \"Targeted Help\" sections, and even video introductions to guide the students along the way.", "upstream_url": "http://nifty.stanford.edu/2017/mishra-2048/", "topics": ["Array", "List", "Looping", "Conditionals"], "authors": ["Mishra, Kunal"], "data_sets": [], "languages": ["Python"], "courses": ["CS0", "CS1"], "classifications": ["ACM: Learning Outcome:: Write programs that use primitive data types.", "ACM: Topic:: Principles of graphical user interfaces (GUIs)", "ACM: Topic:: Variables and primitive data types (e.g., numbers, characters, Booleans)", "ACM: Topic:: Conditional and iterative control structures", "ACM: Topic:: Arrays"]}}, {"model": "assignments.assignment", "pk": 12, "fields": {"title": "Fractal Sound", "description": "In this assignment, students generate sound waveforms from scratch, starting with simple examples (sine waves, sawtooth waves, chords), and ending with an exploration of the strange and haunting world of fractal sounds.", "upstream_url": "http://nifty.stanford.edu/2017/hug-fractal-sound/", "topics": ["OOP", "Bitwise Operations"], "authors": ["Hug, Josh"], "data_sets": [], "languages": ["Java"], "courses": ["CS1", "CS2"], "classifications": ["ACM: Learning Outcome:: Use object-oriented encapsulation mechanisms such as interfaces and private members.", "ACM: Learning Outcome:: Write programs that use primitive data types.", "ACM: Topic:: Digital representations of content including numbers, text, images (e.g., raster and vector), video (e.g.,QuickTime, MPEG2, MPEG4), audio (e.g., written score, MIDI, sampled digitized sound track) and animations; complex/composite/aggregate objects; FRBR", "ACM: Topic:: Digital content creation/capture and preservation, including digitization, sampling, compression,conversion, transformation/translation, migration/emulation, crawling, harvesting", "ACM: Topic:: Subclasses, inheritance, and method overriding", "ACM: Topic:: Primitive types (e.g., numbers, Booleans)"]}}, {"model": "assignments.assignment", "pk": 13, "fields": {"title": "SAT Synonyms", "description": "Write small (optionally: medium-sized) functions to read text from files, process the text, and compute descriptors (counts) from the text. Write small functions to read and process the Synonym Questions (optionally: this can be provided to students). Write functions to combine all of the above in order to test the system and obtain its performance (optionally: if the student's first attempt runs slowly, come up with a solution that takes less time).", "upstream_url": "http://nifty.stanford.edu/2017/guerzhoy-SAT-synonyms/", "topics": ["List", "Looping", "String Processing/Manipulation"], "authors": ["Guerzhoy, Michael", "Pitt, Fran\u00e7ois", "Cheung, Jackie Chi Kit"], "data_sets": ["SAT Questions"], "languages": ["Python"], "courses": ["CS1", "CS2"], "classifications": ["ACM: Topic:: Simple I/O including file I/O", "ACM: Topic:: Conditional and iterative control structures", "ACM: Topic:: Strings and string processing"]}}, {"model": "assignments.assignment", "pk": 14, "fields": {"title": "NBody Simulation", "description": "Students compose a program to simulate the motion of n particles, subject to Newton's laws of motion.", "upstream_url": "http://nifty.stanford.edu/2017/wayne-nbody/", "topics": ["Array", "Looping"], "authors": ["Sedgewick, Robert", "Wayne, Kevin"], "data_sets": [], "languages": ["Python", "Java"], "courses": ["CS1", "CS2"], "classifications": ["ACM: Learning Outcome:: Modify and expand short programs that use standard conditional and iterative control structures and functions.", "ACM: Topic:: Digital representations of content including numbers, text, images (e.g., raster and vector), video (e.g.,QuickTime, MPEG2, MPEG4), audio (e.g., written score, MIDI, sampled digitized sound track) and animations; complex/composite/aggregate objects; FRBR", "ACM: Topic:: Conditional and iterative control structures", "ACM: Topic:: Arrays"]}}, {"model": "assignments.assignment", "pk": 15, "fields": {"title": "Counting Squares", "description": "This assignment teaches the basics of algorithm design without using much programming. Students program a robot in a grid of square rooms.", "upstream_url": "http://nifty.stanford.edu/2015/tychonievich-sherriff-layer-counting-squares/", "topics": ["Algorithms"], "authors": ["Sherriff, Mark", "Tychonievich, Luther", "Layer, Ryan"], "data_sets": [], "languages": ["Python"], "courses": ["CS1"], "classifications": ["ACM: Learning Outcome:: Determine an appropriate algorithmic approach to a problem."]}}, {"model": "assignments.assignment", "pk": 16, "fields": {"title": "Speed Reader", "description": "Students build a speed reader that displays text files using Rapid Serial Visual Presentation (RSVP) and test the effectiveness of RSVP by running small usability studies on themselves and their friends. Students practice core CS1 skills (file IO, string processing, graphics) and gain exposure to interface design and evaluation and the science of speed reading.", "upstream_url": "http://nifty.stanford.edu/2015/posera-speed-reader/", "topics": ["Graphics", "String Processing/Manipulation"], "authors": ["Osera, Peter-Michael"], "data_sets": ["Plain Text"], "languages": ["Python", "Java"], "courses": ["CS1"], "classifications": ["ACM: Topic:: Simple I/O including file I/O", "ACM: Topic:: Strings and string processing"]}}, {"model": "assignments.assignment", "pk": 17, "fields": {"title": "GeoLocator", "description": "Students practice being a client of a class for storing location information (latitude and longitude) and then write a variation of the class that stores extra information about a place of interest (name, address, and tags)", "upstream_url": "http://nifty.stanford.edu/2015/reges-geolocator/", "topics": ["Classes", "Constructors", "Fields"], "authors": ["Reges, Stuart"], "data_sets": ["Map"], "languages": ["Java"], "courses": ["CS1"], "classifications": ["ACM: Learning Outcome:: Design and implement a class.", "ACM: Topic:: Definition of classes: fields, methods, and constructors"]}}, {"model": "assignments.assignment", "pk": 18, "fields": {"title": "Packet Sniffing", "description": "Packet Sniffing in Python --After a discussion of how information is transferred across wireless vs wired networks and the legality/ethics of wireless packet sniffing, students write Python code (mostly simple string matching and lists manipulation) to extract and inspect information from a packet capture file that was created artificially in a sandboxed network.", "upstream_url": "http://nifty.stanford.edu/2015/matthews-raymond-packet-sniffing/", "topics": ["String Processing/Manipulation", "Packet Sniffing", "Scapy", "Encryption"], "authors": ["Matthews, Suzanne", "Raymond, David"], "data_sets": ["PCAP"], "languages": ["Python"], "courses": ["CS1", "CS2"], "classifications": ["ACM: Learning Outcome:: Trace and/or implement a string-matching algorithm.", "ACM: Topic:: Strings and string processing"]}}, {"model": "assignments.assignment", "pk": 19, "fields": {"title": "Melody Maker", "description": "In this assignment, students keep track of the notes of a song and write methods to perform many standard music player tasks. Repeated sections of songs are stored only once so students have to reason about how to play the entire song with all repeated sections. This assignment is nifty because the data is interesting and understandable without being overwhelmingly large. We have included two variations of this assignment. One is a CS1 Array focused assignment and the other is a CS2 Queue and object focused version.", "upstream_url": "http://nifty.stanford.edu/2015/obourn-stepp-melody-maker/", "topics": ["Array", "Queue", "Stack"], "authors": ["Obourn, Allison", "Stepp, Marty"], "data_sets": ["Songs"], "languages": ["Java"], "courses": ["CS1", "CS2"], "classifications": ["ACM: Topic:: Arrays", "ACM: Topic:: Stacks", "ACM: Topic:: Queues"]}}, {"model": "assignments.assignment", "pk": 20, "fields": {"title": "Seam Carving", "description": "Students resize images using a state-of-the-art but easy to understand algorithm that feels like magic.", "upstream_url": "http://nifty.stanford.edu/2015/hug-seam-carving/", "topics": ["Array", "Graphs", "2-D Arrays", "3-D Arrays"], "authors": ["Hug, Josh"], "data_sets": [], "languages": ["Java"], "courses": ["CS1", "CS2"], "classifications": ["ACM: Learning Outcome:: Solve problems using graph algorithms, including single-source and all-pairs shortest paths, and at least one minimum spanning tree algorithm.", "ACM: Topic:: Directed graphs", "ACM: Topic:: Weighted graphs", "ACM: Topic:: Arrays"]}}, {"model": "assignments.assignment", "pk": 21, "fields": {"title": "Twitter Trends", "description": "Students will develop a geographic visualization of Twitter data across the USA. They will use dictionaries, lists, and data abstraction techniques to create modular programs.", "upstream_url": "http://nifty.stanford.edu/2013/denero-muralidharan-trends/", "topics": ["List", "Dictionary"], "authors": ["DeNero, John", "Muralidharan, Aditi"], "data_sets": ["Twitter"], "languages": ["Python"], "courses": [], "classifications": ["ACM: Topic:: Abstraction"]}}, {"model": "assignments.assignment", "pk": 23, "fields": {"title": "Authorship Detection", "description": "Define small functions that each operate on a piece of text and calculate a linguistic feature represented by a floating point value. Combine these values to produce an author signature. Define a similarity measure for pairs of authors. Compare the calculated signature for a mystery text with signatures for known authors read from input files and predict the author of the unattributed text.", "upstream_url": "http://nifty.stanford.edu/2013/craig-authorship-detection/", "topics": ["Array"], "authors": ["Craig, Michelle"], "data_sets": ["Novels"], "languages": ["Python"], "courses": ["CS1"], "classifications": ["ACM: Topic:: Arrays"]}}, {"model": "assignments.assignment", "pk": 24, "fields": {"title": "Recursive TurtleGraphics", "description": "Students implement the string processing components of a turtle graphics microworld in which programs are extended using successive replacements in the manner of Lindenmayer systems.", "upstream_url": "http://nifty.stanford.edu/2013/roberts-turtlegraphics/", "topics": ["Recursion", "String Processing/Manipulation"], "authors": ["Roberts, Eric"], "data_sets": [], "languages": ["Java"], "courses": ["CS1"], "classifications": ["ACM: Topic:: The concept of recursion", "ACM: Topic:: Strings and string processing"]}}, {"model": "assignments.assignment", "pk": 25, "fields": {"title": "Campus Shuttle", "description": "Campus Shuttle challenges students to implement a web-based driving game that mashes together the Google Earth and Google Maps APIs. Once implemented, students can drive around their school's campus virtually. The game's objective is to pick up classmates who appear as 2D avatars within Google Earth and drop them off at their respective dormitories.", "upstream_url": "http://nifty.stanford.edu/2013/malan-cs50-shuttle/", "topics": ["Array", "Looping", "Conditionals"], "authors": ["Malan, David"], "data_sets": ["Map"], "languages": ["JavaScript"], "courses": ["CS1", "CS2"], "classifications": ["ACM: Topic:: Conditional and iterative control structures", "ACM: Topic:: Arrays"]}}, {"model": "assignments.assignment", "pk": 26, "fields": {"title": "Estimating Avogadro's Number", "description": "Repeat a famous physics experiment to track the motion of particles immersed in a liquid undergoing Brownian motion; fit the data to Einstein's statistical model of molecular motion; and estimate Avogadro's number. This assignment involves a fundamental programming technique (recursion), uses a core computer science concept (depth-first search), and shows an important role of computation in the natural sciences (to analyze experimental data).", "upstream_url": "http://nifty.stanford.edu/2013/wayne-avogadro.html", "topics": ["Recursion", "DFS", "Nearest Neighbor"], "authors": ["Wayne, Kevin"], "data_sets": ["Image"], "languages": ["Java"], "courses": ["DSA", "CS1", "CS2"], "classifications": ["ACM: Learning Outcome:: Solve problems using graph algorithms, including single-source and all-pairs shortest paths, and at least one minimum spanning tree algorithm.", "ACM: Topic:: Depth- and breadth-first traversals", "ACM: Topic:: Nearest-neighbor algorithms", "ACM: Topic:: The concept of recursion"]}}, {"model": "assignments.assignment", "pk": 27, "fields": {"title": "Image Puzzles", "description": "Image-Puzzle is a neat exercise, where the students write a few lines of code to reveal a hidden image.", "upstream_url": "http://nifty.stanford.edu/2011/parlante-image-puzzle/", "topics": ["2-D Arrays", "Image", "RGB"], "authors": ["Parlante, Nick"], "data_sets": [], "languages": [], "courses": ["CS0", "CS1"], "classifications": []}}, {"model": "assignments.assignment", "pk": 28, "fields": {"title": "BMP Puzzles", "description": "Odds are, if your childhood was like mine, you pulled a secret message out of a cereal box at one point that could only be revealed by holding a red sheet of plastic over it. For this problem set, students are challenged to implement that red sheet of plastic in order to solve a murder mystery! (Spoiler alert: it was Professor Plum in the lounge with the candlestick.) Along the way, students learn that one of the simplest ways to implement an image is with a grid of pixels, each of which can be of a different color. And they're ultimately challenged to resize BMPs, which store images in precisely that manner.", "upstream_url": "http://nifty.stanford.edu/2011/malan-bmp-puzzles/", "topics": ["Looping", "Conditionals", "Input/Output", "Arithmetic", "Hexadecimal", "Steganography"], "authors": ["Malan, David"], "data_sets": [], "languages": ["C"], "courses": ["CS1", "CS2"], "classifications": []}}, {"model": "assignments.assignment", "pk": 29, "fields": {"title": "Book Recommendations", "description": "Read book ratings for a set of users from a file. Define a similarity measure for any pair of readers. Based on reader-similarity, use ratings from the reader community to recommend new books for a particular user.", "upstream_url": "http://nifty.stanford.edu/2011/craig-book-recommendations/", "topics": ["Array", "Input/Output"], "authors": ["Craig, Michelle"], "data_sets": ["Book Rating"], "languages": ["Python", "Java"], "courses": ["CS0", "CS1"], "classifications": []}}, {"model": "assignments.assignment", "pk": 30, "fields": {"title": "Generic Scrolling Game", "description": "Generic Scrolling Game -- fill in a few methods (headers provided) and end up with a very personalized and fun arcade game", "upstream_url": "http://nifty.stanford.edu/2011/feinberg-generic-scrolling-game/", "topics": ["Object", "Grid"], "authors": ["Feinberg, Dave"], "data_sets": [], "languages": ["Java"], "courses": ["CS1", "CS2"], "classifications": []}}, {"model": "assignments.assignment", "pk": 31, "fields": {"title": "Wator World", "description": "Implement a program that carries out the simulation proposed by A.K. Dewdney is his article Sharks and Fish Wage an Ecological War on the Toroidal Planet Wa-Tor, Scientific America Computer Recreations column. (Available in the book The Armchair Universe.) Wa-Tor World is a biological simulation of two species with various parameters such as time between breeding and time before starving. The assignment focuses on creating a GUI to display the simulation. The simulation itself is built on the College Board's APCS GridWorld case study.", "upstream_url": "http://nifty.stanford.edu/2011/scott-wator-world/", "topics": ["Graphics", "OOP", "GUI", "Data Visualization"], "authors": ["Scott, Mike"], "data_sets": [], "languages": ["Java"], "courses": ["CS1", "CS2"], "classifications": []}}, {"model": "assignments.assignment", "pk": 32, "fields": {"title": "Hamming Codes", "description": "Encode and decode files using a Hamming (7,4) algorithm.", "upstream_url": "http://nifty.stanford.edu/2011/hansen-hamming-codes/", "topics": ["Bitwise Operations", "Input/Output", "Error Code", "Matrix Multiplication", "Binary"], "authors": ["Hansen, Stuart"], "data_sets": [], "languages": ["Java"], "courses": ["CS2"], "classifications": []}}, {"model": "assignments.assignment", "pk": 33, "fields": {"title": "Evil Hangman", "description": "Students write a program in which the computer cheats at Hangman by actively dodging players' guesses.", "upstream_url": "http://nifty.stanford.edu/2011/schwarz-evil-hangman/", "topics": ["Array", "String Processing/Manipulation", "Input/Output"], "authors": ["Schwarz, Keith"], "data_sets": ["Dictionary"], "languages": ["C++"], "courses": ["CS1", "CS2"], "classifications": []}}, {"model": "assignments.assignment", "pk": 34, "fields": {"title": "Star Map", "description": "Reading several files with regular structure, building map/dictionary data structure, and using a graphics package to plot a picture.", "upstream_url": "http://nifty.stanford.edu/2009/reid-starmap/", "topics": ["Data Structures", "Graphics", "Dictionary", "Input/Output", "Map", "Coordinate System"], "authors": ["Reid, Karen"], "data_sets": ["Constellation"], "languages": ["Python", "Java"], "courses": ["CS1", "CS2"], "classifications": []}}, {"model": "assignments.assignment", "pk": 35, "fields": {"title": "Face Pamphlet", "description": "FacePamphlet: a simple social networking application. Makes use of objects, GUI interactors, simple data management (HashMaps and ArrayLists), and solid understanding of control flow to make an application that manages a \"light\" version of Facebook (hence the name of the assignment).", "upstream_url": "http://nifty.stanford.edu/2009/sahami-face-pamphlet/", "topics": ["List", "Data Structures", "GUI", "Control Flow", "State"], "authors": ["Sahami, Mehran"], "data_sets": [], "languages": ["Java"], "courses": ["CS1", "CS2"], "classifications": []}}, {"model": "assignments.assignment", "pk": 36, "fields": {"title": "Secrets In Images", "description": "A final programming project exploring steganography (hiding information in other information), data representation, and image manipulation.", "upstream_url": "http://nifty.stanford.edu/2009/heeringa-murtagh-secrets-in-images/", "topics": ["Array", "Data Structures", "Arithmetic", "Binary"], "authors": ["Heeringa, Brent", "Murtagh, Thomas"], "data_sets": [], "languages": ["Java"], "courses": ["CS1", "CS2"], "classifications": []}}, {"model": "assignments.assignment", "pk": 37, "fields": {"title": "Random Art", "description": "Random Art Generator - large, randomly generated arithmetic expressions can yield surprisingly interesting pictures.", "upstream_url": "http://nifty.stanford.edu/2009/stone-random-art/", "topics": ["Arithmetic"], "authors": ["Stone, Christopher"], "data_sets": [], "languages": ["Python", "SML"], "courses": ["CS1", "PL"], "classifications": []}}, {"model": "assignments.assignment", "pk": 38, "fields": {"title": "Enigma Encryption", "description": "These three independent but related assignments center on encryption, building to a software simulation of a complete Enigma machine.", "upstream_url": "http://nifty.stanford.edu/2009/reed-enigma/", "topics": ["String Processing/Manipulation", "Encryption", "GUI"], "authors": ["Reed, David"], "data_sets": [], "languages": ["Java"], "courses": ["CS1", "CS2"], "classifications": []}}, {"model": "assignments.assignment", "pk": 39, "fields": {"title": "DNA Splicing", "description": "Students are given a class that represents a strand of DNA and code to repeatedly cleave/cut and join new DNA into the existing strand. Students experiment with the existing strand class, then create a new strand class more efficient in simulating cleaving/cutting/joining DNA. Students experiment in order to understand the trade offs in implementing these classes.", "upstream_url": "http://nifty.stanford.edu/2009/astrachan-dna/", "topics": ["List", "LinkedList"], "authors": ["Astrachan, Owen"], "data_sets": ["DNA"], "languages": [], "courses": ["CS2"], "classifications": []}}, {"model": "assignments.assignment", "pk": 40, "fields": {"title": "Media Manipulation", "description": "Digital Media Manipulation Using Spreadsheets - Let students see and manipulate digital images and sounds using a spreadsheet framework.", "upstream_url": "http://nifty.stanford.edu/2007/cigas-mediamanipulation/", "topics": ["Digital Storage", "Spreadsheet"], "authors": ["Cigas, John"], "data_sets": ["Sine Wave"], "languages": [], "courses": ["CS0", "CS1"], "classifications": []}}, {"model": "assignments.assignment", "pk": 41, "fields": {"title": "ASCIImations", "description": "This series of assignments involves designing and implementing programs that display ASCII animations.", "upstream_url": "http://nifty.stanford.edu/2007/reed-asciimations/", "topics": ["ASCII"], "authors": ["Reed, David"], "data_sets": [], "languages": ["Java", "JavaScript"], "courses": ["CS0", "CS1", "CS2"], "classifications": []}}, {"model": "assignments.assignment", "pk": 42, "fields": {"title": "Mindreader", "description": "The program will predict whether a user will pick head or tails. The version I give as an assignment uses Hash tables but any form of Map will suffice. Can be written as a console application or with a GUI.", "upstream_url": "http://nifty.stanford.edu/2007/raja-mindreader/", "topics": ["AI", "GUI", "Map"], "authors": ["Sooriamurthi, Raja"], "data_sets": [], "languages": ["Java"], "courses": ["CS1", "CS2"], "classifications": []}}, {"model": "assignments.assignment", "pk": 43, "fields": {"title": "Solitaire OOP", "description": "Freecell -- a visual solitaire game; lot of patterns, OO design and analysis; simple algorithms.", "upstream_url": "http://nifty.stanford.edu/2007/noonan-solitaire/metainfo.html", "topics": ["Pattern", "MVC", "Iterator"], "authors": ["Noonan, Robert"], "data_sets": [], "languages": ["Java"], "courses": ["CS2"], "classifications": []}}, {"model": "assignments.assignment", "pk": 44, "fields": {"title": "Sliding Blocks Puzzle", "description": "The program for this assignment solves sliding blocks puzzles. Rectangular blocks are arranged in a tray, and must be slid horizontally or vertically to form a given configuration.", "upstream_url": "http://nifty.stanford.edu/2007/clancy-slidingblocks/", "topics": ["Data Structures", "Recursion"], "authors": ["Clancy, Mike"], "data_sets": [], "languages": ["Java"], "courses": ["CS2"], "classifications": []}}, {"model": "assignments.assignment", "pk": 45, "fields": {"title": "Fire", "description": "Variety of assignments on cellular automaton simulation of the spreading of fire.", "upstream_url": "http://nifty.stanford.edu/2007/shiflet-fire/", "topics": ["Array", "2-D Arrays", "Data Visualization"], "authors": ["Shiflet, Angela"], "data_sets": [], "languages": ["Mathematica"], "courses": ["CS2"], "classifications": []}}, {"model": "assignments.assignment", "pk": 46, "fields": {"title": "Test Me", "description": "Test Me -- is a suite of programs which claim to conform to various contracts. It is up to the student to determine whether or not these claims are justified.", "upstream_url": "http://nifty.stanford.edu/2005/TestMe/", "topics": ["Software Testing"], "authors": ["Levine, David"], "data_sets": [], "languages": [], "courses": ["CS0", "CS1", "CS2"], "classifications": []}}, {"model": "assignments.assignment", "pk": 47, "fields": {"title": "GridPlotter", "description": "In the GridPlotter assignment, students draw pictures and patterns by placing color blocks in the cells of a grid. The purpose of the assignment is to provide practice developing loops and nested loops for working with a two-dimensional data structure.", "upstream_url": "http://nifty.stanford.edu/2005/GridPlotter/", "topics": ["Looping", "2-D Arrays"], "authors": ["Brady, Alyce", "Cutter, Pamela"], "data_sets": [], "languages": ["Java"], "courses": ["CS1"], "classifications": []}}, {"model": "assignments.assignment", "pk": 48, "fields": {"title": "Complementary Currency", "description": "Students build parts of a client-server infrastructure to create a \"complementary currency\" (in the sense of Lietaer). This \"CS1Dollars\" currency is then used by the students themselves. The assignment can touch on lots of standard modern CS1 topics; what makes it nifty is the use of the assignment to build community in the classroom, something that's often missing in introductory computer science courses. With any luck, the noncompetitive, collaborative nature of the complementary currency idea might help a bit with retention of women and disadvantaged students.", "upstream_url": "http://nifty.stanford.edu/2005/ComplementaryCurrency/", "topics": ["String Processing/Manipulation", "Classes", "Object"], "authors": ["Kube, Paul"], "data_sets": [], "languages": ["Java"], "courses": ["CS1"], "classifications": []}}, {"model": "assignments.assignment", "pk": 49, "fields": {"title": "Name Surfer", "description": "Name Surfer is a program that reads in and displays data from the Social Security Administration on the 1000 most popular baby names every decade for the last 100 years. The code is fairly straightforward, but the program enables access to a pretty entertaining data set.", "upstream_url": "http://nifty.stanford.edu/2005/NameSurfer/", "topics": ["Looping", "Input/Output", "GUI"], "authors": ["Parlante, Nick"], "data_sets": ["Baby Name"], "languages": ["Java"], "courses": ["CS1", "CS2"], "classifications": []}}, {"model": "assignments.assignment", "pk": 50, "fields": {"title": "Photomosaics PPT", "description": "Create image made of many little images .. but there is a patent on it. Creating photomosaics is patented. Unlike copyright, there is no fair use. Instructors can teach how to make them, but not make them. The patents owner wouldn't license the patent for class use. Talk to your school's legal folks.", "upstream_url": "http://nifty.stanford.edu/2005/photomosaic.pdf", "topics": ["Array", "Looping", "Classes"], "authors": ["Pattis, Rich"], "data_sets": [], "languages": [], "courses": [], "classifications": []}}, {"model": "assignments.assignment", "pk": 51, "fields": {"title": "Virtual Pests", "description": "This is a three-part assignment given to first-term freshmen in a breadth-oriented \"Introduction to Computer Science\" course. It is based on the concept of the handheld \"virtual pet\". Students design and implement web pages using HTML forms for the user interface and JavaScript functions for the behavior that results in a customized \"virtual pest\".", "upstream_url": "http://nifty.stanford.edu/2003/pests/", "topics": [], "authors": ["Popyack, Jeffrey"], "data_sets": [], "languages": ["JavaScript"], "courses": ["CS1"], "classifications": []}}, {"model": "assignments.assignment", "pk": 52, "fields": {"title": "Pong", "description": "A neat \"objects first\" assignment. The Pong Lab presents a scenario in which beginning CS students take on the role of programmers within the context of a larger software development project. This software development project, under the auspices of the fictitious Object-Oriented Language Development Company (OLD Co.), asks students to develop and test several simple classes to complete a variant of the classic game of Pong.", "upstream_url": "http://nifty.stanford.edu/2003/pong/", "topics": ["OOP", "Classes", "Software Testing"], "authors": ["Braught, Grant"], "data_sets": [], "languages": ["Java"], "courses": ["CS1"], "classifications": []}}, {"model": "assignments.assignment", "pk": 53, "fields": {"title": "Lunar Lander", "description": "Two fun \"objects first\" assignments. In the first, students fill in a program file. In the second, students write their own class definitions to complete a game program that allows a user to try to land on the moon.", "upstream_url": "https://homes.cs.washington.edu/~reges/sigcse/radical/", "topics": ["OOP"], "authors": ["Reges, Stuart"], "data_sets": [], "languages": ["Java"], "courses": ["CS1"], "classifications": []}}, {"model": "assignments.assignment", "pk": 54, "fields": {"title": "HTML Browser", "description": "In this series of assignments, students write a simplified version of a browser.", "upstream_url": "http://nifty.stanford.edu/2003/browser/", "topics": ["Queue", "Stack", "GUI"], "authors": ["Dexter, Scott", "Gurwitz, Chaya"], "data_sets": [], "languages": ["C++"], "courses": ["CS2"], "classifications": []}}, {"model": "assignments.assignment", "pk": 55, "fields": {"title": "Backtracking", "description": "All about backtracking. It's a very simple puzzle \u2013 just arrange the nine squares so that the edges that touch each add to zero. There are 95,126,814,720 ways to arrange the squares (9!*49) and four solutions (actually only one solution with four orientations).", "upstream_url": "http://nifty.stanford.edu/2003/backtracking/", "topics": ["Data Structures", "Recursion", "Backtracking"], "authors": ["Weiss, Stephen"], "data_sets": [], "languages": [], "courses": ["CS2"], "classifications": []}}, {"model": "assignments.assignment", "pk": 56, "fields": {"title": "Random Writer", "description": "Students will implement a Java public class that provides a random writing application.", "upstream_url": "http://nifty.stanford.edu/2003/randomwriter/", "topics": ["Input/Output", "ArrayList"], "authors": ["Zachary, Joe"], "data_sets": ["Text"], "languages": ["Java"], "courses": ["CS2"], "classifications": []}}, {"model": "assignments.assignment", "pk": 57, "fields": {"title": "Exploring USGS Earthquake Data Using Binary Search Trees", "description": "In this project students will implement a binary search tree and its underlying algorithms (insert, find, etc) using Live USGS Earthquake data. The BRIDGES API (links below) will be used as part of this project to:\r\n\r\n1. Retrieve a user specified number of Earthquake Tweets through the Bridges API and will be stored a list of objects (Java or C++).\r\n2. The binary search tree and its underlying algorithms (insert, find, etc) will be implemented using the BSTElement type provided by BRIDGES.\r\n3. The elements in the binary search tree support visual attributes (highlight specific quake events by location, month, etc can become tasks as part of the project.\r\n4. Bridges API will be used to visualize the binary search tree.", "upstream_url": "", "topics": ["Data Structures", "Algorithms", "binary search tree"], "authors": ["Subramanian, Kalpathi", "Payton, Jamie", "Burlinson, David"], "data_sets": ["USGS Earthquake Tweet Data \r\nhttps://earthquake.usgs.gov/earthquakes/ted/"], "languages": ["C++", "Python", "Java"], "courses": ["DSA"], "classifications": ["ACM: Learning Outcome:: Explain how tree balance affects the efficiency of various binary search tree operations.", "ACM: Learning Outcome:: Demonstrate different traversal methods for trees and graphs, including pre, post, and in-order traversal of trees.", "ACM: Learning Outcome:: Model a variety of real-world problems in computer science using appropriate forms of graphs and trees, such as representing a network topology or the organization of a hierarchical file system.", "ACM: Learning Outcome:: Show how concepts from graphs and trees appear in data structures, algorithms, proof techniques (structural induction), and counting.", "ACM: Learning Outcome:: Design, implement, test, and debug a program that uses each of the following fundamental programming constructs: basic computation, simple I/O, standard conditional and iterative structures, the definition of functions, and parameter passing.", "ACM: Topic:: Common operations on binary search trees such as select min, max, insert, delete, iterate over tree", "ACM: Topic:: Properties", "ACM: Topic:: Traversal strategies", "ACM: Topic:: Directed graphs", "ACM: Topic:: Weighted graphs"]}}, {"model": "assignments.assignment", "pk": 58, "fields": {"title": "Computing the Bacon Number Using IMDB Actor-Movie Data and BRIDGES", "description": "This is a project involving graphs that is motivated by the Bacon Number problem (or more generally six degrees of separation), i.e. to compute the smallest number of links from one actor to another. It is well known that Kevin Bacon, a prolific actor, has worked with a large number of actors over his career and it can be shown that within about 6 links you can reach almost any actor in the actor-movie graph of this dataset. Given that the graph is unweighted, we can use a BFS traversal of the graph to find the links that lead to Kevin Bacon (or any particular actor) from any actor in the graph. Using the BRIDGES API, you can visualize the graph and highlight the links (actors and movies) that are in the path.", "upstream_url": "", "topics": ["Data Structures", "Queue", "Graphs", "LinkedList"], "authors": ["Subramanian, Kalpathi", "Payton, Jamie"], "data_sets": ["IMDB Actor Movie Data"], "languages": ["C++", "Python", "Java"], "courses": ["DSA"], "classifications": ["ACM: Learning Outcome:: Solve problems using fundamental graph algorithms, including depth-first and breadth-first search.", "ACM: Learning Outcome:: Solve problems using graph algorithms, including single-source and all-pairs shortest paths, and at least one minimum spanning tree algorithm.", "ACM: Learning Outcome:: Demonstrate different traversal methods for trees and graphs, including pre, post, and in-order traversal of trees.", "ACM: Learning Outcome:: Model a variety of real-world problems in computer science using appropriate forms of graphs and trees, such as representing a network topology or the organization of a hierarchical file system.", "ACM: Learning Outcome:: Describe common applications for each of the following data structures: stack, queue, priority queue, set, and map. ", "ACM: Learning Outcome:: Write programs that use each of the following data structures: arrays, records/structs, strings, linked lists, stacks, queues, sets, and maps.", "ACM: Topic:: Hash tables, including strategies for avoiding and resolving collisions", "ACM: Topic:: Representations of graphs (e.g., adjacency list, adjacency matrix)", "ACM: Topic:: Depth- and breadth-first traversals", "ACM: Topic:: Shortest-path algorithms (Dijkstra\u2019s and Floyd\u2019s algorithms)"]}}, {"model": "assignments.assignment", "pk": 59, "fields": {"title": "Mountain Paths", "description": "Read a set of topographic (land elevation) data into a 2D array, write some methods for computing \"best\" paths through the mountains, and visualize them with simple graphics.", "upstream_url": "http://nifty.stanford.edu/2016/franke-mountain-paths/", "topics": ["Array", "Algorithms", "Graphics", "File input processing"], "authors": ["Franke, Baker"], "data_sets": ["Land elevation"], "languages": ["Java"], "courses": ["CS1"], "classifications": []}}, {"model": "assignments.assignment", "pk": 60, "fields": {"title": "Restaurant Recommendations Yelp Maps", "description": "In the Yelp Maps assignment, students apply basic machine learning concepts to predict user ratings and cluster restaurants around a university campus using the Yelp Academic Dataset. The assignment primarily illustrates CS1 concepts such as data abstraction, sequence processing, and key-value pairs.", "upstream_url": "http://nifty.stanford.edu/2016/hou-zhang-denero-yelp-maps/", "topics": ["Data Structures", "Data Abstraction", "Machine learning"], "authors": ["Hou, Brian", "Zhang, Marvin", "DeNero, John"], "data_sets": ["Yelp"], "languages": ["Python"], "courses": ["CS1"], "classifications": ["ACM: Learning Outcome:: List the differences among the three main styles of learning: supervised, reinforcement, and unsupervised.", "ACM: Learning Outcome:: Modify and expand short programs that use standard conditional and iterative control structures and functions.", "ACM: Topic:: Simple numerical algorithms, such as computing the average of a list of numbers, finding the min, max, and mode in a list, approximating the square root of a number, or finding the greatest common divisor", "ACM: Topic:: Exploratory data analysis", "ACM: Topic:: Definition and examples of broad variety of machine learning tasks, including classification", "ACM: Topic:: Abstraction", "ACM: Topic:: Strategies for choosing the appropriate data structure"]}}, {"model": "assignments.assignment", "pk": 61, "fields": {"title": "Rack-O Game", "description": "Build a version of the simple card game Racko. Create the ability to play against the computer.", "upstream_url": "http://nifty.stanford.edu/2016/arvind-racko/", "topics": ["Array", "List"], "authors": ["Bhusnurmath, Arvind", "Gee, Kristen", "Her, Karen"], "data_sets": [], "languages": ["Python", "Java"], "courses": ["CS2"], "classifications": ["ACM: Learning Outcome:: Discuss the appropriate use of built-in data structures.", "ACM: Learning Outcome:: Choose the appropriate data structure for modeling a given problem.", "ACM: Topic:: Arrays", "ACM: Topic:: Linked lists"]}}, {"model": "assignments.assignment", "pk": 62, "fields": {"title": "Movie Review Sentiment", "description": "Students use Rotten Tomatoes movie review data to predict the sentiment of new text.", "upstream_url": "http://nifty.stanford.edu/2016/manley-urness-movie-review-sentiment/", "topics": ["String Processing/Manipulation", "Classes", "Input/Output", "Control Structures", "Hash tables"], "authors": ["Manley, Eric", "Urness, Timothy"], "data_sets": ["Rotten Tomatoes"], "languages": ["C++", "Python", "Java"], "courses": ["CS1", "CS2"], "classifications": ["ACM: Learning Outcome:: Describe the implementation of hash tables, including collision avoidance and resolution.", "ACM: Learning Outcome:: Write a program that uses file I/O to provide persistence across multiple executions.", "ACM: Learning Outcome:: Choose appropriate conditional and iteration constructs for a given programming task.", "ACM: Learning Outcome:: Choose the appropriate data structure for modeling a given problem.", "ACM: Topic:: Hash tables, including strategies for avoiding and resolving collisions", "ACM: Topic:: Simple I/O including file I/O", "ACM: Topic:: Conditional and iterative control structures", "ACM: Topic:: Strings and string processing"]}}, {"model": "assignments.assignment", "pk": 63, "fields": {"title": "HugLife", "description": "Students create and test creatures that compete for resources in a 2 dimensional grid-based world.", "upstream_url": "http://nifty.stanford.edu/2016/hug-life/", "topics": ["Unit Testing", "Java Packages", "Debugging", "Polymorphism", "Serialization"], "authors": ["Hug, Josh"], "data_sets": [], "languages": ["Java"], "courses": ["CS2"], "classifications": ["ACM: Learning Outcome:: Use subclassing to design simple class hierarchies that allow code to be reused for distinct subclasses.", "ACM: Learning Outcome:: Apply a variety of strategies to the testing and debugging of simple programs.", "ACM: Learning Outcome:: Construct, execute and debug programs using a modern IDE and associated tools such as unit testing tools and visual debuggers.", "ACM: Topic:: Subtype polymorphism; implicit upcasts in typed languages", "ACM: Topic:: Unit testing", "ACM: Topic:: Debugging strategies"]}}, {"model": "assignments.assignment", "pk": 64, "fields": {"title": "Autocomplete-me", "description": "Students compose a program to process autocomplete queries for a set of suggestions.", "upstream_url": "http://nifty.stanford.edu/2016/wayne-autocomplete-me/", "topics": ["Array", "Sorting", "String Processing/Manipulation", "binary search tree", "HCI"], "authors": ["Wayne, Kevin"], "data_sets": [], "languages": ["Java"], "courses": ["CS2"], "classifications": ["ACM: Learning Outcome:: Analyze simple problem statements to identify relevant information and select appropriate processing to solve the problem.", "ACM: Learning Outcome:: Define a user-centered design process that explicitly takes account of the fact that the user is not like the developer or their acquaintances.", "ACM: Learning Outcome:: Choose the appropriate data structure for modeling a given problem.", "ACM: Topic:: Common operations on binary search trees such as select min, max, insert, delete, iterate over tree", "ACM: Topic:: Examples of well-known algorithms such as sorting and searching.", "ACM: Topic:: Contexts for HCI (anything with a user interface, e.g., webpage, business applications, mobile applications,and games)", "ACM: Topic:: Arrays", "ACM: Topic:: Strings and string processing"]}}], "authors": ["Roberts, Bob", "Boberts, Rob", "Stephenson, Ben", "Guerzhoy, Michael", "Malik, Ali", "Reed, David", "Hug, Josh", "Feinberg, Dave", "Mishra, Kunal", "Pitt, Fran\u00e7ois", "Cheung, Jackie Chi Kit", "Sedgewick, Robert", "Wayne, Kevin", "Sherriff, Mark", "Tychonievich, Luther", "Layer, Ryan", "Osera, Peter-Michael", "Reges, Stuart", "Matthews, Suzanne", "Raymond, David", "Obourn, Allison", "Stepp, Marty", "DeNero, John", "Muralidharan, Aditi", "Guzdial, Mark", "Craig, Michelle", "Roberts, Eric", "Malan, David", "Parlante, Nick", "Scott, Mike", "Hansen, Stuart", "Schwarz, Keith", "Reid, Karen", "Sahami, Mehran", "Heeringa, Brent", "Murtagh, Thomas", "Stone, Christopher", "Astrachan, Owen", "Cigas, John", "Sooriamurthi, Raja", "Noonan, Robert", "Clancy, Mike", "Shiflet, Angela", "Subramanian, Kalpathi", "Payton, Jamie", "Burlinson, David", "Levine, David", "Brady, Alyce", "Cutter, Pamela", "Kube, Paul", "Pattis, Rich", "Popyack, Jeffrey", "Braught, Grant", "Dexter, Scott", "Gurwitz, Chaya", "Weiss, Stephen", "Zachary, Joe", "Franke, Baker", "Hou, Brian", "Zhang, Marvin", "DeNero, John", "Bhusnurmath, Arvind", "Gee, Kristen", "Her, Karen", "Manley, Eric", "Urness, Timothy"], "topics": ["Array", "List", "Data Structures", "Sorting", "Algorithms", "Graphics", "Recursion", "Looping", "String Processing/Manipulation", "AI", "Vectors", "Queue", "Graphs", "OOP", "2-D Arrays", "Conditionals", "Bitwise Operations", "Classes", "Constructors", "Fields", "Packet Sniffing", "Scapy", "Encryption", "Stack", "3-D Arrays", "Dictionary", "1-D Arrays", "DFS", "Nearest Neighbor", "Image", "RGB", "Input/Output", "Arithmetic", "Hexadecimal", "Steganography", "Object", "Grid", "GUI", "Data Visualization", "Error Code", "Matrix Multiplication", "Binary", "Map", "Coordinate System", "Control Flow", "State", "LinkedList", "Digital Storage", "Spreadsheet", "ASCII", "Pattern", "MVC", "Iterator", "binary search tree", "tree traversal", "balanced tree", "Software Testing", "Backtracking", "ArrayList", "File input processing", "Data Abstraction", "Machine learning", "Control Structures", "Hash tables", "Unit Testing", "Java Packages", "Debugging", "Polymorphism", "Serialization", "HCI"], "data_sets": ["Songs", "Weather", "Map", "SAT Questions", "Plain Text", "PCAP", "Twitter", "Novels", "Image", "Book Rating", "Dictionary", "Constellation", "DNA", "Sine Wave", "USGS Earthquake Tweet Data \r\nhttps://earthquake.usgs.gov/earthquakes/ted/", "Baby Name", "Text", "IMDB Actor Movie Data", "Land elevation", "Yelp", "Rotten Tomatoes"], "languages": ["C++", "Python", "Haskell", "Java", "JavaScript", "C", "SML", "Mathematica"], "courses": ["DSA", "CS0", "CS1", "CS2", "PL"], "classifications": ["ACM: Root:: ACM/IEEE Curriculum Guidelines for Undergraduate Degree Programs in Computer Science", "ACM: Knowledge Area:: Algorithms and Complexity", "ACM: Knowledge Area:: Architecture and Organization", "ACM: Knowledge Area:: Computational Science", "ACM: Knowledge Area:: Discrete Structures", "ACM: Knowledge Area:: Graphics and Visualization", "ACM: Knowledge Area:: Human-Computer Interaction", "ACM: Knowledge Area:: Information Assurance and Security", "ACM: Knowledge Area:: Information Management", "ACM: Knowledge Area:: Intelligent Systems", "ACM: Knowledge Area:: Networking and Communications", "ACM: Knowledge Area:: Operating Systems", "ACM: Knowledge Area:: Platform-based Development", "ACM: Knowledge Area:: Parallel and Distributed Computing", "ACM: Knowledge Area:: Programming Languages", "ACM: Knowledge Area:: Software Development Fundamentals", "ACM: Knowledge Area:: Software Engineering", "ACM: Knowledge Area:: Systems Fundamentals", "ACM: Knowledge Area:: Social Issues and Professional Practice", "ACM: Knowledge Unit:: Basic Analysis", "ACM: Learning Outcome:: Explain what is meant by \u201cbest\u201d, \u201cexpected\u201d, and \u201cworst\u201d case behavior of an algorithm.", "ACM: Learning Outcome:: In the context of specific algorithms, identify the characteristics of data and/or other conditions or assumptions that lead to different behaviors.", "ACM: Learning Outcome:: Determine informally the time and space complexity of simple algorithms.", "ACM: Learning Outcome:: State the formal definition of big O.", "ACM: Learning Outcome:: List and contrast standard complexity classes.", "ACM: Learning Outcome:: Perform empirical studies to validate hypotheses about runtime stemming from mathematical analysis Run algorithms on input of various sizes and compare performance.", "ACM: Learning Outcome:: Give examples that illustrate time-space trade-offs of algorithms.", "ACM: Learning Outcome:: Use big O notation formally to give asymptotic upper bounds on time and space complexity of algorithms.", "ACM: Learning Outcome:: Use big O notation formally to give expected case bounds on time complexity of algorithms.", "ACM: Learning Outcome:: Explain the use of big omega, big theta, and little o notation to describe the amount of work done by an algorithm.", "ACM: Learning Outcome:: Use recurrence relations to determine the time complexity of recursively defined algorithms.", "ACM: Learning Outcome:: Solve elementary recurrence relations, eg, using some form of a Master Theorem.", "ACM: Knowledge Unit:: Algorithmic Strategies", "ACM: Learning Outcome:: For each of the strategies (brute-force, greedy, divide-and-conquer, recursive backtracking, and dynamic programming), identify a practical example to which it would apply.", "ACM: Learning Outcome:: Use a greedy approach to solve an appropriate problem and determine if the greedy rule chosen leads to an optimal solution.", "ACM: Learning Outcome:: Use a divide-and-conquer algorithm to solve an appropriate problem.", "ACM: Learning Outcome:: Use recursive backtracking to solve a problem such as navigating a maze.", "ACM: Learning Outcome:: Use dynamic programming to solve an appropriate problem.", "ACM: Learning Outcome:: Determine an appropriate algorithmic approach to a problem.", "ACM: Learning Outcome:: Describe various heuristic problem-solving methods.", "ACM: Learning Outcome:: Use a heuristic approach to solve an appropriate problem.", "ACM: Learning Outcome:: Describe the trade-offs between brute force and heuristic strategies.", "ACM: Learning Outcome:: Describe how a branch-and-bound approach may be used to improve the performance of a heuristic method.", "ACM: Knowledge Unit:: Fundamental Data Structures and Algorithms", "ACM: Learning Outcome:: Implement basic numerical algorithms.", "ACM: Learning Outcome:: Implement simple search algorithms and explain the differences in their time complexities.", "ACM: Learning Outcome:: Be able to implement common quadratic and O(N log N) sorting algorithms.", "ACM: Learning Outcome:: Describe the implementation of hash tables, including collision avoidance and resolution.", "ACM: Learning Outcome:: Discuss the runtime and memory efficiency of principal algorithms for sorting, searching, and hashing.", "ACM: Learning Outcome:: Discuss factors other than computational efficiency that influence the choice of algorithms, such as programming time, maintainability, and the use of application-specific patterns in the input data.", "ACM: Learning Outcome:: Explain how tree balance affects the efficiency of various binary search tree operations.", "ACM: Learning Outcome:: Solve problems using fundamental graph algorithms, including depth-first and breadth-first search.", "ACM: Learning Outcome:: Demonstrate the ability to evaluate algorithms, to select from a range of possible options, to provide justification for that selection, and to implement the algorithm in a particular context.", "ACM: Learning Outcome:: Describe the heap property and the use of heaps as an implementation of priority queues.", "ACM: Learning Outcome:: Solve problems using graph algorithms, including single-source and all-pairs shortest paths, and at least one minimum spanning tree algorithm.", "ACM: Learning Outcome:: Trace and/or implement a string-matching algorithm.", "ACM: Knowledge Unit:: Basic Automata Computability and Complexity", "ACM: Learning Outcome:: Discuss the concept of finite state machines.", "ACM: Learning Outcome:: Design a deterministic finite state machine to accept a specified language.", "ACM: Learning Outcome:: Generate a regular expression to represent a specified language.", "ACM: Learning Outcome:: Explain why the halting problem has no algorithmic solution.", "ACM: Learning Outcome:: Design a context-free grammar to represent a specified language.", "ACM: Learning Outcome:: Define the classes P and NP.", "ACM: Learning Outcome:: Explain the significance of NP-completeness.", "ACM: Knowledge Unit:: Advanced Computational Complexity", "ACM: Learning Outcome:: Define the classes P and NP (Also appears in AL/Basic Automata, Computability, and Complexity).", "ACM: Learning Outcome:: Define the P-space class and its relation to the EXP class.", "ACM: Learning Outcome:: Explain the significance of NP-completeness (Also appears in AL/Basic Automata, Computability, and Complexity).", "ACM: Learning Outcome:: Provide examples of classic NP-complete problems.", "ACM: Learning Outcome:: Prove that a problem is NP-complete by reducing a classic known NP-complete problem to it.", "ACM: Knowledge Unit:: Advanced Automata Theory and Computability", "ACM: Learning Outcome:: Determine a language\u2019s place in the Chomsky hierarchy (regular, context-free, recursively enumerable).", "ACM: Learning Outcome:: Convert among equivalently powerful notations for a language, including among DFAs, NFAs, and regular expressions, and between PDAs and CFGs.", "ACM: Learning Outcome:: Explain the Church-Turing thesis and its significance.", "ACM: Learning Outcome:: Explain Rice\u2019s Theorem and its significance.", "ACM: Learning Outcome:: Provide examples of uncomputable functions.", "ACM: Learning Outcome:: Prove that a problem is uncomputable by reducing a classic known uncomputable problem to it.", "ACM: Knowledge Unit:: Advanced Data Structures Algorithms and Analysis", "ACM: Learning Outcome:: Understand the mapping of real-world problems to algorithmic solutions (eg, as graph problems, linear programs, etc).", "ACM: Learning Outcome:: Select and apply advanced algorithmic techniques (eg, randomization, approximation) to solve real problems.", "ACM: Learning Outcome:: Select and apply advanced analysis techniques (eg, amortized, probabilistic, etc) to algorithms.", "ACM: Knowledge Unit:: Digital logic and digital systems", "ACM: Learning Outcome:: Describe the progression of computer technology components from vacuum tubes to VLSI, from mainframe computer architectures to the organization of warehouse-scale computers.", "ACM: Learning Outcome:: Comprehend the trend of modern computer architectures towards multi-core and that parallelism is inherent in all hardware systems.", "ACM: Learning Outcome:: Explain the implications of the \u201cpower wall\u201d in terms of further processor performance improvements and the drive towards harnessing parallelism.", "ACM: Learning Outcome:: Articulate that there are many equivalent representations of computer functionality, including logical expressions and gates, and be able to use mathematical expressions to describe the functions of simple combinational and sequential circuits.", "ACM: Learning Outcome:: Design the basic building blocks of a computer: arithmetic-logic unit (gate-level), registers (gate-level), central processing unit (register transfer-level), memory (register transfer-level).", "ACM: Learning Outcome:: Use CAD tools for capture, synthesis, and simulation to evaluate simple building blocks (eg, arithmetic-logic unit, registers, movement between registers) of a simple computer design.", "ACM: Learning Outcome:: Evaluate the functional and timing diagram behavior of a simple processor implemented at the logic circuit level.", "ACM: Knowledge Unit:: Machine level representation of data", "ACM: Learning Outcome:: Explain why everything is data, including instructions, in computers.", "ACM: Learning Outcome:: Explain the reasons for using alternative formats to represent numerical data.", "ACM: Learning Outcome:: Describe how negative integers are stored in sign-magnitude and twos-complement representations.", "ACM: Learning Outcome:: Explain how fixed-length number representations affect accuracy and precision.", "ACM: Learning Outcome:: Describe the internal representation of non-numeric data, such as characters, strings, records, and arrays.", "ACM: Learning Outcome:: Convert numerical data from one format to another.", "ACM: Learning Outcome:: Write simple programs at the assembly/machine level for string processing and manipulation.", "ACM: Knowledge Unit:: Assembly level machine organization", "ACM: Learning Outcome:: Explain the organization of the classical von Neumann machine and its major functional units.", "ACM: Learning Outcome:: Describe how an instruction is executed in a classical von Neumann machine, with extensions for threads, multiprocessor synchronization, and SIMD execution.", "ACM: Learning Outcome:: Describe instruction level parallelism and hazards, and how they are managed in typical processor pipelines.", "ACM: Learning Outcome:: Summarize how instructions are represented at both the machine level and in the context of a symbolic assembler.", "ACM: Learning Outcome:: Demonstrate how to map between high-level language patterns into assembly/machine language notations.", "ACM: Learning Outcome:: Explain different instruction formats, such as addresses per instruction and variable length vs fixed length formats.", "ACM: Learning Outcome:: Explain how subroutine calls are handled at the assembly level.", "ACM: Learning Outcome:: Explain the basic concepts of interrupts and I/O operations.", "ACM: Learning Outcome:: Write simple assembly language program segments.", "ACM: Learning Outcome:: Show how fundamental high-level programming constructs are implemented at the machine-language level.", "ACM: Knowledge Unit:: Memory system organization and architecture", "ACM: Learning Outcome:: Identify the main types of memory technology (eg, SRAM, DRAM, Flash, magnetic disk) and their relative cost and performance.", "ACM: Learning Outcome:: Explain the effect of memory latency on running time.", "ACM: Learning Outcome:: Describe how the use of memory hierarchy (cache, virtual memory) is used to reduce the effective memory latency.", "ACM: Learning Outcome:: Describe the principles of memory management.", "ACM: Learning Outcome:: Explain the workings of a system with virtual memory management.", "ACM: Learning Outcome:: Compute Average Memory Access Time under a variety of cache and memory configurations and mixes of instruction and data references.", "ACM: Knowledge Unit:: Interfacing and communication", "ACM: Learning Outcome:: Explain how interrupts are used to implement I/O control and data transfers.", "ACM: Learning Outcome:: Identify various types of buses in a computer system.", "ACM: Learning Outcome:: Describe data access from a magnetic disk drive.", "ACM: Learning Outcome:: Compare common network organizations, such as ethernet/bus, ring, switched vs routed.", "ACM: Learning Outcome:: Identify the cross-layer interfaces needed for multimedia access and presentation, from image fetch from remote storage, through transport over a communications network, to staging into local memory, and final presentation to a graphical display.", "ACM: Learning Outcome:: Describe the advantages and limitations of RAID architectures.", "ACM: Knowledge Unit:: Functional organization", "ACM: Learning Outcome:: Compare alternative implementation of datapaths.", "ACM: Learning Outcome:: Discuss the concept of control points and the generation of control signals using hardwired or microprogrammed implementations.", "ACM: Learning Outcome:: Explain basic instruction level parallelism using pipelining and the major hazards that may occur.", "ACM: Learning Outcome:: Design and implement a complete processor, including datapath and control.", "ACM: Learning Outcome:: Determine, for a given processor and memory system implementation, the average cycles per instruction.", "ACM: Knowledge Unit:: Multiprocessing and alternative architectures", "ACM: Learning Outcome:: Discuss the concept of parallel processing beyond the classical von Neumann model.", "ACM: Learning Outcome:: Describe alternative parallel architectures such as SIMD and MIMD.", "ACM: Learning Outcome:: Explain the concept of interconnection networks and characterize different approaches.", "ACM: Learning Outcome:: Discuss the special concerns that multiprocessing systems present with respect to memory management and describe how these are addressed.", "ACM: Learning Outcome:: Describe the differences between memory backplane, processor memory interconnect, and remote memory via networks, their implications for access latency and impact on program performance.", "ACM: Knowledge Unit:: Performance enhancements", "ACM: Learning Outcome:: Describe superscalar architectures and their advantages.", "ACM: Learning Outcome:: Explain the concept of branch prediction and its utility.", "ACM: Learning Outcome:: Characterize the costs and benefits of prefetching.", "ACM: Learning Outcome:: Explain speculative execution and identify the conditions that justify it.", "ACM: Learning Outcome:: Discuss the performance advantages that multithreading offered in an architecture along with the factors that make it difficult to derive maximum benefits from this approach.", "ACM: Learning Outcome:: Describe the relevance of scalability to performance.", "ACM: Knowledge Unit:: Introduction to Modeling and Simulation", "ACM: Learning Outcome:: Explain the concept of modeling and the use of abstraction that allows the use of a machine to solve a problem.", "ACM: Learning Outcome:: Describe the relationship between modeling and simulation, ie, thinking of simulation as dynamic modeling.", "ACM: Learning Outcome:: Create a simple, formal mathematical model of a real-world situation and use that model in a simulation.", "ACM: Learning Outcome:: Differentiate among the different types of simulations, including physical simulations, human-guided simulations, and virtual reality.", "ACM: Learning Outcome:: Describe several approaches to validating models.", "ACM: Learning Outcome:: Create a simple display of the results of a simulation.", "ACM: Knowledge Unit:: Modeling and Simulation", "ACM: Learning Outcome:: Explain and give examples of the benefits of simulation and modeling in a range of important application areas.", "ACM: Learning Outcome:: Demonstrate the ability to apply the techniques of modeling and simulation to a range of problem areas.", "ACM: Learning Outcome:: Explain the constructs and concepts of a particular modeling approach.", "ACM: Learning Outcome:: Explain the difference between validation and verification of a model; demonstrate the difference with specific examples.", "ACM: Learning Outcome:: Verify and validate the results of a simulation.", "ACM: Learning Outcome:: Evaluate a simulation, highlighting the benefits and the drawbacks.", "ACM: Learning Outcome:: Choose an appropriate modeling approach for a given problem or situation.", "ACM: Learning Outcome:: Compare results from different simulations of the same situation and explain any differences.", "ACM: Learning Outcome:: Infer the behavior of a system from the results of a simulation of the system.", "ACM: Learning Outcome:: Extend or adapt an existing model to a new situation.", "ACM: Knowledge Unit:: Processing", "ACM: Learning Outcome:: Explain the characteristics and defining properties of algorithms and how they relate to machine processing.", "ACM: Learning Outcome:: Analyze simple problem statements to identify relevant information and select appropriate processing to solve the problem.", "ACM: Learning Outcome:: Identify or sketch a workflow for an existing computational process such as the creation of a graph based on experimental data.", "ACM: Learning Outcome:: Describe the process of converting an algorithm to machine-executable code.", "ACM: Learning Outcome:: Summarize the phases of software development and compare several common lifecycle models.", "ACM: Learning Outcome:: Explain how data is represented in a machine Compare representations of integers to floating point numbers Describe underflow, overflow, round off, and truncation errors in data representations.", "ACM: Learning Outcome:: Apply standard numerical algorithms to solve ODEs and PDEs Use computing systems to solve systems of equations.", "ACM: Learning Outcome:: Describe the basic properties of bandwidth, latency, scalability and granularity.", "ACM: Learning Outcome:: Describe the levels of parallelism including task, data, and event parallelism.", "ACM: Learning Outcome:: Compare and contrast parallel programming paradigms recognizing the strengths and weaknesses of each.", "ACM: Learning Outcome:: Identify the issues impacting correctness and efficiency of a computation.", "ACM: Learning Outcome:: Design, code, test and debug programs for a parallel computation.", "ACM: Knowledge Unit:: Interactive Visualization", "ACM: Learning Outcome:: Compare common computer interface mechanisms with respect to ease-of-use, learnability, and cost.", "ACM: Learning Outcome:: Use standard APIs and tools to create visual displays of data, including graphs, charts, tables, and histograms.", "ACM: Learning Outcome:: Describe several approaches to using a computer as a means for interacting with and processing data.", "ACM: Learning Outcome:: Extract useful information from a dataset.", "ACM: Learning Outcome:: Analyze and select visualization techniques for specific problems.", "ACM: Learning Outcome:: Describe issues related to scaling data analysis from small to large data sets.", "ACM: Knowledge Unit:: Data, Information, and Knowledge", "ACM: Learning Outcome:: Identify all of the data, information, and knowledge elements and related organizations, for a computational science application.", "ACM: Learning Outcome:: Describe how to represent data and information for processing.", "ACM: Learning Outcome:: Describe typical user requirements regarding that data, information, and knowledge.", "ACM: Learning Outcome:: Select a suitable system or software implementation to manage data, information, and knowledge.", "ACM: Learning Outcome:: List and describe the reports, transactions, and other processing needed for a computational science application.", "ACM: Learning Outcome:: Compare and contrast database management, information retrieval, and digital library systems with regard to handling typical computational science applications.", "ACM: Learning Outcome:: Design a digital library for some computational science users / societies, with appropriate content and services.", "ACM: Knowledge Unit:: Numerical Analysis", "ACM: Learning Outcome:: Define error, stability, machine precision concepts and the inexactness of computational approximations.", "ACM: Learning Outcome:: Implement Taylor series, interpolation, extrapolation, and regression algorithms for approximating functions.", "ACM: Learning Outcome:: Implement algorithms for differentiation and integration.", "ACM: Learning Outcome:: Implement algorithms for solving differential equations.", "ACM: Knowledge Unit:: Sets, Relations, and Functions", "ACM: Learning Outcome:: Explain with examples the basic terminology of functions, relations, and sets.", "ACM: Learning Outcome:: Perform the operations associated with sets, functions, and relations.", "ACM: Learning Outcome:: Relate practical examples to the appropriate set, function, or relation model, and interpret the associated operations and terminology in context.", "ACM: Knowledge Unit:: Basic Logic", "ACM: Learning Outcome:: Convert logical statements from informal language to propositional and predicate logic expressions.", "ACM: Learning Outcome:: Apply formal methods of symbolic propositional and predicate logic, such as calculating validity of formulae and computing normal forms.", "ACM: Learning Outcome:: Use the rules of inference to construct proofs in propositional and predicate logic.", "ACM: Learning Outcome:: Describe how symbolic logic can be used to model real-life situations or applications, including those arising in computing contexts such as software analysis (eg, program correctness), database queries, and algorithms.", "ACM: Learning Outcome:: Apply formal logic proofs and/or informal, but rigorous, logical reasoning to real problems, such as predicting the behavior of software or solving problems such as puzzles.", "ACM: Learning Outcome:: Describe the strengths and limitations of propositional and predicate logic.", "ACM: Knowledge Unit:: Proof Techniques", "ACM: Learning Outcome:: Identify the proof technique used in a given proof.", "ACM: Learning Outcome:: Outline the basic structure of each proof technique (direct proof, proof by contradiction, and induction) described in this unit.", "ACM: Learning Outcome:: Apply each of the proof techniques (direct proof, proof by contradiction, and induction) correctly in the construction of a sound argument.", "ACM: Learning Outcome:: Determine which type of proof is best for a given problem.", "ACM: Learning Outcome:: Explain the parallels between ideas of mathematical and/or structural induction to recursion and recursively defined structures.", "ACM: Learning Outcome:: Explain the relationship between weak and strong induction and give examples of the appropriate use of each.", "ACM: Learning Outcome:: State the well-ordering principle and its relationship to mathematical induction.", "ACM: Knowledge Unit:: Basics of Counting", "ACM: Learning Outcome:: Apply counting arguments, including sum and product rules, inclusion-exclusion principle and arithmetic/geometric progressions.", "ACM: Learning Outcome:: Apply the pigeonhole principle in the context of a formal proof.", "ACM: Learning Outcome:: Compute permutations and combinations of a set, and interpret the meaning in the context of the particular application.", "ACM: Learning Outcome:: Map real-world applications to appropriate counting formalisms, such as determining the number of ways to arrange people around a table, subject to constraints on the seating arrangement, or the number of ways to determine certain hands in cards (eg, a full house).", "ACM: Learning Outcome:: Solve a variety of basic recurrence relations.", "ACM: Learning Outcome:: Analyze a problem to determine underlying recurrence relations.", "ACM: Learning Outcome:: Perform computations involving modular arithmetic.", "ACM: Knowledge Unit:: Graphs and Trees", "ACM: Learning Outcome:: Illustrate by example the basic terminology of graph theory, and some of the properties and special cases of each type of graph/tree.", "ACM: Learning Outcome:: Demonstrate different traversal methods for trees and graphs, including pre, post, and in-order traversal of trees.", "ACM: Learning Outcome:: Model a variety of real-world problems in computer science using appropriate forms of graphs and trees, such as representing a network topology or the organization of a hierarchical file system.", "ACM: Learning Outcome:: Show how concepts from graphs and trees appear in data structures, algorithms, proof techniques (structural induction), and counting.", "ACM: Learning Outcome:: Explain how to construct a spanning tree of a graph.", "ACM: Learning Outcome:: Determine if two graphs are isomorphic.", "ACM: Knowledge Unit:: Discrete Probability", "ACM: Learning Outcome:: Calculate probabilities of events and expectations of random variables for elementary problems such as games of chance.", "ACM: Learning Outcome:: Differentiate between dependent and independent events.", "ACM: Learning Outcome:: Identify a case of the binomial distribution and compute a probability using that distribution.", "ACM: Learning Outcome:: Apply Bayes theorem to determine conditional probabilities in a problem.", "ACM: Learning Outcome:: Apply the tools of probability to solve problems such as the average case analysis of algorithms or analyzing hashing.", "ACM: Learning Outcome:: Compute the variance for a given probability distribution.", "ACM: Learning Outcome:: Explain how events that are independent can be conditionally dependent (and vice-versa) Identify real-world examples of such cases.", "ACM: Knowledge Unit:: Fundamental Concepts", "ACM: Learning Outcome:: Identify common uses of digital presentation to humans (eg, computer graphics, sound).", "ACM: Learning Outcome:: Explain in general terms how analog signals can be reasonably represented by discrete samples, for example, how images can be represented by pixels.", "ACM: Learning Outcome:: Explain how the limits of human perception affect choices about the digital representation of analog signals.", "ACM: Learning Outcome:: Construct a simple user interface using a standard API.", "ACM: Learning Outcome:: Describe the differences between lossy and lossless image compression techniques, for example as reflected in common graphics image file formats such as JPG, PNG, MP3, MP4, and GIF.", "ACM: Learning Outcome:: Describe color models and their use in graphics display devices.", "ACM: Learning Outcome:: Describe the tradeoffs between storing information vs storing enough information to reproduce the information, as in the difference between vector and raster rendering.", "ACM: Learning Outcome:: Describe the basic process of producing continuous motion from a sequence of discrete frames (sometimes called \u201cflicker fusion\u201d).", "ACM: Learning Outcome:: Describe how double-buffering can remove flicker from animation.", "ACM: Knowledge Unit:: Basic Rendering", "ACM: Learning Outcome:: Discuss the light transport problem and its relation to numerical integration ie, light is emitted, scatters around the scene, and is measured by the eye.", "ACM: Learning Outcome:: Describe the basic graphics pipeline and how forward and backward rendering factor in this.", "ACM: Learning Outcome:: Create a program to display 3D models of simple graphics images.", "ACM: Learning Outcome:: Derive linear perspective from similar triangles by converting points (x, y, z) to points (x/z, y/z, 1).", "ACM: Learning Outcome:: Obtain 2-dimensional and 3-dimensional points by applying affine transformations.", "ACM: Learning Outcome:: Apply 3-dimensional coordinate system and the changes required to extend 2D transformation operations to handle transformations in 3D.", "ACM: Learning Outcome:: Contrast forward and backward rendering.", "ACM: Learning Outcome:: Explain the concept and applications of texture mapping, sampling, and anti-aliasing.", "ACM: Learning Outcome:: Explain the ray tracing/rasterization duality for the visibility problem.", "ACM: Learning Outcome:: Implement simple procedures that perform transformation and clipping operations on simple 2-dimensional images.", "ACM: Learning Outcome:: Implement a simple real-time renderer using a rasterization API (eg, OpenGL) using vertex buffers and shaders.", "ACM: Learning Outcome:: Compare and contrast the different rendering techniques.", "ACM: Learning Outcome:: Compute space requirements based on resolution and color coding.", "ACM: Learning Outcome:: Compute time requirements based on refresh rates, rasterization techniques.", "ACM: Knowledge Unit:: Geometric Modeling", "ACM: Learning Outcome:: Represent curves and surfaces using both implicit and parametric forms.", "ACM: Learning Outcome:: Create simple polyhedral models by surface tessellation.", "ACM: Learning Outcome:: Generate a mesh representation from an implicit surface.", "ACM: Learning Outcome:: Generate a fractal model or terrain using a procedural method.", "ACM: Learning Outcome:: Generate a mesh from data points acquired with a laser scanner.", "ACM: Learning Outcome:: Construct CSG models from simple primitives, such as cubes and quadric surfaces.", "ACM: Learning Outcome:: Contrast modeling approaches with respect to space and time complexity and quality of image.", "ACM: Knowledge Unit:: Advanced Rendering", "ACM: Learning Outcome:: Demonstrate how an algorithm estimates a solution to the rendering equation.", "ACM: Learning Outcome:: Prove the properties of a rendering algorithm, eg, complete, consistent, and unbiased.", "ACM: Learning Outcome:: Analyze the bandwidth and computation demands of a simple algorithm.", "ACM: Learning Outcome:: Implement a non-trivial shading algorithm (eg, toon shading, cascaded shadow maps) under a rasterization API.", "ACM: Learning Outcome:: Discuss how a particular artistic technique might be implemented in a renderer.", "ACM: Learning Outcome:: Explain how to recognize the graphics techniques used to create a particular image.", "ACM: Learning Outcome:: Implement any of the specified graphics techniques using a primitive graphics system at the individual pixel level.", "ACM: Learning Outcome:: Implement a ray tracer for scenes using a simple (eg, Phong\u2019s) BRDF plus reflection and refraction.", "ACM: Knowledge Unit:: Computer Animation", "ACM: Learning Outcome:: Compute the location and orientation of model parts using an forward kinematic approach.", "ACM: Learning Outcome:: Compute the orientation of articulated parts of a model from a location and orientation using an inverse kinematic approach.", "ACM: Learning Outcome:: Describe the tradeoffs in different representations of rotations.", "ACM: Learning Outcome:: Implement the spline interpolation method for producing in-between positions and orientations.", "ACM: Learning Outcome:: Implement algorithms for physical modeling of particle dynamics using simple Newtonian mechanics, for example Witkin & Kass, snakes and worms, symplectic Euler, Stormer/Verlet, or midpoint Euler methods.", "ACM: Learning Outcome:: Discuss the basic ideas behind some methods for fluid dynamics for modeling ballistic trajectories, for example for splashes, dust, fire, or smoke.", "ACM: Learning Outcome:: Use common animation software to construct simple organic forms using metaball and skeleton.", "ACM: Knowledge Unit:: Visualization", "ACM: Learning Outcome:: Describe the basic algorithms for scalar and vector visualization.", "ACM: Learning Outcome:: Describe the tradeoffs of visualization algorithms in terms of accuracy and performance.", "ACM: Learning Outcome:: Propose a suitable visualization design for a particular combination of data characteristics and application tasks.", "ACM: Learning Outcome:: Analyze the effectiveness of a given visualization for a particular task.", "ACM: Learning Outcome:: Design a process to evaluate the utility of a visualization algorithm or system.", "ACM: Learning Outcome:: Recognize a variety of applications of visualization including representations of scientific, medical, and mathematical data; flow visualization; and spatial analysis.", "ACM: Knowledge Unit:: Foundations", "ACM: Learning Outcome:: Discuss why human-centered software development is important.", "ACM: Learning Outcome:: Summarize the basic precepts of psychological and social interaction.", "ACM: Learning Outcome:: Develop and use a conceptual vocabulary for analyzing human interaction with software: affordance, conceptual model, feedback, and so forth.", "ACM: Learning Outcome:: Define a user-centered design process that explicitly takes account of the fact that the user is not like the developer or their acquaintances.", "ACM: Learning Outcome:: Create and conduct a simple usability test for an existing software application.", "ACM: Knowledge Unit:: Designing Interaction", "ACM: Learning Outcome:: For an identified user group, undertake and document an analysis of their needs.", "ACM: Learning Outcome:: Create a simple application, together with help and documentation, that supports a graphical user interface.", "ACM: Learning Outcome:: Conduct a quantitative evaluation and discuss/report the results.", "ACM: Learning Outcome:: Discuss at least one national or international user interface design standard.", "ACM: Knowledge Unit:: Programming Interactive Systems", "ACM: Learning Outcome:: Explain the importance of Model-View controller to interface programming.", "ACM: Learning Outcome:: Create an application with a modern graphical user interface.", "ACM: Learning Outcome:: Identify commonalities and differences in UIs across different platforms.", "ACM: Learning Outcome:: Explain and use GUI programming concepts: event handling, constraint-based layout management, etc.", "ACM: Knowledge Unit:: User-centered design and testing", "ACM: Learning Outcome:: Explain how user-centred design complements other software process models.", "ACM: Learning Outcome:: Use lo-fi (low fidelity) prototyping techniques to gather, and report, user responses.", "ACM: Learning Outcome:: Choose appropriate methods to support the development of a specific UI.", "ACM: Learning Outcome:: Use a variety of techniques to evaluate a given UI.", "ACM: Learning Outcome:: Compare the constraints and benefits of different evaluative methods.", "ACM: Knowledge Unit:: New Interactive Technologies", "ACM: Learning Outcome:: Describe when non-mouse interfaces are appropriate.", "ACM: Learning Outcome:: Understand the interaction possibilities beyond mouse-and-pointer interfaces.", "ACM: Learning Outcome:: Discuss the advantages (and disadvantages) of non-mouse interfaces.", "ACM: Knowledge Unit:: Collaboration and communication", "ACM: Learning Outcome:: Describe the difference between synchronous and asynchronous communication.", "ACM: Learning Outcome:: Compare the HCI issues in individual interaction with group interaction.", "ACM: Learning Outcome:: Discuss several issues of social concern raised by collaborative software.", "ACM: Learning Outcome:: Discuss the HCI issues in software that embodies human intention.", "ACM: Knowledge Unit:: Statistical methods for HCI", "ACM: Learning Outcome:: Explain basic statistical concepts and their areas of application.", "ACM: Learning Outcome:: Extract and articulate the statistical arguments used in papers that quantitatively report user studies.", "ACM: Learning Outcome:: Design a user study that will yield quantitative results.", "ACM: Learning Outcome:: Conduct and report on a study that utilizes both qualitative and quantitative evaluation.", "ACM: Knowledge Unit:: Human factors and security", "ACM: Learning Outcome:: Explain the concepts of phishing and spear phishing, and how to recognize them.", "ACM: Learning Outcome:: Describe the issues of trust in interface design with an example of a high and low trust system.", "ACM: Learning Outcome:: Design a user interface for a security mechanism.", "ACM: Learning Outcome:: Explain the concept of identity management and its importance.", "ACM: Learning Outcome:: Analyze a security policy and/or procedures to show where they consider, or fail to consider, human factors.", "ACM: Knowledge Unit:: Design-oriented HCI", "ACM: Learning Outcome:: Explain what is meant by \u201cHCI is a design-oriented discipline\u201d.", "ACM: Learning Outcome:: Detail the processes of design appropriate to specific design orientations.", "ACM: Learning Outcome:: Apply a variety of design methods to a given problem.", "ACM: Knowledge Unit:: Mixed, Augmented and Virtual Reality", "ACM: Learning Outcome:: Describe the optical model realized by a computer graphics system to synthesize stereoscopic view.", "ACM: Learning Outcome:: Describe the principles of different viewer tracking technologies.", "ACM: Learning Outcome:: Describe the differences between geometry- and image-based virtual reality.", "ACM: Learning Outcome:: Describe the issues of user action synchronization and data consistency in a networked environment.", "ACM: Learning Outcome:: Determine the basic requirements on interface, hardware, and software configurations of a VR system for a specified application.", "ACM: Learning Outcome:: Describe several possible uses for games engines, including their potential and their limitations.", "ACM: Knowledge Unit:: Foundational Concepts in Security", "ACM: Learning Outcome:: Analyze the tradeoffs of balancing key security properties (Confidentiality, Integrity, Availability).", "ACM: Learning Outcome:: Describe the concepts of risk, threats, vulnerabilities and attack vectors (including the fact that there is no such thing as perfect security).", "ACM: Learning Outcome:: Explain the concepts of authentication, authorization, access control.", "ACM: Learning Outcome:: Explain the concept of trust and trustworthiness.", "ACM: Learning Outcome:: Recognize that there are important ethical issues to consider in computer security, including ethical issues associated with fixing or not fixing vulnerabilities and disclosing or not disclosing vulnerabilities.", "ACM: Knowledge Unit:: Principles of Secure Design", "ACM: Learning Outcome:: Describe the principle of least privilege and isolation as applied to system design.", "ACM: Learning Outcome:: Summarize the principle of fail-safe and deny-by-default.", "ACM: Learning Outcome:: Discuss the implications of relying on open design or the secrecy of design for security. ", "ACM: Learning Outcome:: Explain the goals of end-to-end data security.", "ACM: Learning Outcome:: Discuss the benefits of having multiple layers of defenses.", "ACM: Learning Outcome:: For each stage in the lifecycle of a product, describe what security considerations should be evaluated. ", "ACM: Learning Outcome:: Describe the cost and tradeoffs associated with designing security into a product.", "ACM: Learning Outcome:: Describe the concept of mediation and the principle of complete mediation.", "ACM: Learning Outcome:: Be aware of standard components for security operations, instead of re-inventing fundamentals operations.", "ACM: Learning Outcome:: Explain the concept of trusted computing including trusted computing base and attack surface and the principle of minimizing trusted computing base.", "ACM: Knowledge Unit:: Natural Language Processing", "ACM: Learning Outcome:: Discuss the importance of usability in security mechanism design.", "ACM: Learning Outcome:: Describe security issues that arise at boundaries between multiple components. ", "ACM: Learning Outcome:: Identify the different roles of prevention mechanisms and detection/deterrence mechanisms.", "ACM: Knowledge Unit:: Defensive Programming", "ACM: Learning Outcome:: Explain why input validation and data sanitization is necessary in the face of adversarial control of the input channel. ", "ACM: Learning Outcome:: Explain why you might choose to develop a program in a type-safe language like Java, in contrast to an unsafe programming language like C/C++.", "ACM: Learning Outcome:: Classify common input validation errors, and write correct input validation code.", "ACM: Learning Outcome:: Demonstrate using a high-level programming language how to prevent a race condition from occurring and how to handle an exception.", "ACM: Learning Outcome:: Demonstrate the identification and graceful handling of error conditions.", "ACM: Learning Outcome:: Explain the risks with misusing interfaces with third-party code and how to correctly use third-party code.", "ACM: Learning Outcome:: Discuss the need to update software to fix security vulnerabilities and the lifecycle management of the fix.", "ACM: Learning Outcome:: List examples of direct and indirect information flows.", "ACM: Learning Outcome:: Explain the role of random numbers in security, beyond just cryptography (eg password generation, randomized algorithms to avoid algorithmic denial of service attacks).", "ACM: Learning Outcome:: Explain the different types of mechanisms for detecting and mitigating data sanitization errors.", "ACM: Learning Outcome:: Demonstrate how programs are tested for input handling errors.", "ACM: Learning Outcome:: Use static and dynamic tools to identify programming faults.", "ACM: Learning Outcome:: Describe how memory architecture is used to protect runtime attacks.", "ACM: Knowledge Unit:: Threats and Attacks", "ACM: Learning Outcome:: Describe likely attacker types against a particular system.", "ACM: Learning Outcome:: Discuss the limitations of malware countermeasures (eg, signature-based detection, behavioral detection).", "ACM: Learning Outcome:: Identify instances of social engineering attacks and Denial of Service attacks.", "ACM: Learning Outcome:: Discuss how Denial of Service attacks can be identified and mitigated.", "ACM: Learning Outcome:: Describe risks to privacy and anonymity in commonly used applications.", "ACM: Learning Outcome:: Discuss the concepts of covert channels and other data leakage procedures.", "ACM: Knowledge Unit:: Network Security", "ACM: Learning Outcome:: Describe the different categories of network threats and attacks.", "ACM: Learning Outcome:: Describe the architecture for public and private key cryptography and how PKI supports network security.", "ACM: Learning Outcome:: Describe virtues and limitations of security technologies at each layer of the network stack.", "ACM: Learning Outcome:: Identify the appropriate defense mechanism(s) and its limitations given a network threat.", "ACM: Learning Outcome:: Discuss security properties and limitations of other non-wired networks.", "ACM: Learning Outcome:: Identify the additional threats faced by non-wired networks.", "ACM: Learning Outcome:: Describe threats that can and cannot be protected against using secure communication channels.", "ACM: Learning Outcome:: Summarize defenses against network censorship.", "ACM: Learning Outcome:: Diagram a network for security.", "ACM: Knowledge Unit:: Cryptography", "ACM: Learning Outcome:: Describe the purpose of Cryptography and list ways it is used in data communications.", "ACM: Learning Outcome:: Define the following terms: Cipher, Cryptanalysis, Cryptographic Algorithm, and Cryptology and describe the two basic methods (ciphers) for transforming plain text in cipher text.", "ACM: Learning Outcome:: Discuss the importance of prime numbers in cryptography and explain their use in cryptographic algorithms.", "ACM: Learning Outcome:: Explain how Public Key Infrastructure supports digital signing and encryption and discuss the limitations/vulnerabilities.", "ACM: Learning Outcome:: Use cryptographic primitives and their basic properties.", "ACM: Learning Outcome:: Illustrate how to measure entropy and how to generate cryptographic randomness.", "ACM: Learning Outcome:: Use public-key primitives and their applications.", "ACM: Learning Outcome:: Explain how key exchange protocols work and how they fail.", "ACM: Learning Outcome:: Discuss cryptographic protocols and their properties.", "ACM: Learning Outcome:: Describe real-world applications of cryptographic primitives and protocols.", "ACM: Learning Outcome:: Summarize precise security definitions, attacker capabilities and goals.", "ACM: Learning Outcome:: Apply appropriate known cryptographic techniques for a given scenario.", "ACM: Learning Outcome:: Appreciate the dangers of inventing one\u2019s own cryptographic methods.", "ACM: Learning Outcome:: Describe quantum cryptography and the impact of quantum computing on cryptographic algorithms.", "ACM: Knowledge Unit:: Web Security", "ACM: Learning Outcome:: Describe the browser security model including same-origin policy and threat models in web security.", "ACM: Learning Outcome:: Discuss the concept of web sessions, secure communication channels such as TLS and importance of secure certificates, authentication including single sign-on such as OAuth and SAML.", "ACM: Learning Outcome:: Investigate common types of vulnerabilities and attacks in web applications, and defenses against them.", "ACM: Learning Outcome:: Use client-side security capabilities.", "ACM: Knowledge Unit:: Platform Security", "ACM: Learning Outcome:: Explain the concept of code integrity and code signing and the scope it applies to.", "ACM: Learning Outcome:: Discuss the concept of root of trust and the process of secure boot and secure loading.", "ACM: Learning Outcome:: Describe the mechanism of remote attestation of system integrity.", "ACM: Learning Outcome:: Summarize the goals and key primitives of TPM.", "ACM: Learning Outcome:: Identify the threats of plugging peripherals into a device.", "ACM: Learning Outcome:: Identify physical attacks and countermeasures.", "ACM: Learning Outcome:: Identify attacks on non-PC hardware platforms.", "ACM: Learning Outcome:: Discuss the concept and importance of trusted path.", "ACM: Knowledge Unit:: Security Policy and Governance", "ACM: Learning Outcome:: Describe the concept of privacy including personally private information, potential violations of privacy due to security mechanisms, and describe how privacy protection mechanisms run in conflict with security mechanisms.", "ACM: Learning Outcome:: Describe how an attacker can infer a secret by interacting with a database.", "ACM: Learning Outcome:: Explain how to set a data backup policy or password refresh policy.", "ACM: Learning Outcome:: Discuss how to set a breach disclosure policy.", "ACM: Learning Outcome:: Describe the consequences of data retention policies.", "ACM: Learning Outcome:: Identify the risks of relying on outsourced manufacturing.", "ACM: Learning Outcome:: Identify the risks and benefits of outsourcing to the cloud.", "ACM: Knowledge Unit:: Digital Forensics", "ACM: Learning Outcome:: Describe what is a Digital Investigation is, the sources of digital evidence, and the limitations of forensics.", "ACM: Learning Outcome:: Explain how to design software to support forensics.", "ACM: Learning Outcome:: Describe the legal requirements for use of seized data.", "ACM: Learning Outcome:: Describe the process of evidence seizure from the time when the requirement was identified to the disposition of the data.", "ACM: Learning Outcome:: Describe how data collection is accomplished and the proper storage of the original and forensics copy.", "ACM: Learning Outcome:: Conduct data collection on a hard drive.", "ACM: Learning Outcome:: Describe a person\u2019s responsibility and liability while testifying as a forensics examiner.", "ACM: Learning Outcome:: Recover data based on a given search term from an imaged system.", "ACM: Learning Outcome:: Reconstruct application history from application artifacts.", "ACM: Learning Outcome:: Reconstruct web browsing history from web artifacts.", "ACM: Learning Outcome:: Capture and interpret network traffic.", "ACM: Learning Outcome:: Discuss the challenges associated with mobile device forensics.", "ACM: Learning Outcome:: Inspect a system (network, computer, or application) for the presence of malware or malicious activity.", "ACM: Learning Outcome:: Apply forensics tools to investigate security breaches.", "ACM: Learning Outcome:: Identify anti-forensic methods.", "ACM: Knowledge Unit:: Secure Software Engineering", "ACM: Learning Outcome:: Describe the requirements for integrating security into the SDL.", "ACM: Learning Outcome:: Apply the concepts of the Design Principles for Protection Mechanisms, the Principles for Software Security (Viega and McGraw), and the Principles for Secure Design (Morrie Gasser) on a software development project.", "ACM: Learning Outcome:: Develop specifications for a software development effort that fully specify functional requirements and identifies the expected execution paths.", "ACM: Learning Outcome:: Describe software development best practices for minimizing vulnerabilities in programming code.", "ACM: Learning Outcome:: Conduct a security verification and assessment (static and dynamic) of a software application.", "ACM: Knowledge Unit:: Information Management Concepts", "ACM: Learning Outcome:: Describe how humans gain access to information and data to support their needs.", "ACM: Learning Outcome:: Describe the advantages and disadvantages of central organizational control over data. ", "ACM: Learning Outcome:: Identify the careers/roles associated with information management (eg, database administrator, data modeler, application developer, end-user).", "ACM: Learning Outcome:: Compare and contrast information with data and knowledge.", "ACM: Learning Outcome:: Demonstrate uses of explicitly stored metadata/schema associated with data.", "ACM: Learning Outcome:: Identify issues of data persistence for an organization.", "ACM: Learning Outcome:: Critique an information application with regard to satisfying user information needs.", "ACM: Learning Outcome:: Explain uses of declarative queries.", "ACM: Learning Outcome:: Give a declarative version for a navigational query.", "ACM: Learning Outcome:: Describe several technical solutions to the problems related to information privacy, integrity, security, and preservation.", "ACM: Learning Outcome:: Explain measures of efficiency (throughput, response time) and effectiveness (recall, precision).", "ACM: Learning Outcome:: Describe approaches to scale up information systems.", "ACM: Knowledge Unit:: Static Analysis", "ACM: Learning Outcome:: Identify vulnerabilities and failure scenarios in common forms of information systems.", "ACM: Knowledge Unit:: Database Systems", "ACM: Learning Outcome:: Explain the characteristics that distinguish the database approach from the approach of programming with data files.", "ACM: Learning Outcome:: Describe the most common designs for core database system components including the query optimizer, query executor, storage manager, access methods, and transaction processor.", "ACM: Learning Outcome:: Cite the basic goals, functions, and models of database systems.", "ACM: Learning Outcome:: Describe the components of a database system and give examples of their use.", "ACM: Learning Outcome:: Identify major DBMS functions and describe their role in a database system.", "ACM: Learning Outcome:: Explain the concept of data independence and its importance in a database system.", "ACM: Learning Outcome:: Use a declarative query language to elicit information from a database.", "ACM: Learning Outcome:: Describe facilities that datatbases provide supporting structures and/or stream (sequence) data, eg, text.", "ACM: Learning Outcome:: Describe major approaches to storing and processing large volumes of data.", "ACM: Knowledge Unit:: Data Modeling", "ACM: Learning Outcome:: Compare and contrast appropriate data models, including internal structures, for different types of data.", "ACM: Learning Outcome:: Describe concepts in modeling notation (eg, Entity-Relation Diagrams or UML) and how they would be used.", "ACM: Learning Outcome:: Define the fundamental terminology used in the relational data model.", "ACM: Learning Outcome:: Describe the basic principles of the relational data model.", "ACM: Learning Outcome:: Apply the modeling concepts and notation of the relational data model.", "ACM: Learning Outcome:: Describe the main concepts of the OO model such as object identity, type constructors, encapsulation, inheritance, polymorphism, and versioning.", "ACM: Learning Outcome:: Describe the differences between relational and semi-structured data models.", "ACM: Learning Outcome:: Give a semi-structured equivalent (eg, in DTD or XML Schema) for a given relational schema.", "ACM: Knowledge Unit:: Indexing", "ACM: Learning Outcome:: Generate an index file for a collection of resources.", "ACM: Learning Outcome:: Explain the role of an inverted index in locating a document in a collection.", "ACM: Learning Outcome:: Explain how stemming and stop words affect indexing.", "ACM: Learning Outcome:: Identify appropriate indices for given relational schema and query set.", "ACM: Learning Outcome:: Estimate time to retrieve information, when indices are used compared to when they are not used.", "ACM: Learning Outcome:: Describe key challenges in web crawling, eg, detecting duplicate documents, determining the crawling frontier.", "ACM: Knowledge Unit:: Relational Databases", "ACM: Learning Outcome:: Prepare a relational schema from a conceptual model developed using the entity- relationship model.", "ACM: Learning Outcome:: Explain and demonstrate the concepts of entity integrity constraint and referential integrity constraint (including definition of the concept of a foreign key).", "ACM: Learning Outcome:: Demonstrate use of the relational algebra operations from mathematical set theory (union, intersection, difference, and Cartesian product) and the relational algebra operations developed specifically for relational databases (select (restrict), project, join, and division).", "ACM: Learning Outcome:: Write queries in the relational algebra.", "ACM: Learning Outcome:: Write queries in the tuple relational calculus.", "ACM: Learning Outcome:: Determine the functional dependency between two or more attributes that are a subset of a relation.", "ACM: Learning Outcome:: Connect constraints expressed as primary key and foreign key, with functional dependencies.", "ACM: Learning Outcome:: Compute the closure of a set of attributes under given functional dependencies.", "ACM: Learning Outcome:: Determine whether a set of attributes form a superkey and/or candidate key for a relation with given functional dependencies.", "ACM: Learning Outcome:: Evaluate a proposed decomposition, to say whether it has lossless-join and dependency-preservation.", "ACM: Learning Outcome:: Describe the properties of BCNF, PJNF, 5NF.", "ACM: Learning Outcome:: Explain the impact of normalization on the efficiency of database operations especially query optimization.", "ACM: Learning Outcome:: Describe what is a multi-valued dependency and what type of constraints it specifies.", "ACM: Knowledge Unit:: Query Languages", "ACM: Learning Outcome:: Create a relational database schema in SQL that incorporates key, entity integrity, and referential integrity constraints.", "ACM: Learning Outcome:: Use SQL to create tables and retrieve (SELECT) information from a database.", "ACM: Learning Outcome:: Evaluate a set of query processing strategies and select the optimal strategy.", "ACM: Learning Outcome:: Create a non-procedural query by filling in templates of relations to construct an example of the desired query result.", "ACM: Learning Outcome:: Embed object-oriented queries into a stand-alone language such as C++ or Java (eg, SELECT ColMethod() FROM Object).", "ACM: Learning Outcome:: Write a stored procedure that deals with parameters and has some control flow, to provide a given functionality.", "ACM: Knowledge Unit:: Transaction Processing", "ACM: Learning Outcome:: Create a transaction by embedding SQL into an application program.", "ACM: Learning Outcome:: Explain the concept of implicit commits.", "ACM: Learning Outcome:: Describe the issues specific to efficient transaction execution.", "ACM: Learning Outcome:: Explain when and why rollback is needed and how logging assures proper rollback.", "ACM: Learning Outcome:: Explain the effect of different isolation levels on the concurrency control mechanisms.", "ACM: Learning Outcome:: Choose the proper isolation level for implementing a specified transaction protocol.", "ACM: Learning Outcome:: Identify appropriate transaction boundaries in application programs.", "ACM: Knowledge Unit:: Distributed Databases", "ACM: Learning Outcome:: Explain the techniques used for data fragmentation, replication, and allocation during the distributed database design process.", "ACM: Learning Outcome:: Evaluate simple strategies for executing a distributed query to select the strategy that minimizes the amount of data transfer.", "ACM: Learning Outcome:: Explain how the two-phase commit protocol is used to deal with committing a transaction that accesses databases stored on multiple nodes.", "ACM: Learning Outcome:: Describe distributed concurrency control based on the distinguished copy techniques and the voting method.", "ACM: Learning Outcome:: Describe the three levels of software in the client-server model.", "ACM: Knowledge Unit:: Physical Database Design", "ACM: Learning Outcome:: Explain the concepts of records, record types, and files, as well as the different techniques for placing file records on disk.", "ACM: Learning Outcome:: Give examples of the application of primary, secondary, and clustering indexes.", "ACM: Learning Outcome:: Distinguish between a non-dense index and a dense index.", "ACM: Learning Outcome:: Implement dynamic multilevel indexes using B-trees.", "ACM: Learning Outcome:: Explain the theory and application of internal and external hashing techniques.", "ACM: Learning Outcome:: Use hashing to facilitate dynamic file expansion.", "ACM: Learning Outcome:: Describe the relationships among hashing, compression, and efficient database searches.", "ACM: Learning Outcome:: Evaluate costs and benefits of various hashing schemes.", "ACM: Learning Outcome:: Explain how physical database design affects database transaction efficiency.", "ACM: Knowledge Unit:: Data Mining", "ACM: Learning Outcome:: Compare and contrast different uses of data mining as evidenced in both research and application.", "ACM: Learning Outcome:: Explain the value of finding associations in market basket data.", "ACM: Learning Outcome:: Characterize the kinds of patterns that can be discovered by association rule mining.", "ACM: Learning Outcome:: Describe how to extend a relational system to find patterns using association rules.", "ACM: Learning Outcome:: Evaluate different methodologies for effective application of data mining.", "ACM: Learning Outcome:: Identify and characterize sources of noise, redundancy, and outliers in presented data.", "ACM: Learning Outcome:: Identify mechanisms (on-line aggregation, anytime behavior, interactive visualization) to close the loop in the data mining process.", "ACM: Learning Outcome:: Describe why the various close-the-loop processes improve the effectiveness of data mining.", "ACM: Knowledge Unit:: Information Storage and Retrieval", "ACM: Learning Outcome:: Explain basic information storage and retrieval concepts.", "ACM: Learning Outcome:: Describe what issues are specific to efficient information retrieval.", "ACM: Learning Outcome:: Give applications of alternative search strategies and explain why the particular search strategy is appropriate for the application.", "ACM: Learning Outcome:: Design and implement a small to medium size information storage and retrieval system, or digital library.", "ACM: Learning Outcome:: Describe some of the technical solutions to the problems related to archiving and preserving information in a digital library.", "ACM: Knowledge Unit:: Multimedia Systems", "ACM: Learning Outcome:: Describe the media and supporting devices commonly associated with multimedia information and systems.", "ACM: Learning Outcome:: Demonstrate the use of content-based information analysis in a multimedia information system.", "ACM: Learning Outcome:: Critique multimedia presentations in terms of their appropriate use of audio, video, graphics, color, and other information presentation concepts.", "ACM: Learning Outcome:: Implement a multimedia application using an authoring system.", "ACM: Learning Outcome:: For each of several media or multimedia standards, describe in non-technical language what the standard calls for, and explain how aspects of human perception might be sensitive to the limitations of that standard.", "ACM: Learning Outcome:: Describe the characteristics of a computer system (including identification of support tools and appropriate standards) that has to host the implementation of one of a range of possible multimedia applications.", "ACM: Knowledge Unit:: Fundamental Issues", "ACM: Learning Outcome:: Describe Turing test and the \u201cChinese Room\u201d thought experiment.", "ACM: Learning Outcome:: Differentiate between the concepts of optimal reasoning/behavior and human-like reasoning/behavior.", "ACM: Learning Outcome:: Determing the characteristics of a given problem that an intelligent systems must solve.", "ACM: Knowledge Unit:: Basic Search Strategies", "ACM: Learning Outcome:: Formulate an efficient problem space for a problem expressed in natural language (eg, English) in terms of initial and goal states, and operators.", "ACM: Learning Outcome:: Describe the role of heuristics and describe the trade-offs among completeness, optimality, time complexity, and space complexity.", "ACM: Learning Outcome:: Describe the problem of combinatorial explosion of search space and its consequences.", "ACM: Learning Outcome:: Select and implement an appropriate uninformed search algorithm for a problem, and characterize its time and space complexities.", "ACM: Learning Outcome:: Select and implement an appropriate informed search algorithm for a problem by designing the necessary heuristic evaluation function.", "ACM: Learning Outcome:: Evaluate whether a heuristic for a given problem is admissible/can guarantee optimal solution.", "ACM: Learning Outcome:: Formulate a problem specified in natural language (eg, English) as a constraint satisfaction problem and implement it using a chronological backtracking algorithm or stochastic local search.", "ACM: Learning Outcome:: Compare and contrast basic search issues with game playing issues.", "ACM: Knowledge Unit:: Basic Knowledge Representation and Reasoning", "ACM: Learning Outcome:: Translate a natural language (eg, English) sentence into predicate logic statement.", "ACM: Learning Outcome:: Convert a logic statement into clause form.", "ACM: Learning Outcome:: Apply resolution to a set of logic statements to answer a query.", "ACM: Learning Outcome:: Make a probabilistic inference in a real-world problem using Bayes\u2019 theorem to determine the probability of a hypothesis given evidence.", "ACM: Knowledge Unit:: Basic Machine Learning", "ACM: Learning Outcome:: List the differences among the three main styles of learning: supervised, reinforcement, and unsupervised.", "ACM: Learning Outcome:: Identify examples of classification tasks, including the available input features and output to be predicted.", "ACM: Learning Outcome:: Explain the difference between inductive and deductive learning.", "ACM: Learning Outcome:: Describe over-fitting in the context of a problem.", "ACM: Learning Outcome:: Apply the simple statistical learning algorithm such as Naive Bayesian Classifier to a classification task and measure the classifier's accuracy.", "ACM: Knowledge Unit:: Advanced Search", "ACM: Learning Outcome:: Design and implement a genetic algorithm solution to a problem.", "ACM: Learning Outcome:: Design and implement a simulated annealing schedule to avoid local minima in a problem.", "ACM: Learning Outcome:: Design and implement A*/beam search to solve a problem.", "ACM: Learning Outcome:: Apply minimax search with alpha-beta pruning to prune search space in a two-player game.", "ACM: Learning Outcome:: Compare and contrast genetic algorithms with classic search techniques.", "ACM: Learning Outcome:: Compare and contrast various heuristic searches vis-a-vis applicability to a given problem.", "ACM: Knowledge Unit:: Advanced Represenation and Reasoning", "ACM: Learning Outcome:: Compare and contrast the most common models used for structured knowledge representation, highlighting their strengths and weaknesses.", "ACM: Learning Outcome:: Identify the components of non-monotonic reasoning and its usefulness as a representational mechanisms for belief systems.", "ACM: Learning Outcome:: Compare and contrast the basic techniques for representing uncertainty.", "ACM: Learning Outcome:: Compare and contrast the basic techniques for qualitative representation.", "ACM: Learning Outcome:: Apply situation and event calculus to problems of action and change.", "ACM: Learning Outcome:: Explain the distinction between temporal and spatial reasoning, and how they interrelate.", "ACM: Learning Outcome:: Explain the difference between rule-based, case-based and model-based reasoning techniques.", "ACM: Learning Outcome:: Define the concept of a planning system and how it differs from classical search techniques.", "ACM: Learning Outcome:: Describe the differences between planning as search, operator-based planning, and propositional planning, providing examples of domains where each is most applicable.", "ACM: Learning Outcome:: Explain the distinction between monotonic and non-monotonic inference.", "ACM: Knowledge Unit:: Reasoning Under Uncertainty", "ACM: Learning Outcome:: Apply Bayes\u2019 rule to determine the probability of a hypothesis given evidence.", "ACM: Learning Outcome:: Explain how conditional independence assertions allow for greater efficiency of probabilistic systems.", "ACM: Learning Outcome:: Identify examples of knowledge representations for reasoning under uncertainty.", "ACM: Learning Outcome:: State the complexity of exact inference Identify methods for approximate inference.", "ACM: Learning Outcome:: Design and implement at least one knowledge representation for reasoning under uncertainty.", "ACM: Learning Outcome:: Describe the complexities of temporal probabilistic reasoning.", "ACM: Learning Outcome:: Design and implement an HMM as one example of a temporal probabilistic system.", "ACM: Learning Outcome:: Describe the relationship between preferences and utility functions.", "ACM: Learning Outcome:: Explain how utility functions and probabilistic reasoning can be combined to make rational decisions.", "ACM: Knowledge Unit:: Agents", "ACM: Learning Outcome:: List the defining characteristics of an intelligent agent.", "ACM: Learning Outcome:: Characterize and contrast the standard agent architectures.", "ACM: Learning Outcome:: Describe the applications of agent theory to domains such as software agents, personal assistants, and believable agents.", "ACM: Learning Outcome:: Describe the primary paradigms used by learning agents.", "ACM: Learning Outcome:: Demonstrate using appropriate examples how multi-agent systems support agent interaction.", "ACM: Learning Outcome:: Define and contrast deterministic and stochastic grammars, providing examples to show the adequacy of each.", "ACM: Learning Outcome:: Simulate, apply, or implement classic and stochastic algorithms for parsing natural language.", "ACM: Learning Outcome:: Identify the challenges of representing meaning.", "ACM: Learning Outcome:: List the advantages of using standard corpora Identify examples of current corpora for a variety of NLP tasks.", "ACM: Learning Outcome:: Identify techniques for information retrieval, language translation, and text classification.", "ACM: Knowledge Unit:: Advanced Machine Learning", "ACM: Learning Outcome:: Explain the differences among the three main styles of learning: supervised, reinforcement, and unsupervised.", "ACM: Learning Outcome:: Implement simple algorithms for supervised learning, reinforcement learning, and unsupervised learning.", "ACM: Learning Outcome:: Determine which of the three learning styles is appropriate to a particular problem domain.", "ACM: Learning Outcome:: Compare and contrast each of the following techniques, providing examples of when each strategy is superior: decision trees, neural networks, and belief networks.", "ACM: Learning Outcome:: Evaluate the performance of a simple learning system on a real-world dataset.", "ACM: Learning Outcome:: Characterize the state of the art in learning theory, including its achievements and its shortcomings.", "ACM: Learning Outcome:: Explain the problem of overfitting, along with techniques for detecting and managing the problem.", "ACM: Knowledge Unit:: Robotics", "ACM: Learning Outcome:: List capabilities and limitations of today's state-of-the-art robot systems, including their sensors and the crucial sensor processing that informs those systems.", "ACM: Learning Outcome:: Integrate sensors, actuators, and software into a robot designed to undertake some task.", "ACM: Learning Outcome:: Program a robot to accomplish simple tasks using deliberative, reactive, and/or hybrid control architectures.", "ACM: Learning Outcome:: Implement fundamental motion planning algorithms within a robot configuration space.", "ACM: Learning Outcome:: Characterize the uncertainties associated with common robot sensors and actuators; articulate strategies for mitigating these uncertainties.", "ACM: Learning Outcome:: List the differences among robots' representations of their external environment, including their strengths and shortcomings.", "ACM: Learning Outcome:: Compare and contrast at least three strategies for robot navigation within known and/or unknown environments, including their strengths and shortcomings.", "ACM: Learning Outcome:: Describe at least one approach for coordinating the actions and sensing of several robots to accomplish a single task.", "ACM: Knowledge Unit:: Perception and Computer Vision", "ACM: Learning Outcome:: Summarize the importance of image and object recognition in AI and indicate several significant applications of this technology.", "ACM: Learning Outcome:: List at least three image-segmentation approaches, such as thresholding, edge-based and region-based algorithms, along with their defining characteristics, strengths, and weaknesses.", "ACM: Learning Outcome:: Implement 2d object recognition based on contour- and/or region-based shape representations.", "ACM: Learning Outcome:: Distinguish the goals of sound-recognition, speech-recognition, and speaker-recognition and identify how the raw audio signal will be handled differently in each of these cases.", "ACM: Learning Outcome:: Provide at least two examples of a transformation of a data source from one sensory domain to another, eg, tactile data interpreted as single-band 2d images.", "ACM: Learning Outcome:: Implement a feature-extraction algorithm on real data, eg, an edge or corner detector for images or vectors of Fourier coefficients describing a short slice of audio signal.", "ACM: Learning Outcome:: Implement an algorithm combining features into higher-level percepts, eg, a contour or polygon from visual primitives or phoneme hypotheses from an audio signal.", "ACM: Learning Outcome:: Implement a classification algorithm that segments input percepts into output categories and quantitatively evaluates the resulting classification.", "ACM: Learning Outcome:: Evaluate the performance of the underlying feature-extraction, relative to at least one alternative possible approach (whether implemented or not) in its contribution to the classification task (8), above.", "ACM: Learning Outcome:: Describe at least three classification approaches, their prerequisites for applicability, their strengths, and their shortcomings.", "ACM: Knowledge Unit:: Introduction (NC)", "ACM: Learning Outcome:: Articulate the organization of the Internet.", "ACM: Learning Outcome:: List and define the appropriate network terminology.", "ACM: Learning Outcome:: Describe the layered structure of a typical networked architecture.", "ACM: Learning Outcome:: Identify the different types of complexity in a network (edges, core, etc).", "ACM: Knowledge Unit:: Networked Applications", "ACM: Learning Outcome:: List the differences and the relations between names and addresses in a network.", "ACM: Learning Outcome:: Define the principles behind naming schemes and resource location.", "ACM: Learning Outcome:: Implement a simple client-server socket-based application.", "ACM: Knowledge Unit:: Reliable Data Delivery", "ACM: Learning Outcome:: Describe the operation of reliable delivery protocols.", "ACM: Learning Outcome:: List the factors that affect the performance of reliable delivery protocols.", "ACM: Learning Outcome:: Design and implement a simple reliable protocol.", "ACM: Knowledge Unit:: Routing and Forwarding", "ACM: Learning Outcome:: Describe the organization of the network layer.", "ACM: Learning Outcome:: Describe how packets are forwarded in an IP network.", "ACM: Learning Outcome:: List the scalability benefits of hierarchical addressing.", "ACM: Knowledge Unit:: Local Area Networks", "ACM: Learning Outcome:: Describe how frames are forwarded in an Ethernet network.", "ACM: Learning Outcome:: Describe the differences between IP and Ethernet.", "ACM: Learning Outcome:: Describe the interrelations between IP and Ethernet.", "ACM: Learning Outcome:: Describe the steps used in one common approach to the multiple access problem.", "ACM: Knowledge Unit:: Resource Allocation", "ACM: Learning Outcome:: Describe how resources can be allocated in a network.", "ACM: Learning Outcome:: Describe the congestion problem in a large network.", "ACM: Learning Outcome:: Compare and contrast fixed and dynamic allocation techniques.", "ACM: Learning Outcome:: Compare and contrast current approaches to congestion.", "ACM: Knowledge Unit:: Mobility", "ACM: Learning Outcome:: Describe the organization of a wireless network.", "ACM: Learning Outcome:: Describe how wireless networks support mobile users.", "ACM: Knowledge Unit:: Social Networking", "ACM: Learning Outcome:: Discuss the key principles (such as membership, trust) of social networking.", "ACM: Learning Outcome:: Describe how existing social networks operate.", "ACM: Learning Outcome:: Construct a social network graph from network data.", "ACM: Learning Outcome:: Analyze a social network to determine who the key people are.", "ACM: Learning Outcome:: Evaluate a given interpretation of a social network question with associated data.", "ACM: Knowledge Unit:: Overview of Operating Systems", "ACM: Learning Outcome:: Explain the objectives and functions of modern operating systems.", "ACM: Learning Outcome:: Analyze the tradeoffs inherent in operating system design.", "ACM: Learning Outcome:: Describe the functions of a contemporary operating system with respect to convenience, efficiency, and the ability to evolve.", "ACM: Learning Outcome:: Discuss networked, client-server, distributed operating systems and how they differ from single user operating systems.", "ACM: Learning Outcome:: Identify potential threats to operating systems and the security features design to guard against them.", "ACM: Knowledge Unit:: Operating System Principles", "ACM: Learning Outcome:: Explain the concept of a logical layer.", "ACM: Learning Outcome:: Explain the benefits of building abstract layers in hierarchical fashion.", "ACM: Learning Outcome:: Describe the value of APIs and middleware.", "ACM: Learning Outcome:: Describe how computing resources are used by application software and managed by system software.", "ACM: Learning Outcome:: Contrast kernel and user mode in an operating system.", "ACM: Learning Outcome:: Discuss the advantages and disadvantages of using interrupt processing.", "ACM: Learning Outcome:: Explain the use of a device list and driver I/O queue.", "ACM: Knowledge Unit:: Concurrency", "ACM: Learning Outcome:: Describe the need for concurrency within the framework of an operating system.", "ACM: Learning Outcome:: Demonstrate the potential run-time problems arising from the concurrent operation of many separate tasks.", "ACM: Learning Outcome:: Summarize the range of mechanisms that can be employed at the operating system level to realize concurrent systems and describe the benefits of each.", "ACM: Learning Outcome:: Explain the different states that a task may pass through and the data structures needed to support the management of many tasks.", "ACM: Learning Outcome:: Summarize techniques for achieving synchronization in an operating system (eg, describe how to implement a semaphore using OS primitives).", "ACM: Learning Outcome:: Describe reasons for using interrupts, dispatching, and context switching to support concurrency in an operating system.", "ACM: Learning Outcome:: Create state and transition diagrams for simple problem domains.", "ACM: Knowledge Unit:: Scheduling and Dispatch", "ACM: Learning Outcome:: Compare and contrast the common algorithms used for both preemptive and non-preemptive scheduling of tasks in operating systems, such as priority, performance comparison, and fair-share schemes.", "ACM: Learning Outcome:: Describe relationships between scheduling algorithms and application domains.", "ACM: Learning Outcome:: Discuss the types of processor scheduling such as short-term, medium-term, long-term, and I/O.", "ACM: Learning Outcome:: Describe the difference between processes and threads.", "ACM: Learning Outcome:: Compare and contrast static and dynamic approaches to real-time scheduling.", "ACM: Learning Outcome:: Discuss the need for preemption and deadline scheduling.", "ACM: Learning Outcome:: Identify ways that the logic embodied in scheduling algorithms are applicable to other domains, such as disk I/O, network scheduling, project scheduling, and problems beyond computing.", "ACM: Knowledge Unit:: Memory Management", "ACM: Learning Outcome:: Explain memory hierarchy and cost-performance trade-offs.", "ACM: Learning Outcome:: Summarize the principles of virtual memory as applied to caching and paging.", "ACM: Learning Outcome:: Evaluate the trade-offs in terms of memory size (main memory, cache memory, auxiliary memory) and processor speed.", "ACM: Learning Outcome:: Defend the different ways of allocating memory to tasks, citing the relative merits of each.", "ACM: Learning Outcome:: Describe the reason for and use of cache memory (performance and proximity, different dimension of how caches complicate isolation and VM abstraction).", "ACM: Learning Outcome:: Discuss the concept of thrashing, both in terms of the reasons it occurs and the techniques used to recognize and manage the problem.", "ACM: Knowledge Unit:: Security and Protection", "ACM: Learning Outcome:: Articulate the need for protection and security in an OS (cross reference IAS/Security Architecture and Systems Administration/Investigating Operating Systems Security for various systems).", "ACM: Learning Outcome:: Summarize the features and limitations of an operating system used to provide protection and security (cross reference IAS/Security Architecture and Systems Administration).", "ACM: Learning Outcome:: Explain the mechanisms available in an OS to control access to resources (cross reference IAS/Security Architecture and Systems Administration/Access Control/Configuring systems to operate securely as an IT system).", "ACM: Learning Outcome:: Carry out simple system administration tasks according to a security policy, for example creating accounts, setting permissions, applying patches, and arranging for regular backups (cross reference IAS/Security Architecture and Systems Administration ).", "ACM: Knowledge Unit:: Virtual Machines", "ACM: Learning Outcome:: Explain the concept of virtual memory and how it is realized in hardware and software.", "ACM: Learning Outcome:: Differentiate emulation and isolation.", "ACM: Learning Outcome:: Evaluate virtualization trade-offs.", "ACM: Learning Outcome:: Discuss hypervisors and the need for them in conjunction with different types of hypervisors.", "ACM: Knowledge Unit:: Device Management", "ACM: Learning Outcome:: Explain the key difference between serial and parallel devices and identify the conditions in which each is appropriate.", "ACM: Learning Outcome:: Identify the relationship between the physical hardware and the virtual devices maintained by the operating system.", "ACM: Learning Outcome:: Explain buffering and describe strategies for implementing it.", "ACM: Learning Outcome:: Differentiate the mechanisms used in interfacing a range of devices (including hand-held devices, networks, multimedia) to a computer and explain the implications of these for the design of an operating system.", "ACM: Learning Outcome:: Describe the advantages and disadvantages of direct memory access and discuss the circumstances in which its use is warranted.", "ACM: Learning Outcome:: Identify the requirements for failure recovery.", "ACM: Learning Outcome:: Implement a simple device driver for a range of possible devices.", "ACM: Knowledge Unit:: File Systems", "ACM: Learning Outcome:: Describe the choices to be made in designing file systems.", "ACM: Learning Outcome:: Compare and contrast different approaches to file organization, recognizing the strengths and weaknesses of each.", "ACM: Learning Outcome:: Summarize how hardware developments have led to changes in the priorities for the design and the management of file systems.", "ACM: Learning Outcome:: Summarize the use of journaling and how log-structured file systems enhance fault tolerance.", "ACM: Knowledge Unit:: Real Time and Embedded Systems", "ACM: Learning Outcome:: Describe what makes a system a real-time system.", "ACM: Learning Outcome:: Explain the presence of and describe the characteristics of latency in real-time systems.", "ACM: Learning Outcome:: Summarize special concerns that real-time systems present, including risk, and how these concerns are addressed.", "ACM: Knowledge Unit:: Fault Tolerance", "ACM: Learning Outcome:: Explain the relevance of the terms fault tolerance, reliability, and availability.", "ACM: Learning Outcome:: Outline the range of methods for implementing fault tolerance in an operating system.", "ACM: Learning Outcome:: Explain how an operating system can continue functioning after a fault occurs.", "ACM: Knowledge Unit:: System Performance Evaluation", "ACM: Learning Outcome:: Describe the performance measurements used to determine how a system performs.", "ACM: Learning Outcome:: Explain the main evaluation models used to evaluate a system.", "ACM: Knowledge Unit:: Introduction (PBD)", "ACM: Learning Outcome:: Describe how platform-based development differs from general purpose programming.", "ACM: Learning Outcome:: List characteristics of platform languages.", "ACM: Learning Outcome:: Write and execute a simple platform-based program.", "ACM: Learning Outcome:: List the advantages and disadvantages of programming with platform constraints.", "ACM: Knowledge Unit:: Web Platforms", "ACM: Learning Outcome:: Design and Implement a simple web application.", "ACM: Learning Outcome:: Describe the constraints that the web puts on developers.", "ACM: Learning Outcome:: Compare and contrast web programming with general purpose programming.", "ACM: Learning Outcome:: Describe the differences between Software-as-a-Service and traditional software products.", "ACM: Learning Outcome:: Discuss how web standards impact software development.", "ACM: Learning Outcome:: Review an existing web application against a current web standard.", "ACM: Knowledge Unit:: Mobile Platforms", "ACM: Learning Outcome:: Design and implement a mobile application for a given mobile platform.", "ACM: Learning Outcome:: Discuss the constraints that mobile platforms put on developers.", "ACM: Learning Outcome:: Discuss the performance vs power tradeoff.", "ACM: Learning Outcome:: Compare and Contrast mobile programming with general purpose programming.", "ACM: Knowledge Unit:: Industrial Platforms", "ACM: Learning Outcome:: Design and implement an industrial application on a given platform (eg, using Lego Mindstorms or Matlab).", "ACM: Learning Outcome:: Compare and contrast domain specific languages with general purpose programming languages.", "ACM: Learning Outcome:: Discuss the constraints that a given industrial platforms impose on developers.", "ACM: Knowledge Unit:: Game Platforms", "ACM: Learning Outcome:: Design and Implement a simple application on a game platform.", "ACM: Learning Outcome:: Describe the constraints that game platforms impose on developers.", "ACM: Learning Outcome:: Compare and contrast game programming with general purpose programming.", "ACM: Knowledge Unit:: Parallelism Fundamentals", "ACM: Learning Outcome:: Distinguish using computational resources for a faster answer from managing efficient access to a shared resource.", "ACM: Learning Outcome:: Distinguish multiple sufficient programming constructs for synchronization that may be inter-implementable but have complementary advantages.", "ACM: Learning Outcome:: Distinguish data races from higher level races.", "ACM: Knowledge Unit:: Parallel Decomposition", "ACM: Learning Outcome:: Explain why synchronization is necessary in a specific parallel program.", "ACM: Learning Outcome:: Identify opportunities to partition a serial program into independent parallel modules.", "ACM: Learning Outcome:: Write a correct and scalable parallel algorithm.", "ACM: Learning Outcome:: Parallelize an algorithm by applying task-based decomposition.", "ACM: Learning Outcome:: Parallelize an algorithm by applying data-parallel decomposition.", "ACM: Learning Outcome:: Write a program using actors and/or reactive processes.", "ACM: Knowledge Unit:: Communication and Coordination", "ACM: Learning Outcome:: Use mutual exclusion to avoid a given race condition.", "ACM: Learning Outcome:: Give an example of an ordering of accesses among concurrent activities (eg, program with a data race) that is not sequentially consistent.", "ACM: Learning Outcome:: Give an example of a scenario in which blocking message sends can deadlock.", "ACM: Learning Outcome:: Explain when and why multicast or event-based messaging can be preferable to alternatives.", "ACM: Learning Outcome:: Write a program that correctly terminates when all of a set of concurrent tasks have completed.", "ACM: Learning Outcome:: Use a properly synchronized queue to buffer data passed among activities.", "ACM: Learning Outcome:: Explain why checks for preconditions, and actions based on these checks, must share the same unit of atomicity to be effective.", "ACM: Learning Outcome:: Write a test program that can reveal a concurrent programming error; for example, missing an update when two activities both try to increment a variable.", "ACM: Learning Outcome:: Describe at least one design technique for avoiding liveness failures in programs using multiple locks or semaphores.", "ACM: Learning Outcome:: Describe the relative merits of optimistic versus conservative concurrency control under different rates of contention among updates.", "ACM: Learning Outcome:: Give an example of a scenario in which an attempted optimistic update may never complete.", "ACM: Learning Outcome:: Use semaphores or condition variables to block threads until a necessary precondition holds.", "ACM: Knowledge Unit:: Parallel Algorithms, Analysis, and Programming", "ACM: Learning Outcome:: Define \u201ccritical path\u201d, \u201cwork\u201d, and \u201cspan\u201d.", "ACM: Learning Outcome:: Compute the work and span, and determine the critical path with respect to a parallel execution diagram.", "ACM: Learning Outcome:: Define \u201cspeed-up\u201d and explain the notion of an algorithm\u2019s scalability in this regard.", "ACM: Learning Outcome:: Identify independent tasks in a program that may be parallelized.", "ACM: Learning Outcome:: Characterize features of a workload that allow or prevent it from being naturally parallelized.", "ACM: Learning Outcome:: Implement a parallel divide-and-conquer (and/or graph algorithm) and empirically measure its performance relative to its sequential analog.", "ACM: Learning Outcome:: Decompose a problem (eg, counting the number of occurrences of some word in a document) via map and reduce operations.", "ACM: Learning Outcome:: Provide an example of a problem that fits the producer-consumer paradigm.", "ACM: Learning Outcome:: Give examples of problems where pipelining would be an effective means of parallelization.", "ACM: Learning Outcome:: Implement a parallel matrix algorithm.", "ACM: Learning Outcome:: Identify issues that arise in producer-consumer algorithms and mechanisms that may be used for addressing them.", "ACM: Knowledge Unit:: Parallel Architecture", "ACM: Learning Outcome:: Explain the differences between shared and distributed memory.", "ACM: Learning Outcome:: Describe the SMP architecture and note its key features.", "ACM: Learning Outcome:: Characterize the kinds of tasks that are a natural match for SIMD machines.", "ACM: Learning Outcome:: Describe the advantages and limitations of GPUs vs CPUs.", "ACM: Learning Outcome:: Explain the features of each classification in Flynn\u2019s taxonomy.", "ACM: Learning Outcome:: Describe assembly-level support for atomic operations.", "ACM: Topic:: Graphs and graph algorithms (Tier 2)", "ACM: Learning Outcome:: Describe the challenges in maintaining cache coherence.", "ACM: Learning Outcome:: Describe the key performance challenges in different memory and distributed system topologies.", "ACM: Knowledge Unit:: Parallel Performance", "ACM: Learning Outcome:: Detect and correct a load imbalance.", "ACM: Learning Outcome:: Calculate the implications of Amdahl\u2019s law for a particular parallel algorithm (cross-reference SF/Evaluation for Amdahl\u2019s Law).", "ACM: Learning Outcome:: Describe how data distribution/layout can affect an algorithm\u2019s communication costs.", "ACM: Learning Outcome:: Detect and correct an instance of false sharing.", "ACM: Learning Outcome:: Explain the impact of scheduling on parallel performance.", "ACM: Learning Outcome:: Explain performance impacts of data locality.", "ACM: Learning Outcome:: Explain the impact and trade-off related to power usage on parallel performance.", "ACM: Knowledge Unit:: Distributed Systems", "ACM: Learning Outcome:: Distinguish network faults from other kinds of failures.", "ACM: Learning Outcome:: Explain why synchronization constructs such as simple locks are not useful in the presence of distributed faults.", "ACM: Learning Outcome:: Write a program that performs any required marshalling and conversion into message units, such as packets, to communicate interesting data between two hosts.", "ACM: Learning Outcome:: Measure the observed throughput and response latency across hosts in a given network.", "ACM: Learning Outcome:: Explain why no distributed system can be simultaneously consistent, available, and partition tolerant.", "ACM: Learning Outcome:: Implement a simple server -- for example, a spell checking service.", "ACM: Learning Outcome:: Explain the tradeoffs among overhead, scalability, and fault tolerance when choosing a stateful v stateless design for a given service.", "ACM: Learning Outcome:: Describe the scalability challenges associated with a service growing to accommodate many clients, as well as those associated with a service only transiently having many clients.", "ACM: Learning Outcome:: Give examples of problems for which consensus algorithms such as leader election are required.", "ACM: Knowledge Unit:: Cloud Computing", "ACM: Learning Outcome:: Discuss the importance of elasticity and resource management in cloud computing.", "ACM: Learning Outcome:: Explain strategies to synchronize a common view of shared data across a collection of devices.", "ACM: Learning Outcome:: Explain the advantages and disadvantages of using virtualized infrastructure.", "ACM: Learning Outcome:: Deploy an application that uses cloud infrastructure for computing and/or data resources.", "ACM: Learning Outcome:: Appropriately partition an application between a client and resources.", "ACM: Knowledge Unit:: Formal Models and Semantics", "ACM: Learning Outcome:: Model a concurrent process using a formal model, such as pi-calculus.", "ACM: Learning Outcome:: Explain the characteristics of a particular formal parallel model.", "ACM: Learning Outcome:: Formally model a shared memory system to show if it is consistent.", "ACM: Learning Outcome:: Use a model to show progress guarantees in a parallel algorithm.", "ACM: Learning Outcome:: Use formal techniques to show that a parallel algorithm is correct with respect to a safety or liveness property.", "ACM: Learning Outcome:: Decide if a specific execution is linearizable or not.", "ACM: Knowledge Unit:: Object-Oriented Programming", "ACM: Learning Outcome:: Design and implement a class.", "ACM: Learning Outcome:: Use subclassing to design simple class hierarchies that allow code to be reused for distinct subclasses.", "ACM: Learning Outcome:: Correctly reason about control flow in a program using dynamic dispatch.", "ACM: Learning Outcome:: Compare and contrast (1) the procedural/functional approach\u2014defining a function for each operation with the function body providing a case for each data variant\u2014and (2) the object-oriented approach\u2014defining a class for each data variant with the class definition providing a method for each operation Understand both as defining a matrix of operations and variants. (OOP)", "ACM: Learning Outcome:: Explain the relationship between object-oriented inheritance (code-sharing and overriding) and subtyping (the idea of a subtype being usable in a context that expects the supertype).", "ACM: Learning Outcome:: Use object-oriented encapsulation mechanisms such as interfaces and private members.", "ACM: Learning Outcome:: Define and use iterators and other operations on aggregates, including operations that take functions as arguments, in multiple programming languages, selecting the most natural idioms for each language. (OOP)", "ACM: Knowledge Unit:: Functional Programming", "ACM: Learning Outcome:: Write basic algorithms that avoid assigning to mutable state or considering reference equality.", "ACM: Learning Outcome:: Write useful functions that take and return other functions.", "ACM: Learning Outcome:: Compare and contrast (1) the procedural/functional approach\u2014defining a function for each operation with the function body providing a case for each data variant\u2014and (2) the object-oriented approach\u2014defining a class for each data variant with the class definition providing a method for each operation Understand both as defining a matrix of operations and variants. (FP)", "ACM: Learning Outcome:: Correctly reason about variables and lexical scope in a program using function closures.", "ACM: Learning Outcome:: Use functional encapsulation mechanisms such as closures and modular interfaces.", "ACM: Learning Outcome:: Define useful static analyses in terms of a conceptual framework such as dataflow analysis.", "ACM: Learning Outcome:: Define and use iterators and other operations on aggregates, including operations that take functions as arguments, in multiple programming languages, selecting the most natural idioms for each language. (FP)", "ACM: Knowledge Unit:: Event-Driven and Reactive Programming", "ACM: Learning Outcome:: Write event handlers for use in reactive systems, such as GUIs.", "ACM: Learning Outcome:: Explain why an event-driven programming style is natural in domains where programs react to external events.", "ACM: Learning Outcome:: Describe an interactive system in terms of a model, a view, and a controller.", "ACM: Knowledge Unit:: Basic Type Systems", "ACM: Learning Outcome:: For both a primitive and a compound type, informally describe the values that have that type.", "ACM: Learning Outcome:: For a language with a static type system, describe the operations that are forbidden statically, such as passing the wrong type of value to a function or method.", "ACM: Learning Outcome:: Describe examples of program errors detected by a type system.", "ACM: Learning Outcome:: For multiple programming languages, identify program properties checked statically and program properties checked dynamically.", "ACM: Learning Outcome:: Give an example program that does not type-check in a particular language and yet would have no error if run.", "ACM: Learning Outcome:: Use types and type-error messages to write and debug programs.", "ACM: Learning Outcome:: Explain how typing rules define the set of operations that are legal for a type.", "ACM: Learning Outcome:: Write down the type rules governing the use of a particular compound type.", "ACM: Learning Outcome:: Explain why undecidability requires type systems to conservatively approximate program behavior.", "ACM: Learning Outcome:: Define and use program pieces (such as functions, classes, methods) that use generic types, including for collections.", "ACM: Learning Outcome:: Discuss the differences among generics, subtyping, and overloading.", "ACM: Learning Outcome:: Explain multiple benefits and limitations of static typing in writing, maintaining, and debugging software.", "ACM: Knowledge Unit:: Program Representation", "ACM: Learning Outcome:: Explain how programs that process other programs treat the other programs as their input data.", "ACM: Learning Outcome:: Describe an abstract syntax tree for a small language.", "ACM: Learning Outcome:: Describe the benefits of having program representations other than strings of source code.", "ACM: Learning Outcome:: Write a program to process some representation of code for some purpose, such as an interpreter, an expression optimizer, or a documentation generator.", "ACM: Knowledge Unit:: Language Translation and Execution", "ACM: Learning Outcome:: Distinguish a language definition (what constructs mean) from a particular language implementation (compiler vs interpreter, run-time representation of data objects, etc).", "ACM: Learning Outcome:: Distinguish syntax and parsing from semantics and evaluation.", "ACM: Learning Outcome:: Sketch a low-level run-time representation of core language constructs, such as objects or closures.", "ACM: Learning Outcome:: Explain how programming language implementations typically organize memory into global data, text, heap, and stack sections and how features such as recursion and memory management map to this memory model.", "ACM: Learning Outcome:: Identify and fix memory leaks and dangling-pointer dereferences.", "ACM: Learning Outcome:: Discuss the benefits and limitations of garbage collection, including the notion of reachability.", "ACM: Knowledge Unit:: Syntax Analysis", "ACM: Learning Outcome:: Use formal grammars to specify the syntax of languages.", "ACM: Learning Outcome:: Use declarative tools to generate parsers and scanners.", "ACM: Learning Outcome:: Identify key issues in syntax definitions: ambiguity, associativity, precedence.", "ACM: Knowledge Unit:: Compiler Semantic Analysis", "ACM: Learning Outcome:: Implement context-sensitive, source-level static analyses such as type-checkers or resolving identifiers to identify their binding occurrences.", "ACM: Learning Outcome:: Describe semantic analyses using an attribute grammar.", "ACM: Knowledge Unit:: Code Generation", "ACM: Learning Outcome:: Identify all essential steps for automatically converting source code into assembly or other low-level languages.", "ACM: Learning Outcome:: Generate the low-level code for calling functions/methods in modern languages.", "ACM: Learning Outcome:: Discuss why separate compilation requires uniform calling conventions.", "ACM: Learning Outcome:: Discuss why separate compilation limits optimization because of unknown effects of calls.", "ACM: Learning Outcome:: Discuss opportunities for optimization introduced by naive translation and approaches for achieving optimization, such as instruction selection, instruction scheduling, register allocation, and peephole optimization.", "ACM: Knowledge Unit:: Runtime Systems", "ACM: Learning Outcome:: Compare the benefits of different memory-management schemes, using concepts such as fragmentation, locality, and memory overhead.", "ACM: Learning Outcome:: Discuss benefits and limitations of automatic memory management.", "ACM: Learning Outcome:: Explain the use of metadata in run-time representations of objects and activation records, such as class pointers, array lengths, return addresses, and frame pointers.", "ACM: Learning Outcome:: Discuss advantages, disadvantages, and difficulties of just-in-time and dynamic recompilation.", "ACM: Learning Outcome:: Identify the services provided by modern language run-time systems.", "ACM: Learning Outcome:: Explain why non-trivial sound static analyses must be approximate.", "ACM: Learning Outcome:: Communicate why an analysis is correct (sound and terminating).", "ACM: Learning Outcome:: Distinguish \u201cmay\u201d and \u201cmust\u201d analyses.", "ACM: Learning Outcome:: Explain why potential aliasing limits sound program analysis and how alias analysis can help.", "ACM: Learning Outcome:: Use the results of a static analysis for program optimization and/or partial program correctness.", "ACM: Knowledge Unit:: Advanced Programming Constructs", "ACM: Learning Outcome:: Use various advanced programming constructs and idioms correctly.", "ACM: Learning Outcome:: Discuss how various advanced programming constructs aim to improve program structure, software quality, and programmer productivity.", "ACM: Learning Outcome:: Discuss how various advanced programming constructs interact with the definition and implementation of other language features.", "ACM: Knowledge Unit:: Concurrency and Parallelism", "ACM: Learning Outcome:: Write correct concurrent programs using multiple programming models, such as shared memory, actors, futures, and data-parallelism primitives.", "ACM: Learning Outcome:: Use a message-passing model to analyze a communication protocol.", "ACM: Learning Outcome:: Explain why programming languages do not guarantee sequential consistency in the presence of data races and what programmers must do as a result.", "ACM: Knowledge Unit:: Type Systems", "ACM: Learning Outcome:: Define a type system precisely and compositionally.", "ACM: Learning Outcome:: For various foundational type constructors, identify the values they describe and the invariants they enforce.", "ACM: Learning Outcome:: Precisely specify the invariants preserved by a sound type system.", "ACM: Learning Outcome:: Prove type safety for a simple language in terms of preservation and progress theorems.", "ACM: Learning Outcome:: Implement a unification-based type-inference algorithm for a simple language.", "ACM: Learning Outcome:: Explain how static overloading and associated resolution algorithms influence the dynamic behavior of programs.", "ACM: Knowledge Unit:: Formal Semantics", "ACM: Learning Outcome:: Give a formal semantics for a small language.", "ACM: Learning Outcome:: Write a lambda-calculus program and show its evaluation to a normal form.", "ACM: Learning Outcome:: Discuss the different approaches of operational, denotational, and axiomatic semantics.", "ACM: Learning Outcome:: Use induction to prove properties of all programs in a language.", "ACM: Learning Outcome:: Use induction to prove properaties of all programs in a language that are well-typed according to a formally defined type system.", "ACM: Learning Outcome:: Use parametricity to establish the behavior of code given only its type.", "ACM: Learning Outcome:: Use formal semantics to build a formal model of a software system other than a programming language.", "ACM: Knowledge Unit:: Language Pragmatics", "ACM: Learning Outcome:: Discuss the role of concepts such as orthogonality and well-chosen defaults in language design.", "ACM: Learning Outcome:: Use crisp and objective criteria for evaluating language-design decisions.", "ACM: Learning Outcome:: Give an example program whose result can differ under different rules for evaluation order, precedence, or associativity.", "ACM: Learning Outcome:: Show uses of delayed evaluation, such as user-defined control abstractions.", "ACM: Learning Outcome:: Discuss the need for allowing calls to external calls and system libraries and the consequences for language implementation.", "ACM: Knowledge Unit:: Logic Programming", "ACM: Learning Outcome:: Use a logic language to implement a conventional algorithm.", "ACM: Learning Outcome:: Use a logic language to implement an algorithm employing implicit search using clauses, relations, and cuts.", "ACM: Knowledge Unit:: Algorithms and Design", "ACM: Learning Outcome:: Discuss the importance of algorithms in the problem-solving process.", "ACM: Learning Outcome:: Discuss how a problem may be solved by multiple algorithms, each with different properties.", "ACM: Learning Outcome:: Create algorithms for solving simple problems.", "ACM: Learning Outcome:: Use a programming language to implement, test, and debug algorithms for solving simple problems.", "ACM: Learning Outcome:: Implement, test, and debug simple recursive functions and procedures.", "ACM: Learning Outcome:: Determine whether a recursive or iterative solution is most appropriate for a problem.", "ACM: Learning Outcome:: Implement a divide-and-conquer algorithm for solving a problem.", "ACM: Learning Outcome:: Apply the techniques of decomposition to break a program into smaller pieces.", "ACM: Learning Outcome:: Identify the data components and behaviors of multiple abstract data types.", "ACM: Learning Outcome:: Implement a coherent abstract data type, with loose coupling between components and behaviors.", "ACM: Learning Outcome:: Identify the relative strengths and weaknesses among multiple designs or implementations for a problem.", "ACM: Knowledge Unit:: Fundamental Programming Concepts", "ACM: Learning Outcome:: Analyze and explain the behavior of simple programs involving the fundamental programming constructs variables, expressions, assignments, I/O, control constructs, functions, parameter passing, and recursion. ", "ACM: Learning Outcome:: Identify and describe uses of primitive data types.", "ACM: Learning Outcome:: Write programs that use primitive data types.", "ACM: Learning Outcome:: Modify and expand short programs that use standard conditional and iterative control structures and functions.", "ACM: Learning Outcome:: Design, implement, test, and debug a program that uses each of the following fundamental programming constructs: basic computation, simple I/O, standard conditional and iterative structures, the definition of functions, and parameter passing.", "ACM: Learning Outcome:: Write a program that uses file I/O to provide persistence across multiple executions.", "ACM: Learning Outcome:: Choose appropriate conditional and iteration constructs for a given programming task.", "ACM: Learning Outcome:: Describe the concept of recursion and give examples of its use.", "ACM: Learning Outcome:: Identify the base case and the general case of a recursively-defined problem.", "ACM: Knowledge Unit:: Fundamental Data Structures", "ACM: Learning Outcome:: Discuss the appropriate use of built-in data structures.", "ACM: Learning Outcome:: Describe common applications for each of the following data structures: stack, queue, priority queue, set, and map. ", "ACM: Learning Outcome:: Write programs that use each of the following data structures: arrays, records/structs, strings, linked lists, stacks, queues, sets, and maps.", "ACM: Learning Outcome:: Compare alternative implementations of data structures with respect to performance.", "ACM: Learning Outcome:: Describe how references allow for objects to be accessed in multiple ways.", "ACM: Learning Outcome:: Compare and contrast the costs and benefits of dynamic and static data structure implementations.", "ACM: Learning Outcome:: Choose the appropriate data structure for modeling a given problem.", "ACM: Knowledge Unit:: Development Methods", "ACM: Learning Outcome:: Trace the execution of a variety of code segments and write summaries of their computations.", "ACM: Learning Outcome:: Explain why the creation of correct program components is important in the production of high-quality software.", "ACM: Learning Outcome:: Identify common coding errors that lead to insecure programs (eg, buffer overflows, memory leaks, malicious code) and apply strategies for avoiding such errors.", "ACM: Learning Outcome:: Conduct a personal code review (focused on common coding errors) on a program component using a provided checklist.", "ACM: Learning Outcome:: Contribute to a small-team code review focused on component correctness.", "ACM: Learning Outcome:: Describe how a contract can be used to specify the behavior of a program component.", "ACM: Learning Outcome:: Refactor a program by identifying opportunities to apply procedural abstraction.", "ACM: Learning Outcome:: Apply a variety of strategies to the testing and debugging of simple programs.", "ACM: Learning Outcome:: Construct, execute and debug programs using a modern IDE and associated tools such as unit testing tools and visual debuggers.", "ACM: Learning Outcome:: Construct and debug programs using the standard libraries available with a chosen programming language.", "ACM: Learning Outcome:: Analyze the extent to which another programmer\u2019s code meets documentation and programming style standards.", "ACM: Learning Outcome:: Apply consistent documentation and program style standards that contribute to the readability and maintainability of software.", "ACM: Knowledge Unit:: Software Processes", "ACM: Learning Outcome:: Describe how software can interact with and participate in various systems including information management, embedded, process control, and communications systems.", "ACM: Learning Outcome:: Describe the relative advantages and disadvantages among several major process models (eg, waterfall, iterative, and agile).", "ACM: Learning Outcome:: Describe the different practices that are key components of various process models.", "ACM: Learning Outcome:: Differentiate among the phases of software development.", "ACM: Learning Outcome:: Describe how programming in the large differs from individual efforts with respect to understanding a large code base, code reading, understanding builds, and understanding context of changes.", "ACM: Learning Outcome:: Explain the concept of a software lifecycle and provide an example, illustrating its phases including the deliverables that are produced.", "ACM: Learning Outcome:: Compare several common process models with respect to their value for development of particular classes of software systems taking into account issues such as requirement stability, size, and non-functional characteristics.", "ACM: Learning Outcome:: Define software quality and describe the role of quality assurance activities in the software process.", "ACM: Learning Outcome:: Describe the intent and fundamental similarities among process improvement approaches.", "ACM: Learning Outcome:: Compare several process improvement models such as CMM, CMMI, CQI, Plan-Do-Check-Act, or ISO9000.", "ACM: Learning Outcome:: Assess a development effort and recommend potential changes by participating in process improvement (using a model such as PSP) or engaging in a project retrospective.", "ACM: Learning Outcome:: Explain the role of process maturity models in process improvement.", "ACM: Learning Outcome:: Describe several process metrics for assessing and controlling a project.", "ACM: Learning Outcome:: Use project metrics to describe the current state of a project.", "ACM: Knowledge Unit:: Software Project Management", "ACM: Learning Outcome:: Discuss common behaviors that contribute to the effective functioning of a team.", "ACM: Learning Outcome:: Create and follow an agenda for a team meeting.", "ACM: Learning Outcome:: Identify and justify necessary roles in a software development team.", "ACM: Learning Outcome:: Understand the sources, hazards, and potential benefits of team conflict.", "ACM: Learning Outcome:: Apply a conflict resolution strategy in a team setting.", "ACM: Learning Outcome:: Use an ad hoc method to estimate software development effort (eg, time) and compare to actual effort required.", "ACM: Learning Outcome:: List several examples of software risks.", "ACM: Learning Outcome:: Describe the impact of risk in a software development lifecycle.", "ACM: Learning Outcome:: Describe different categories of risk in software systems.", "ACM: Learning Outcome:: Demonstrate through involvement in a team project the central elements of team building and team management.", "ACM: Learning Outcome:: Describe how the choice of process model affects team organizational structures and decision-making processes.", "ACM: Learning Outcome:: Create a team by identifying appropriate roles and assigning roles to team members.", "ACM: Learning Outcome:: Assess and provide feedback to teams and individuals on their performance in a team setting.", "ACM: Learning Outcome:: Using a particular software process, describe the aspects of a project that need to be planned and monitored, (eg, estimates of size and effort, a schedule, resource allocation, configuration control, change management, and project risk identification and management).", "ACM: Learning Outcome:: Track the progress of some stage in a project using appropriate project metrics.", "ACM: Learning Outcome:: Compare simple software size and cost estimation techniques.", "ACM: Learning Outcome:: Use a project management tool to assist in the assignment and tracking of tasks in a software development project.", "ACM: Learning Outcome:: Describe the impact of risk tolerance on the software development process.", "ACM: Learning Outcome:: Identify risks and describe approaches to managing risk (avoidance, acceptance, transference, mitigation), and characterize the strengths and shortcomings of each.", "ACM: Learning Outcome:: Explain how risk affects decisions in the software development process.", "ACM: Learning Outcome:: Identify security risks for a software system.", "ACM: Learning Outcome:: Demonstrate a systematic approach to the task of identifying hazards and risks in a particular situation.", "ACM: Learning Outcome:: Apply the basic principles of risk management in a variety of simple scenarios including a security situation.", "ACM: Learning Outcome:: Conduct a cost/benefit analysis for a risk mitigation approach.", "ACM: Learning Outcome:: Identify and analyze some of the risks for an entire system that arise from aspects other than the software.", "ACM: Knowledge Unit:: Tools and Environments", "ACM: Learning Outcome:: Describe the difference between centralized and distributed software configuration management.", "ACM: Learning Outcome:: Describe how version control can be used to help manage software release management.", "ACM: Learning Outcome:: Identify configuration items and use a source code control tool in a small team-based project.", "ACM: Learning Outcome:: Describe how available static and dynamic test tools can be integrated into the software development environment.", "ACM: Learning Outcome:: Describe the issues that are important in selecting a set of tools for the development of a particular software system, including tools for requirements tracking, design modeling, implementation, build automation, and testing.", "ACM: Learning Outcome:: Demonstrate the capability to use software tools in support of the development of a software product of medium size.", "ACM: Knowledge Unit:: Requirements Engineering", "ACM: Learning Outcome:: List the key components of a use case or similar description of some behavior that is required for a system.", "ACM: Learning Outcome:: Describe how the requirements engineering process supports the elicitation and validation of behavioral requirements.", "ACM: Learning Outcome:: Interpret a given requirements model for a simple software system.", "ACM: Learning Outcome:: Describe the fundamental challenges of and common techniques used for requirements elicitation.", "ACM: Learning Outcome:: List the key components of a data model (eg, class diagrams or ER diagrams).", "ACM: Learning Outcome:: Identify both functional and non-functional requirements in a given requirements specification for a software system.", "ACM: Learning Outcome:: Conduct a review of a set of software requirements to determine the quality of the requirements with respect to the characteristics of good requirements.", "ACM: Learning Outcome:: Apply key elements and common methods for elicitation and analysis to produce a set of software requirements for a medium-sized software system.", "ACM: Learning Outcome:: Compare the plan-driven and agile approaches to requirements specification and validation and describe the benefits and risks associated with each.", "ACM: Learning Outcome:: Use a common, non-formal method to model and specify the requirements for a medium-size software system.", "ACM: Learning Outcome:: Translate into natural language a software requirements specification (eg, a software component contract) written in a formal specification language.", "ACM: Learning Outcome:: Create a prototype of a software system to mitigate risk in requirements.", "ACM: Learning Outcome:: Differentiate between forward and backward tracing and explain their roles in the requirements validation process.", "ACM: Knowledge Unit:: Software Design", "ACM: Learning Outcome:: Articulate design principles including separation of concerns, information hiding, coupling and cohesion, and encapsulation.", "ACM: Learning Outcome:: Use a design paradigm to design a simple software system, and explain how system design principles have been applied in this design.", "ACM: Learning Outcome:: Construct models of the design of a simple software system that are appropriate for the paradigm used to design it.", "ACM: Learning Outcome:: Within the context of a single design paradigm, describe one or more design patterns that could be applicable to the design of a simple software system.", "ACM: Learning Outcome:: For a simple system suitable for a given scenario, discuss and select an appropriate design paradigm.", "ACM: Learning Outcome:: Create appropriate models for the structure and behavior of software products from their requirements specifications.", "ACM: Learning Outcome:: Explain the relationships between the requirements for a software product and its design, using appropriate models.", "ACM: Learning Outcome:: For the design of a simple software system within the context of a single design paradigm, describe the software architecture of that system.", "ACM: Learning Outcome:: Given a high-level design, identify the software architecture by differentiating among common software architectures such as 3-tier, pipe-and-filter, and client-server.", "ACM: Learning Outcome:: Investigate the impact of software architectures selection on the design of a simple system.", "ACM: Learning Outcome:: Apply simple examples of patterns in a software design.", "ACM: Learning Outcome:: Describe a form of refactoring and discuss when it may be applicable.", "ACM: Learning Outcome:: Select suitable components for use in the design of a software product.", "ACM: Learning Outcome:: Explain how suitable components might need to be adapted for use in the design of a software product.", "ACM: Learning Outcome:: Design a contract for a typical small software component for use in a given system.", "ACM: Learning Outcome:: Discuss and select appropriate software architecture for a simple system suitable for a given scenario.", "ACM: Learning Outcome:: Apply models for internal and external qualities in designing software components to achieve an acceptable tradeoff between conflicting quality aspects.", "ACM: Learning Outcome:: Analyze a software design from the perspective of a significant internal quality attribute.", "ACM: Learning Outcome:: Analyze a software design from the perspective of a significant external quality attribute.", "ACM: Learning Outcome:: Explain the role of objects in middleware systems and the relationship with components.", "ACM: Learning Outcome:: Apply component-oriented approaches to the design of a range of software, such as using components for concurrency and transactions, for reliable communication services, for database interaction including services for remote query and database management, or for secure communication and access.", "ACM: Learning Outcome:: Refactor an existing software implementation to improve some aspect of its design.", "ACM: Learning Outcome:: State and apply the principles of least privilege and fail-safe defaults.", "ACM: Knowledge Unit:: Software Construction", "ACM: Learning Outcome:: Describe techniques, coding idioms and mechanisms for implementing designs to achieve desired properties such as reliability, efficiency, and robustness.", "ACM: Learning Outcome:: Build robust code using exception handling mechanisms.", "ACM: Learning Outcome:: Describe secure coding and defensive coding practices.", "ACM: Learning Outcome:: Select and use a defined coding standard in a small software project.", "ACM: Learning Outcome:: Compare and contrast integration strategies including top-down, bottom-up, and sandwich integration.", "ACM: Learning Outcome:: Describe the process of analyzing and implementing changes to code base developed for a specific project.", "ACM: Learning Outcome:: Describe the process of analyzing and implementing changes to a large existing code base.", "ACM: Learning Outcome:: Rewrite a simple program to remove common vulnerabilities, such as buffer overflows, integer overflows and race conditions.", "ACM: Learning Outcome:: Write a software component that performs some non-trivial task and is resilient to input and run-time errors.", "ACM: Knowledge Unit:: Software Verification Validation", "ACM: Learning Outcome:: Distinguish between program validation and verification.", "ACM: Learning Outcome:: Describe the role that tools can play in the validation of software.", "ACM: Learning Outcome:: Undertake, as part of a team activity, an inspection of a medium-size code segment.", "ACM: Learning Outcome:: Describe and distinguish among the different types and levels of testing (unit, integration, systems, and acceptance).", "ACM: Learning Outcome:: Describe techniques for identifying significant test cases for integration, regression and system testing.", "ACM: Learning Outcome:: Create and document a set of tests for a medium-size code segment.", "ACM: Learning Outcome:: Describe how to select good regression tests and automate them.", "ACM: Learning Outcome:: Use a defect tracking tool to manage software defects in a small software project.", "ACM: Learning Outcome:: Discuss the limitations of testing in a particular domain.", "ACM: Learning Outcome:: Evaluate a test suite for a medium-size code segment.", "ACM: Learning Outcome:: Compare static and dynamic approaches to verification.", "ACM: Learning Outcome:: Identify the fundamental principles of test-driven development methods and explain the role of automated testing in these methods.", "ACM: Learning Outcome:: Discuss the issues involving the testing of object-oriented software.", "ACM: Learning Outcome:: Describe techniques for the verification and validation of non-code artifacts.", "ACM: Learning Outcome:: Describe approaches for fault estimation.", "ACM: Learning Outcome:: Estimate the number of faults in a small software application based on fault density and fault seeding.", "ACM: Topic:: Depth- and breadth-first traversals", "ACM: Learning Outcome:: Conduct an inspection or review of software source code for a small or medium sized software project.", "ACM: Knowledge Unit:: Software Evolution", "ACM: Learning Outcome:: Identify the principal issues associated with software evolution and explain their impact on the software lifecycle.", "ACM: Learning Outcome:: Estimate the impact of a change request to an existing product of medium size.", "ACM: Learning Outcome:: Use refactoring in the process of modifying a software component.", "ACM: Learning Outcome:: Discuss the challenges of evolving systems in a changing environment.", "ACM: Learning Outcome:: Outline the process of regression testing and its role in release management.", "ACM: Learning Outcome:: Discuss the advantages and disadvantages of different types of software reuse.", "ACM: Knowledge Unit:: Software Reliability", "ACM: Learning Outcome:: Explain the problems that exist in achieving very high levels of reliability.", "ACM: Learning Outcome:: Describe how software reliability contributes to system reliability.", "ACM: Learning Outcome:: List approaches to minimizing faults that can be applied at each stage of the software lifecycle.", "ACM: Learning Outcome:: Compare the characteristics of three different reliability modeling approaches.", "ACM: Learning Outcome:: Demonstrate the ability to apply multiple methods to develop reliability estimates for a software system.", "ACM: Learning Outcome:: Identify methods that will lead to the realization of a software architecture that achieves a specified level of reliability.", "ACM: Learning Outcome:: Identify ways to apply redundancy to achieve fault tolerance for a medium-sized application.", "ACM: Knowledge Unit:: Formal Methods", "ACM: Learning Outcome:: Describe the role formal specification and analysis techniques can play in the development of complex software and compare their use as validation and verification techniques with testing.", "ACM: Learning Outcome:: Apply formal specification and analysis techniques to software designs and programs with low complexity.", "ACM: Learning Outcome:: Explain the potential benefits and drawbacks of using formal specification languages.", "ACM: Learning Outcome:: Create and evaluate program assertions for a variety of behaviors ranging from simple through complex.", "ACM: Learning Outcome:: Using a common formal specification language, formulate the specification of a simple software system and derive examples of test cases from the specification.", "ACM: Knowledge Unit:: Computational Paradigms", "ACM: Learning Outcome:: List commonly encountered patterns of how computations are organized.", "ACM: Learning Outcome:: Describe the basic building blocks of computers and their role in the historical development of computer architecture.", "ACM: Learning Outcome:: Articulate the differences between single thread vs multiple thread, single server vs multiple server models, motivated by real world examples (eg, cooking recipes, lines for multiple teller machines and couples shopping for food).", "ACM: Learning Outcome:: Articulate the concept of strong vs weak scaling, ie, how performance is affected by scale of problem vs scale of resources to solve the problem This can be motivated by the simple, real-world examples.", "ACM: Learning Outcome:: Design a simple logic circuit using the fundamental building blocks of logic design.", "ACM: Learning Outcome:: Use tools for capture, synthesis, and simulation to evaluate a logic design.", "ACM: Learning Outcome:: Write a simple sequential problem and a simple parallel version of the same program.", "ACM: Learning Outcome:: Evaluate performance of simple sequential and parallel versions of a program with different problem sizes, and be able to describe the speed-ups achieved.", "ACM: Knowledge Unit:: Cross-Layer Communications", "ACM: Learning Outcome:: Describe how computing systems are constructed of layers upon layers, based on separation of concerns, with well-defined interfaces, hiding details of low layers from the higher layers.", "ACM: Learning Outcome:: Describe that hardware, VM, OS, application are additional layers of interpretation/processing.", "ACM: Learning Outcome:: Describe the mechanisms of how errors are detected, signaled back, and handled through the layers.", "ACM: Learning Outcome:: Construct a simple program using methods of layering, error detection and recovery, and reflection of error status across layers.", "ACM: Learning Outcome:: Find bugs in a layered program by using tools for program tracing, single stepping, and debugging.", "ACM: Knowledge Unit:: State and State Machines", "ACM: Learning Outcome:: Describe computations as a system characyterized by a known set of configurations with transitions from one unique configuration (state) to another (state).", "ACM: Learning Outcome:: Describe the distinction between systems whose output is only a function of their input (Combinational) and those with memory/history (Sequential).", "ACM: Learning Outcome:: Describe a computer as a state machine that interprets machine instructions.", "ACM: Learning Outcome:: Explain how a program or network protocol can also be expressed as a state machine, and that alternative representations for the same computation can exist.", "ACM: Learning Outcome:: Develop state machine descriptions for simple problem statement solutions (eg, traffic light sequencing, pattern recognizers).", "ACM: Learning Outcome:: Derive time-series behavior of a state machine from its state machine representation.", "ACM: Knowledge Unit:: Parallelism", "ACM: Learning Outcome:: For a given program, distinguish between its sequential and parallel execution, and the performance implications thereof.", "ACM: Topic:: Heaps", "ACM: Learning Outcome:: Demonstrate on an execution time line that parallelism events and operations can take place simultaneously (ie, at the same time) Explain how work can be performed in less elapsed time if this can be exploited.", "ACM: Learning Outcome:: Explain other uses of parallelism, such as for reliability/redundancy of execution.", "ACM: Learning Outcome:: Define the differences between the concepts of Instruction Parallelism, Data Parallelism, Thread Parallelism/Multitasking, Task/Request Parallelism.", "ACM: Learning Outcome:: Write more than one parallel program (eg, one simple parallel program in more than one parallel programming paradigm; a simple parallel program that manages shared resources through synchronization primitives; a simple parallel program that performs simultaneous operation on partitioned data through task parallel (eg, parallel search terms; a simple parallel program that performs step-by-step pipeline processing through message passing).", "ACM: Learning Outcome:: Use performance tools to measure speed-up achieved by parallel programs in terms of both problem size and number of resources.", "ACM: Knowledge Unit:: Evaluation", "ACM: Learning Outcome:: Explain how the components of system architecture contribute to improving its performance.", "ACM: Learning Outcome:: Describe Amdahl\u2019s law and discuss its limitations.", "ACM: Learning Outcome:: Design and conduct a performance-oriented experiment.", "ACM: Learning Outcome:: Use software tools to profile and measure program performance.", "ACM: Knowledge Unit:: Resource Allocation and Scheduling", "ACM: Learning Outcome:: Define how finite computer resources (eg, processor share, memory, storage and network bandwidth) are managed by their careful allocation to existing entities.", "ACM: Learning Outcome:: Describe the scheduling algorithms by which resources are allocated to competing entities, and the figures of merit by which these algorithms are evaluated, such as fairness.", "ACM: Learning Outcome:: Implement simple schedule algorithms.", "ACM: Learning Outcome:: Use figures of merit of alternative scheduler implementations.", "ACM: Knowledge Unit:: Proximity", "ACM: Learning Outcome:: Explain the importance of locality in determining performance.", "ACM: Learning Outcome:: Describe why things that are close in space take less time to access.", "ACM: Learning Outcome:: Calculate average memory access time and describe the tradeoffs in memory hierarchy performance in terms of capacity, miss/hit rate, and access time.", "ACM: Knowledge Unit:: Virtualization and Isolation", "ACM: Learning Outcome:: Explain why it is important to isolate and protect the execution of individual programs and environments that share common underlying resources.", "ACM: Learning Outcome:: Describe how the concept of indirection can create the illusion of a dedicated machine and its resources even when physically shared among multiple programs and environments.", "ACM: Learning Outcome:: Measure the performance of two application instances running on separate virtual machines, and determine the effect of performance isolation.", "ACM: Knowledge Unit:: Reliability through Redundancy", "ACM: Learning Outcome:: Explain the distinction between program errors, system errors, and hardware faults (eg, bad memory) and exceptions (eg, attempt to divide by zero).", "ACM: Learning Outcome:: Articulate the distinction between detecting, handling, and recovering from faults, and the methods for their implementation.", "ACM: Learning Outcome:: Describe the role of error correcting codes in providing error checking and correction techniques in memories, storage, and networks.", "ACM: Learning Outcome:: Apply simple algorithms for exploiting redundant information for the purposes of data correction.", "ACM: Learning Outcome:: Compare different error detection and correction methods for their data overhead, implementation complexity, and relative execution time for encoding, detecting, and correcting errors.", "ACM: Knowledge Unit:: Quantitative Evaluation", "ACM: Learning Outcome:: Explain the circumstances in which a given figure of system performance metric is useful.", "ACM: Learning Outcome:: Explain the inadequacies of benchmarks as a measure of system performance.", "ACM: Learning Outcome:: Use limit studies or simple calculations to produce order-of-magnitude estimates for a given performance metric in a given context.", "ACM: Learning Outcome:: Conduct a performance experiment on a layered system to determine the effect of a system parameter on figure of system performance.", "ACM: Knowledge Unit:: Social Context", "ACM: Learning Outcome:: Describe positive and negative ways in which computer technology (networks, mobile computing, cloud computing) alters modes of social interaction at the personal level.", "ACM: Learning Outcome:: Identify developers\u2019 assumptions and values embedded in hardware and software design, especially as they pertain to usability for diverse populations including under-represented populations and the disabled.", "ACM: Learning Outcome:: Interpret the social context of a given design and its implementation.", "ACM: Learning Outcome:: Evaluate the efficacy of a given design and implementation using empirical data.", "ACM: Learning Outcome:: Summarize the implications of social media on individualism versus collectivism and culture.", "ACM: Learning Outcome:: Discuss how Internet access serves as a liberating force for people living under oppressive forms of government; explain how limits on Internet access are used as tools of political and social repression.", "ACM: Learning Outcome:: Analyze the pros and cons of reliance on computing in the implementation of democracy (eg delivery of social services, electronic voting).", "ACM: Learning Outcome:: Describe the impact of the under-representation of diverse populations in the computing profession (eg, industry culture, product diversity).", "ACM: Learning Outcome:: Explain the implications of context awareness in ubiquitous computing systems.", "ACM: Knowledge Unit:: Analytical Tools", "ACM: Learning Outcome:: Evaluate stakeholder positions in a given situation.", "ACM: Learning Outcome:: Analyze basic logical fallacies in an argument.", "ACM: Learning Outcome:: Analyze an argument to identify premises and conclusion.", "ACM: Learning Outcome:: Illustrate the use of example and analogy in ethical argument.", "ACM: Learning Outcome:: Evaluate ethical/social tradeoffs in technical decisions.", "ACM: Knowledge Unit:: Professional Ethics", "ACM: Learning Outcome:: Identify ethical issues that arise in software development and determine how to address them technically and ethically.", "ACM: Learning Outcome:: Explain the ethical responsibility of ensuring software correctness, reliability and safety. ", "ACM: Learning Outcome:: Describe the mechanisms that typically exist for a professional to keep up-to-date.", "ACM: Learning Outcome:: Describe the strengths and weaknesses of relevant professional codes as expressions of professionalism and guides to decision-making.", "ACM: Learning Outcome:: Analyze a global computing issue, observing the role of professionals and government officials in managing this problem.", "ACM: Learning Outcome:: Evaluate the professional codes of ethics from the ACM, the IEEE Computer Society, and other organizations.", "ACM: Learning Outcome:: Describe ways in which professionals may contribute to public policy.", "ACM: Learning Outcome:: Describe the consequences of inappropriate professional behavior.", "ACM: Learning Outcome:: Identify progressive stages in a whistle-blowing incident.", "ACM: Learning Outcome:: Identify examples of how regional culture interplays with ethical dilemmas.", "ACM: Learning Outcome:: Investigate forms of harassment and discrimination and avenues of assistance.", "ACM: Learning Outcome:: Examine various forms of professional credentialing.", "ACM: Learning Outcome:: Explain the relationship between ergonomics in computing environments and people\u2019s health.", "ACM: Learning Outcome:: Develop a computer usage/acceptable use policy with enforcement measures.", "ACM: Learning Outcome:: Describe issues associated with industries\u2019 push to focus on time to market versus enforcing quality professional standards.", "ACM: Knowledge Unit:: Intellectual Property", "ACM: Learning Outcome:: Discuss the philosophical bases of intellectual property.", "ACM: Learning Outcome:: Discuss the rationale for the legal protection of intellectual property.", "ACM: Learning Outcome:: Describe legislation aimed at digital copyright infringements.", "ACM: Learning Outcome:: Critique legislation aimed at digital copyright infringements.", "ACM: Learning Outcome:: Identify contemporary examples of intangible digital intellectual property.", "ACM: Learning Outcome:: Justify uses of copyrighted materials.", "ACM: Learning Outcome:: Evaluate the ethical issues inherent in various plagiarism detection mechanisms.", "ACM: Learning Outcome:: Interpret the intent and implementation of software licensing.", "ACM: Learning Outcome:: Discuss the issues involved in securing software patents.", "ACM: Learning Outcome:: Characterize and contrast the concepts of copyright, patenting and trademarks.", "ACM: Learning Outcome:: Identify the goals of the open source movement.", "ACM: Learning Outcome:: Identify the global nature of software piracy.", "ACM: Knowledge Unit:: Privacy and Civil Liberties", "ACM: Learning Outcome:: Discuss the philosophical basis for the legal protection of personal privacy.", "ACM: Learning Outcome:: Evaluate solutions to privacy threats in transactional databases and data warehouses.", "ACM: Learning Outcome:: Describe the role of data collection in the implementation of pervasive surveillance systems (e.g., RFID, face recognition, toll collection, mobile computing). ", "ACM: Learning Outcome:: Describe the ramifications of differential privacy. ", "ACM: Learning Outcome:: Investigate the impact of technological solutions to privacy problems.", "ACM: Learning Outcome:: Critique the intent, potential value and implementation of various forms of privacy legislation.", "ACM: Learning Outcome:: Identify strategies to enable appropriate freedom of expression.", "ACM: Knowledge Unit:: Professional Communication", "ACM: Learning Outcome:: Write clear, concise, and accurate technical documents following well-defined standards for format and for including appropriate tables, figures, and references.", "ACM: Learning Outcome:: Evaluate written technical documentation to detect problems of various kinds.", "ACM: Learning Outcome:: Develop and deliver a good quality formal presentation.", "ACM: Learning Outcome:: Plan interactions (eg virtual, face-to-face, shared documents) with others in which they are able to get their point across, and are also able to listen carefully and appreciate the points of others, even when they disagree, and are able to convey to others that they have heard.", "ACM: Learning Outcome:: Describe the strengths and weaknesses of various forms of communication (eg virtual, face-to-face, shared documents).", "ACM: Learning Outcome:: Examine appropriate measures used to communicate with stakeholders involved in a project.", "ACM: Learning Outcome:: Compare and contrast various collaboration tools.", "ACM: Learning Outcome:: Discuss ways to influence performance and results in cross-cultural teams.", "ACM: Learning Outcome:: Examine the tradeoffs and common sources of risk in software projects regarding technology, structure/process, quality, people, market and financial.", "ACM: Learning Outcome:: Evaluate personal strengths and weaknesses to work remotely as part of a multinational team.", "ACM: Knowledge Unit:: Sustainability", "ACM: Learning Outcome:: Identify ways to be a sustainable practitioner.", "ACM: Learning Outcome:: Illustrate global social and environmental impacts of computer use and disposal (e-waste).", "ACM: Learning Outcome:: Describe the environmental impacts of design choices within the field of computing that relate to algorithm design, operating system design, networking design, database design, etc.", "ACM: Learning Outcome:: Investigate the social and environmental impacts of new system designs through projects.", "ACM: Learning Outcome:: Identify guidelines for sustainable IT design or deployment.", "ACM: Learning Outcome:: List the sustainable effects of telecommuting or web shopping.", "ACM: Learning Outcome:: Investigate pervasive computing in areas such as smart energy systems, social networking, transportation, agriculture, supply-chain systems, environmental monitoring and citizen activism.", "ACM: Learning Outcome:: Develop applications of computing and assess through research areas pertaining to environmental issues (eg energy, pollution, resource usage, recycling and reuse, food management, farming).", "ACM: Knowledge Unit:: History", "ACM: Learning Outcome:: Identify significant continuing trends in the history of the computing field.", "ACM: Learning Outcome:: Identify the contributions of several pioneers in the computing field.", "ACM: Learning Outcome:: Discuss the historical context for several programming language paradigms.", "ACM: Learning Outcome:: Compare daily life before and after the advent of personal computers and the Internet.", "ACM: Knowledge Unit:: Economies of Computing", "ACM: Learning Outcome:: Summarize the rationale for antimonopoly efforts.", "ACM: Learning Outcome:: Identify several ways in which the information technology industry is affected by shortages in the labor supply.", "ACM: Learning Outcome:: Identify the evolution of pricing strategies for computing goods and services.", "ACM: Learning Outcome:: Discuss the benefits, the drawbacks and the implications of off-shoring and outsourcing.", "ACM: Learning Outcome:: Investigate and defend ways to address limitations on access to computing.", "ACM: Learning Outcome:: Describe the economic benefits of network effects.", "ACM: Knowledge Unit:: Security Policies, Laws and Computer Crimes", "ACM: Learning Outcome:: List classic examples of computer crimes and social engineering incidents with societal impact.", "ACM: Learning Outcome:: Identify laws that apply to computer crimes.", "ACM: Learning Outcome:: Describe the motivation and ramifications of cyber terrorism and criminal hacking.", "ACM: Learning Outcome:: Examine the ethical and legal issues surrounding the misuse of access and various breaches in security.", "ACM: Learning Outcome:: Discuss the professional's role in security and the trade-offs involved.", "ACM: Learning Outcome:: Investigate measures that can be taken by both individuals and organizations including governments to prevent or mitigate the undesirable effects of computer crimes and identity theft.", "ACM: Learning Outcome:: Write a company-wide security policy, which includes procedures for managing passwords and employee monitoring.", "ACM: Topic:: Differences among best, expected, and worst case behaviors of an algorithm", "ACM: Topic:: Asymptotic analysis of upper and expected complexity bounds", "ACM: Topic:: Big O notation: formal definition", "ACM: Topic:: Complexity classes, such as constant, logarithmic, linear, quadratic, and exponential", "ACM: Topic:: Empirical measurements of performance", "ACM: Topic:: Time and space trade-offs in algorithms", "ACM: Topic:: Big O notation: use", "ACM: Topic:: Little o, big omega and big theta notation", "ACM: Topic:: Recurrence relations", "ACM: Topic:: Analysis of iterative and recursive algorithms", "ACM: Topic:: Some version of a Master Theorem", "ACM: Topic:: Brute-force algorithms", "ACM: Topic:: Greedy algorithms", "ACM: Topic:: Divide-and-conquer (cross-reference SDF/Algorithms and Design/Problem-solving strategies)", "ACM: Topic:: Recursive backtracking", "ACM: Topic:: Dynamic Programming", "ACM: Topic:: Branch-and-bound", "ACM: Topic:: Heuristics", "ACM: Topic:: Reduction: transform-and-conquer", "ACM: Topic:: Simple numerical algorithms, such as computing the average of a list of numbers, finding the min, max, and mode in a list, approximating the square root of a number, or finding the greatest common divisor", "ACM: Topic:: Sequential and binary search algorithms", "ACM: Topic:: Worst case quadratic sorting algorithms (selection, insertion)", "ACM: Topic:: Worst or average case O(N log N) sorting algorithms (quicksort, heapsort, mergesort)", "ACM: Topic:: Hash tables, including strategies for avoiding and resolving collisions", "ACM: Topic:: Binary search trees", "ACM: Topic:: Common operations on binary search trees such as select min, max, insert, delete, iterate over tree", "ACM: Topic:: Graphs and graph algorithms (Tier 1)", "ACM: Topic:: Representations of graphs (e.g., adjacency list, adjacency matrix)", "ACM: Topic:: Shortest-path algorithms (Dijkstra\u2019s and Floyd\u2019s algorithms)", "ACM: Topic:: Minimum spanning tree (Prim\u2019s and Kruskal\u2019s algorithms)", "ACM: Topic:: Pattern matching and string/text algorithms (e.g., substring matching, regular expression matching, longest common subsequence algorithms)", "ACM: Topic:: Finite-state machines", "ACM: Topic:: Regular expressions", "ACM: Topic:: The halting problem", "ACM: Topic:: Context-free grammars (cross-reference PL/Syntax Analysis)", "ACM: Topic:: Introduction to the P and NP classes and the P vs. NP problem", "ACM: Topic:: Introduction to the NP-complete class and exemplary NP-complete problems (e.g., SAT, Knapsack)", "ACM: Topic:: Review of the classes P and NP; introduce P-space and EXP", "ACM: Topic:: Polynomial hierarchy", "ACM: Topic:: NP-completeness (Cook\u2019s theorem)", "ACM: Topic:: Classic NP-complete problems", "ACM: Topic:: Reduction Techniques", "ACM: Topic:: Sets and languages", "ACM: Topic:: Regular languages", "ACM: Topic:: Review of deterministic finite automata (DFAs)", "ACM: Topic:: Nondeterministic finite automata (NFAs)", "ACM: Topic:: Equivalence of DFAs and NFAs", "ACM: Topic:: Review of regular expressions; their equivalence to finite automata", "ACM: Topic:: Closure properties", "ACM: Topic:: Proving languages non-regular, via the pumping lemma or alternative means", "ACM: Topic:: Context-free languages", "ACM: Topic:: Push-down automata (PDAs)", "ACM: Topic:: Relationship of PDAs and context-free grammars", "ACM: Topic:: Properties of context-free languages", "ACM: Topic:: Turing machines, or an equivalent formal model of universal computation", "ACM: Topic:: Nondeterministic Turing machines", "ACM: Topic:: Chomsky hierarchy", "ACM: Topic:: The Church-Turing thesis", "ACM: Topic:: Computability", "ACM: Topic:: Rice\u2019s Theorem", "ACM: Topic:: Examples of uncomputable functions", "ACM: Topic:: Implications of uncomputability", "ACM: Topic:: Balanced trees (e.g., AVL trees, red-black trees, splay trees, treaps)", "ACM: Topic:: Graphs (e.g., topological sort, finding strongly connected components, matching)", "ACM: Topic:: Advanced data structures (e.g., B-trees, Fibonacci heaps)", "ACM: Topic:: String-based data structures and algorithms (e.g., suffix arrays, suffix trees, tries)", "ACM: Topic:: Network flows (e.g., max flow [Ford-Fulkerson algorithm], max flow \u2013 min cut, maximum bipartite matching)", "ACM: Topic:: Linear Programming (e.g., duality, simplex method, interior point algorithms)", "ACM: Topic:: Number-theoretic algorithms (e.g., modular arithmetic, primality testing, integer factorization)", "ACM: Topic:: Geometric algorithms (e.g., points, line segments, polygons. [properties, intersections], finding convex hull, spatial decomposition, collision detection, geometric search/proximity)", "ACM: Topic:: Randomized algorithms", "ACM: Topic:: Stochastic algorithms", "ACM: Topic:: Approximation algorithms", "ACM: Topic:: Amortized analysis", "ACM: Topic:: Probabilistic analysis", "ACM: Topic:: Online algorithms and competitive analysis", "ACM: Topic:: Overview and history of computer architecture", "ACM: Topic:: Combinational vs. sequential logic/Field programmable gate arrays as a fundamental combinational + sequential logic building block", "ACM: Topic:: Multiple representations/layers of interpretation (hardware is just another layer)", "ACM: Topic:: Computer-aided design tools that process hardware and architectural representations", "ACM: Topic:: Register transfer notation/Hardware Description Language (Verilog/VHDL)", "ACM: Topic:: Physical constraints (gate delays, fan-in, fan-out, energy/power)", "ACM: Topic:: Bits, bytes, and words", "ACM: Topic:: Numeric data representation and number bases", "ACM: Topic:: Fixed- and floating-point systems", "ACM: Topic:: Signed and twos-complement representations", "ACM: Topic:: Representation of non-numeric data (character codes, graphical data)", "ACM: Topic:: Representation of records and arrays", "ACM: Topic:: Basic organization of the von Neumann machine", "ACM: Topic:: Control unit; instruction fetch, decode, and execution", "ACM: Topic:: Instruction sets and types (data manipulation, control, I/O)", "ACM: Topic:: Assembly/machine language programming", "ACM: Topic:: Instruction formats", "ACM: Topic:: Addressing modes", "ACM: Topic:: Subroutine call and return mechanisms (cross-reference PL/Language Translation and Execution)", "ACM: Topic:: I/O and interrupts", "ACM: Topic:: Heap vs. Static vs. Stack vs. Code segments", "ACM: Topic:: Shared memory multiprocessors/multicore organization", "ACM: Topic:: Introduction to SIMD vs. MIMD and the Flynn Taxonomy", "ACM: Topic:: Storage systems and their technology", "ACM: Topic:: Memory hierarchy: importance of temporal and spatial locality", "ACM: Topic:: Main memory organization and operations", "ACM: Topic:: Latency, cycle time, bandwidth, and interleaving", "ACM: Topic:: Cache memories (address mapping, block size, replacement and store policy)", "ACM: Topic:: Multiprocessor cache consistency/Using the memory system for inter-core synchronization/atomic memory operations", "ACM: Topic:: Virtual memory (page table, TLB)", "ACM: Topic:: Fault handling and reliability", "ACM: Topic:: Error coding, data compression, and data integrity (cross-reference SF/Reliability through Redundancy)", "ACM: Topic:: I/O fundamentals: handshaking, buffering, programmed I/O, interrupt-driven I/O", "ACM: Topic:: Interrupt structures: vectored and prioritized, interrupt acknowledgment", "ACM: Topic:: External storage, physical organization, and drives", "ACM: Topic:: Buses: bus protocols, arbitration, direct-memory access (DMA)", "ACM: Topic:: Introduction to networks: communications networks as another layer of remote access", "ACM: Topic:: Multimedia support", "ACM: Topic:: RAID architectures", "ACM: Topic:: Implementation of simple datapaths, including instruction pipelining, hazard detection and resolution", "ACM: Topic:: Control unit: hardwired realization vs. microprogrammed realization", "ACM: Topic:: Instruction pipelining", "ACM: Topic:: Introduction to instruction-level parallelism (ILP)", "ACM: Topic:: Power Law", "ACM: Topic:: Example SIMD and MIMD instruction sets and architectures", "ACM: Topic:: Interconnection networks (hypercube, shuffle-exchange, mesh, crossbar)", "ACM: Topic:: Shared multiprocessor memory systems and memory consistency", "ACM: Topic:: Multiprocessor cache coherence", "ACM: Topic:: Superscalar architecture", "ACM: Topic:: Branch prediction, Speculative execution, Out-of-order execution", "ACM: Topic:: Prefetching", "ACM: Topic:: Vector processors and GPUs", "ACM: Topic:: Hardware support for multithreading", "ACM: Topic:: Scalability", "ACM: Topic:: Alternative architectures, such as VLIW/EPIC, and Accelerators and other kinds of Special-Purpose Processors", "ACM: Topic:: Models as abstractions of situations", "ACM: Topic:: Simulations as dynamic modeling", "ACM: Topic:: Simulation techniques and tools, such as physical simulations, human-in-the-loop guided simulations, and virtual reality", "ACM: Topic:: Foundational approaches to validating models (e.g., comparing a simulation\u2019s output to real data or the output of another model)", "ACM: Topic:: Presentation of results in a form relevant to the system being modeled", "ACM: Topic:: Purpose of modeling and simulation including optimization; supporting decision making, forecasting,safety considerations; for training and education", "ACM: Topic:: Tradeoffs including performance, accuracy, validity, and complexity", "ACM: Topic:: The simulation process; identification of key characteristics or behaviors, simplifying assumptions;validation of outcomes", "ACM: Topic:: Model building: use of mathematical formulas or equations, graphs, constraints; methodologies andtechniques; use of time stepping for dynamic systems", "ACM: Topic:: Formal models and modeling techniques: mathematical descriptions involving simplifying assumptionsand avoiding detail. Examples of techniques include:", "ACM: Topic:: Monte Carlo methods", "ACM: Topic:: Stochastic processes", "ACM: Topic:: Queuing theory", "ACM: Topic:: Petri nets and colored Petri nets", "ACM: Topic:: Graph structures such as directed graphs, trees, networks", "ACM: Topic:: Games, game theory, the modeling of things using game theory", "ACM: Topic:: Linear programming and its extensions", "ACM: Topic:: Dynamic programming", "ACM: Topic:: Differential equations: ODE, PDE", "ACM: Topic:: Non-linear techniques", "ACM: Topic:: State spaces and transitions", "ACM: Topic:: Assessing and evaluating models and simulations in a variety of contexts; verification and validation ofmodels and simulations", "ACM: Topic:: Important application areas including health care and diagnostics, economics and finance, city and urbanplanning, science, and engineering", "ACM: Topic:: Software in support of simulation and modeling; packages, languages", "ACM: Topic:: Fundamental programming concepts:", "ACM: Topic:: The concept of an algorithm consisting of a finite number of well-defined steps, each of whichcompletes in a finite amount of time, as does the entire process.", "ACM: Topic:: Examples of well-known algorithms such as sorting and searching.", "ACM: Topic:: The concept of analysis as understanding what the problem is really asking, how a problem can be", "ACM: Topic:: proached using an algorithm, and how information is represented so that a machine can processit.", "ACM: Topic:: The development or identification of a workflow.", "ACM: Topic:: The process of converting an algorithm to machine-executable code.", "ACM: Topic:: Software processes including lifecycle models, requirements, design, implementation, verificationand maintenance.", "ACM: Topic:: Machine representation of data computer arithmetic.", "ACM: Topic:: Numerical methods", "ACM: Topic:: Algorithms for numerically fitting data (e.g., Newton\u2019s method)", "ACM: Topic:: Architectures for numerical computation, including parallel architectures", "ACM: Topic:: Fundamental properties of parallel and distributed computation:", "ACM: Topic:: Bandwidth.", "ACM: Topic:: Latency.", "ACM: Topic:: Scalability.", "ACM: Topic:: Granularity.", "ACM: Topic:: Parallelism including task, data, and event parallelism.", "ACM: Topic:: Parallel architectures including processor architectures, memory and caching.", "ACM: Topic:: Parallel programming paradigms including threading, message passing, event driven techniques,parallel software architectures, and MapReduce.", "ACM: Topic:: Grid computing.", "ACM: Topic:: The impact of architecture on computational time.", "ACM: Topic:: Total time to science curve for parallelism: continuum of things.", "ACM: Topic:: Computing costs, e.g., the cost of re-computing a value vs. the cost of storing and lookup.", "ACM: Topic:: Principles of data visualization", "ACM: Topic:: Graphing and visualization algorithms", "ACM: Topic:: Image processing techniques", "ACM: Topic:: Scalability concerns", "ACM: Topic:: Content management models, frameworks, systems, design methods (as in IM. Information Management)", "ACM: Topic:: Digital representations of content including numbers, text, images (e.g., raster and vector), video (e.g.,QuickTime, MPEG2, MPEG4), audio (e.g., written score, MIDI, sampled digitized sound track) and animations; complex/composite/aggregate objects; FRBR", "ACM: Topic:: Digital content creation/capture and preservation, including digitization, sampling, compression,conversion, transformation/translation, migration/emulation, crawling, harvesting", "ACM: Topic:: Content structure / management, including digital libraries and static/dynamic/stream aspects for:", "ACM: Topic:: Data: data structures, databases", "ACM: Topic:: Information: document collections, multimedia pools, hyperbases (hypertext, hypermedia),catalogs, repositories", "ACM: Topic:: Knowledge: ontologies, triple stores, semantic networks, rules", "ACM: Topic:: Processing and pattern recognition, including indexing, searching (including: queries and query languages;central / federated / P2P), retrieving, clustering, classifying/categorizing, analyzing/mining/extracting, rendering, reporting, handling transactions", "ACM: Topic:: User / society support for presentation and interaction, including browse, search, filter, route, visualize,share, collaborate, rate, annotate, personalize, recommend", "ACM: Topic:: Modeling, design, logical and physical implementation, using relevant systems/software", "ACM: Topic:: Error, stability, convergence, including truncation and round-off", "ACM: Topic:: Function approximation including Taylor\u2019s series, interpolation, extrapolation, and regression", "ACM: Topic:: Numerical differentiation and integration (Simpson\u2019s Rule, explicit and implicit methods)", "ACM: Topic:: Differential equations (Euler\u2019s Method, finite differences)", "ACM: Topic:: Sets (DS)", "ACM: Topic:: Venn diagrams", "ACM: Topic:: Union, intersection, complement", "ACM: Topic:: Cartesian product", "ACM: Topic:: Power sets", "ACM: Topic:: Cardinality of finite sets", "ACM: Topic:: Relations", "ACM: Topic:: Reflexivity, symmetry, transitivity", "ACM: Topic:: Equivalence relations, partial orders", "ACM: Topic:: Functions", "ACM: Topic:: Surjections, injections, bijections", "ACM: Topic:: Inverses", "ACM: Topic:: Composition (DS)", "ACM: Topic:: Propositional logic (cross-reference: Propositional logic is also reviewed in IS/Knowledge BasedReasoning)", "ACM: Topic:: Logical connectives", "ACM: Topic:: Truth tables", "ACM: Topic:: Normal forms (conjunctive and disjunctive)", "ACM: Topic:: Validity of well-formed formula", "ACM: Topic:: Propositional inference rules (concepts of modus ponens and modus tollens)", "ACM: Topic:: Predicate logic", "ACM: Topic:: Universal and existential quantification", "ACM: Topic:: Limitations of propositional and predicate logic (e.g., expressiveness issues)", "ACM: Topic:: Notions of implication, equivalence, converse, inverse, contrapositive, negation, and contradiction", "ACM: Topic:: The structure of mathematical proofs", "ACM: Topic:: Direct proofs", "ACM: Topic:: Disproving by counterexample", "ACM: Topic:: Proof by contradiction", "ACM: Topic:: Induction over natural numbers", "ACM: Topic:: Structural induction", "ACM: Topic:: Weak and strong induction (i.e., First and Second Principle of Induction)", "ACM: Topic:: Recursive mathematical definitions", "ACM: Topic:: ll orderings", "ACM: Topic:: Counting arguments", "ACM: Topic:: Set cardinality and counting", "ACM: Topic:: Sum and product rule", "ACM: Topic:: Inclusion-exclusion principle", "ACM: Topic:: Arithmetic and geometric progressions", "ACM: Topic:: The pigeonhole principle", "ACM: Topic:: Permutations and combinations", "ACM: Topic:: Basic definitions", "ACM: Topic:: Pascal\u2019s identity", "ACM: Topic:: The binomial theorem", "ACM: Topic:: Solving recurrence relations (cross-reference: AL/Basic Analysis)", "ACM: Topic:: An example of a simple recurrence relation, such as Fibonacci numbers", "ACM: Topic:: Other examples, showing a variety of solutions", "ACM: Topic:: Basic modular arithmetic", "ACM: Topic:: Trees", "ACM: Topic:: Properties", "ACM: Topic:: Traversal strategies", "ACM: Topic:: Undirected graphs", "ACM: Topic:: Directed graphs", "ACM: Topic:: Weighted graphs", "ACM: Topic:: Spanning trees/forests", "ACM: Topic:: Graph isomorphism", "ACM: Topic:: Finite probability space, events", "ACM: Topic:: Axioms of probability and probability measures", "ACM: Topic:: Conditional probability, Bayes\u2019 theorem", "ACM: Topic:: Independence", "ACM: Topic:: Integer random variables (Bernoulli, binomial)", "ACM: Topic:: Expectation, including Linearity of Expectation", "ACM: Topic:: Variance", "ACM: Topic:: Conditional Independence (DS)", "ACM: Topic:: Media applications including user interfaces, audio and video editing, game engines, cad, visualization,virtual reality", "ACM: Topic:: Digitization of analog data, resolution, and the limits of human perception, e.g., pixels for visual display,dots for laser printers, and samples for audio (HCI/Foundations)", "ACM: Topic:: Use of standard APIs for the construction of UIs and display of standard media formats (see HCI/GUIconstruction)", "ACM: Topic:: Standard media formats, including lossless and lossy formats", "ACM: Topic:: Additive and subtractive color models (CMYK and RGB) and why these provide a range of colors", "ACM: Topic:: Tradeoffs between storing data and re-computing data as embodied by vector and raster representations ofimages", "ACM: Topic:: Animation as a sequence of still images", "ACM: Topic:: Double buffering", "ACM: Topic:: Rendering in nature, e.g., the emission and scattering of light and its relation to numerical integration", "ACM: Topic:: Forward and backward rendering (i.e., ray-casting and rasterization)", "ACM: Topic:: Polygonal representation", "ACM: Topic:: Basic radiometry, similar triangles, and projection model", "ACM: Topic:: Affine and coordinate system transformations", "ACM: Topic:: Ray tracing", "ACM: Topic:: Visibility and occlusion, including solutions to this problem such as depth buffering, Painter\u2019s algorithm,and ray tracing", "ACM: Topic:: The forward and backward rendering equation", "ACM: Topic:: Simple triangle rasterization", "ACM: Topic:: Rendering with a shader-based API", "ACM: Topic:: Texture mapping, including minification and magnification (e.g., trilinear MIP-mapping)", "ACM: Topic:: Application of spatial data structures to rendering", "ACM: Topic:: Sampling and anti-aliasing", "ACM: Topic:: Scene graphs and the graphics pipeline", "ACM: Topic:: Basic geometric operations such as intersection calculation and proximity tests", "ACM: Topic:: Volumes, voxels, and point-based representations", "ACM: Topic:: Parametric polynomial curves and surfaces", "ACM: Topic:: Implicit representation of curves and surfaces", "ACM: Topic:: Approximation techniques such as polynomial curves, Bezier curves, spline curves and surfaces, and non-uniform rational basis (NURB) spines, and level set method", "ACM: Topic:: Surface representation techniques including tessellation, mesh representation, mesh fairing, and meshgeneration techniques such as Delaunay triangulation, marching cubes", "ACM: Topic:: Spatial subdivision techniques", "ACM: Topic:: Procedural models such as fractals, generative modeling, and L-systems", "ACM: Topic:: Graftals, cross referenced with programming languages (grammars to generated pictures)", "ACM: Topic:: Elastically deformable and freeform deformable models", "ACM: Topic:: Subdivision surfaces", "ACM: Topic:: Multiresolution modeling", "ACM: Topic:: Reconstruction", "ACM: Topic:: Constructive Solid Geometry (CSG) representation", "ACM: Topic:: Solutions and approximations to the rendering equation, for example:", "ACM: Topic:: Distribution ray tracing and path tracing", "ACM: Topic:: Photon mapping", "ACM: Topic:: Bidirectional path tracing", "ACM: Topic:: Reyes (micropolygon) rendering", "ACM: Topic:: Metropolis light transport", "ACM: Topic:: Time (motion blur), lens position (focus), and continuous frequency (color) and their impact on rendering", "ACM: Topic:: Shadow mapping", "ACM: Topic:: Occlusion culling", "ACM: Topic:: Bidirectional Scattering Distribution function (BSDF) theory and microfacets", "ACM: Topic:: Subsurface scattering", "ACM: Topic:: Area light sources", "ACM: Topic:: Hierarchical depth buffering", "ACM: Topic:: The Light Field, image-based rendering", "ACM: Topic:: Non-photorealistic rendering", "ACM: Topic:: GPU architecture", "ACM: Topic:: pseudo-random generators and stream ciphers", "ACM: Topic:: Human visual systems including adaptation to light, sensitivity to noise, and flicker fusion", "ACM: Topic:: Forward and inverse kinematics", "ACM: Topic:: Collision detection and response", "ACM: Topic:: Procedural animation using noise, rules (boids/crowds), and particle systems", "ACM: Topic:: Skinning algorithms", "ACM: Topic:: Physics based motions including rigid body dynamics, physical particle systems, mass-spring networks forcloth and flesh and hair", "ACM: Topic:: Key-frame animation", "ACM: Topic:: Splines", "ACM: Topic:: Data structures for rotations, such as quaternions", "ACM: Topic:: Camera animation", "ACM: Topic:: Motion capture", "ACM: Topic:: Visualization of 2D/3D scalar fields: color mapping, isosurfaces", "ACM: Topic:: Direct volume data rendering: ray-casting, transfer functions, segmentation", "ACM: Topic:: Visualization of:", "ACM: Topic:: Vector fields and flow data", "ACM: Topic:: Time-varying data", "ACM: Topic:: High-dimensional data: dimension reduction, parallel coordinates,", "ACM: Topic:: Non-spatial data: multi-variate, tree/graph structured, text", "ACM: Topic:: Perceptual and cognitive foundations that drive visual abstractions", "ACM: Topic:: Visualization design", "ACM: Topic:: Evaluation of visualization methods", "ACM: Topic:: Applications of visualization", "ACM: Topic:: Contexts for HCI (anything with a user interface, e.g., webpage, business applications, mobile applications,and games)", "ACM: Topic:: Processes for user-centered development, e.g., early focus on users, empirical testing, iterative design", "ACM: Topic:: Different measures for evaluation, e.g., utility, efficiency, learnability, user satisfaction", "ACM: Topic:: Usability heuristics and the principles of usability testing", "ACM: Topic:: Physical capabilities that inform interaction design, e.g., color perception, ergonomics", "ACM: Topic:: Cognitive models that inform interaction design, e.g., attention, perception and recognition, movement, andmemory; gulfs of expectation and execution", "ACM: Topic:: Social models that inform interaction design, e.g., culture, communication, networks and organizations", "ACM: Topic:: Principles of good design and good designers; engineering tradeoffs", "ACM: Topic:: Accessibility, e.g., interfaces for differently-abled populations (e.g., blind, motion-impaired)", "ACM: Topic:: Interfaces for differently-aged population groups (e.g., children, 80+)", "ACM: Topic:: Principles of graphical user interfaces (GUIs)", "ACM: Topic:: Elements of visual design (layout, color, fonts, labeling)", "ACM: Topic:: Task analysis, including qualitative aspects of generating task analytic models", "ACM: Topic:: Low-fidelity (paper) prototyping", "ACM: Topic:: Quantitative evaluation techniques, e.g., keystroke-level evaluation", "ACM: Topic:: Help and documentation", "ACM: Topic:: Handling human/system failure", "ACM: Topic:: User interface standards", "ACM: Topic:: Software Architecture Patterns, e.g., Model-View controller; command objects, online, offline (crossreference PL/Event Driven and Reactive Programming, where MVC is used in the context of event-driven programming)", "ACM: Topic:: Interaction Design Patterns: visual hierarchy, navigational distance", "ACM: Topic:: Event management and user interaction", "ACM: Topic:: Geometry management (cross-reference GV/Geometric Modelling)", "ACM: Topic:: Choosing interaction styles and interaction techniques (Programming Interactive Systems)", "ACM: Topic:: Presenting information: navigation, representation, manipulation", "ACM: Topic:: Interface animation techniques (e.g., scene graphs)", "ACM: Topic:: Widget classes and libraries", "ACM: Topic:: Modern GUI libraries (e.g. iOS, Android, JavaFX) GUI builders and UI programming environments (cross-reference PBD/Mobile Platforms)", "ACM: Topic:: Declarative Interface Specification: Stylesheets and DOMs", "ACM: Topic:: Data-driven applications (database-backed web pages)", "ACM: Topic:: Cross-platform design", "ACM: Topic:: Design for resource-constrained devices (e.g. small, mobile devices)", "ACM: Topic:: Approaches to, and characteristics of, the design process", "ACM: Topic:: Functionality and usability requirements (cross-reference to SE/Requirements Engineering)", "ACM: Topic:: Techniques for gathering requirements, e.g., interviews, surveys, ethnographic and contextual enquiry", "ACM: Topic:: Techniques and tools for the analysis and presentation of requirements, e.g., reports, personas", "ACM: Topic:: Prototyping techniques and tools, e.g., sketching, storyboards, low-fidelity prototyping, wireframes", "ACM: Topic:: Evaluation without users, using both qualitative and quantitative techniques, e.g., walkthroughs, GOMS,expert-based analysis, heuristics, guidelines, and standards", "ACM: Topic:: Evaluation with users, e.g., observation, think-aloud, interview, survey, experiment", "ACM: Topic:: Challenges to effective evaluation, e.g., sampling, generalization", "ACM: Topic:: Reporting the results of evaluations", "ACM: Topic:: Internationalization, designing for users from other cultures, cross-cultural", "ACM: Topic:: Choosing interaction styles and interaction techniques (New Interactive Technologies)", "ACM: Topic:: Representing information to users: navigation, representation, manipulation", "ACM: Topic:: Approaches to design, implementation and evaluation of non-mouse interaction", "ACM: Topic:: Touch and multi-touch interfaces", "ACM: Topic:: Shared, embodied, and large interfaces", "ACM: Topic:: New input modalities (such as sensor and location data)", "ACM: Topic:: New Windows, e.g., iPhone, Android", "ACM: Topic:: Speech recognition and natural language processing (cross reference IS/Natural LanguageProcessing)", "ACM: Topic:: Wearable and tangible interfaces", "ACM: Topic:: Persuasive interaction and emotion", "ACM: Topic:: Ubiquitous and context-aware interaction technologies (Ubicomp)", "ACM: Topic:: Bayesian inference (e.g. predictive text, guided pointing)", "ACM: Topic:: Ambient/peripheral display and interaction", "ACM: Topic:: Asynchronous group communication, e.g., e-mail, forums, social networks", "ACM: Topic:: Synchronous group communication, e.g., chat rooms, conferencing, online games", "ACM: Topic:: Social media, social computing, and social network analysis", "ACM: Topic:: Online collaboration, 'smart' spaces, and social coordination aspects of workflow technologies", "ACM: Topic:: Online communities", "ACM: Topic:: Software characters and intelligent agents, virtual worlds and avatars (cross-reference IS/Agents)", "ACM: Topic:: Social psychology", "ACM: Topic:: t-tests", "ACM: Topic:: ANOVA", "ACM: Topic:: Randomization (non-parametric) testing, within vs. between-subjects design", "ACM: Topic:: Calculating effect size", "ACM: Topic:: Exploratory data analysis", "ACM: Topic:: Presenting statistical data", "ACM: Topic:: Combining qualitative and quantitative results", "ACM: Topic:: Applied psychology and security policies", "ACM: Topic:: Security economics", "ACM: Topic:: Regulatory environments \u2013 responsibility, liability and self-determination", "ACM: Topic:: Organizational vulnerabilities and threats", "ACM: Topic:: Usability design and security", "ACM: Topic:: Pretext, impersonation and fraud, e.g., phishing and spear phishing (cross-reference IAS/Threats andAttacks)", "ACM: Topic:: Trust, privacy and deception", "ACM: Topic:: Biometric authentication (camera, voice)", "ACM: Topic:: Identity management", "ACM: Topic:: Intellectual styles and perspectives to technology and its interfaces", "ACM: Topic:: Consideration of HCI as a design discipline", "ACM: Topic:: Sketching", "ACM: Topic:: Participatory design", "ACM: Topic:: Critically reflective HCI", "ACM: Topic:: Critical technical practice", "ACM: Topic:: Technologies for political activism", "ACM: Topic:: Philosophy of user experience", "ACM: Topic:: Ethnography and ethnomethodology", "ACM: Topic:: Indicative domains of application", "ACM: Topic:: Sustainability (HCI)", "ACM: Topic:: Arts-informed computing", "ACM: Topic:: Output", "ACM: Topic:: Sound", "ACM: Topic:: Stereoscopic display", "ACM: Topic:: Force feedback simulation, haptic devices", "ACM: Topic:: User input", "ACM: Topic:: Viewer and object tracking", "ACM: Topic:: Pose and gesture recognition", "ACM: Topic:: Accelerometers", "ACM: Topic:: Fiducial markers", "ACM: Topic:: User interface issues", "ACM: Topic:: Physical modelling and rendering", "ACM: Topic:: Physical simulation: collision detection & response, animation", "ACM: Topic:: Visibility computation", "ACM: Topic:: Time-critical rendering, multiple levels of details (LOD)", "ACM: Topic:: System architectures", "ACM: Topic:: Game engines", "ACM: Topic:: Mobile augmented reality", "ACM: Topic:: Flight simulators", "ACM: Topic:: CAVEs", "ACM: Topic:: Medical imaging", "ACM: Topic:: Networking", "ACM: Topic:: p2p, client-server, dead reckoning, encryption, synchronization", "ACM: Topic:: Distributed collaboration", "ACM: Topic:: CIA (Confidentiality, Integrity, Availability)", "ACM: Topic:: Concepts of risk, threats, vulnerabilities, and attack vectors (cros- reference SE/Software ProjectManagement/Risk)", "ACM: Topic:: Authentication and authorization, access control (mandatory vs. discretionary)", "ACM: Topic:: Concept of trust and trustworthiness", "ACM: Topic:: Ethics (responsible disclosure). (cross-reference SP/Professional Ethics/Accountability, responsibility andliability)", "ACM: Topic:: Least privilege and isolation (cross-reference OS/Security and Protection/Policy/mechanism separationand SF/Virtualization and Isolation/Rationale for protection and predictable performance and PL/Language Translation and Execution/Memory management)", "ACM: Topic:: block ciphers (pseudo-random permutations), e.g., AES", "ACM: Topic:: pseudo-random functions", "ACM: Topic:: Fail-safe defaults (cross-reference SE/Software Construction/ Coding practices: techniques,idioms/patterns, mechanisms for building quality programs and SDF/Development Methods/Programming correctness)", "ACM: Topic:: Open design (cross-reference SE/Software Evolution/ Software development in the context of large, pre-existing code bases)", "ACM: Topic:: End-to-end security (cross-reference SF/Reliability through Redundancy/ How errors increase the longerthe distance between the communicating entities; the end-to-end principle)", "ACM: Topic:: Defense in depth (e.g., defensive programming, layered defense)", "ACM: Topic:: Security by design (cross-reference SE/Software Design/System design principles)", "ACM: Topic:: Tensions between security and other design goals", "ACM: Topic:: Complete mediation", "ACM: Topic:: Use of vetted security components", "ACM: Topic:: Economy of mechanism (reducing trusted computing base, minimize attack surface) (cross-referenceSE/Software Design/System design principles and SE/Software Construction/Development context: \u201cgreen field\u201d vs. existing code base)", "ACM: Topic:: Usable security (cross-reference HCI/Foundations/Cognitive models that inform interaction design)", "ACM: Topic:: Security composability", "ACM: Topic:: Prevention, detection, and deterrence (cross-reference SF/Reliability through Redundancy/Distinctionbetween bugs and faults and NC/Reliable Data Delivery/Error control and NC/Reliable Data Delivery/Flow control)", "ACM: Topic:: Input validation and data sanitization (cross-reference SDF/Development Methods/Program Correctness)", "ACM: Topic:: Choice of programming language and type-safe languages", "ACM: Topic:: Examples of input validation and data sanitization errors (cross-reference SDF/DevelopmentMethods/Program Correctness and SE/Software Construction/Coding Practices)", "ACM: Topic:: Buffer overflows", "ACM: Topic:: Integer errors", "ACM: Topic:: SQL injection (Defensive Programming)", "ACM: Topic:: XSS vulnerability", "ACM: Topic:: Race conditions (cross-reference SF/Parallelism/Parallel programming and PD/Parallel Architecture/Sharedvs. distributed memory and PD/Communication and Coordination/Shared Memory and PD/Parallelism Fundamentals/Programming errors not found in sequential programming)", "ACM: Topic:: Correct handling of exceptions and unexpected behaviors (cross-reference SDF/DevelopmentMethods/program correctness)", "ACM: Topic:: Correct usage of third-party components (cross-reference SDF/Development Methods/program correctnessand Operating System Principles/Concepts of application program interfaces (APIs)", "ACM: Topic:: Effectively deploying security updates (cross-reference OS/Security and Protection/Security methods anddevices)", "ACM: Topic:: Information flow control", "ACM: Topic:: Correctly generating randomness for security purposes", "ACM: Topic:: Mechanisms for detecting and mitigating input and data sanitization errors", "ACM: Topic:: Fuzzing", "ACM: Topic:: Static analysis and dynamic analysis", "ACM: Topic:: Program verification", "ACM: Topic:: Operating system support (e.g., address space randomization, canaries)", "ACM: Topic:: Hardware support (e.g., DEP, TPM)", "ACM: Topic:: Attacker goals, capabilities, and motivations (such as underground economy, digital espionage,cyberwarfare, insider threats, hacktivism, advanced persistent threats)", "ACM: Topic:: Examples of malware (e.g., viruses, worms, spyware, botnets, Trojan horses or rootkits)", "ACM: Topic:: Denial of Service (DoS) and Distributed Denial of Service (DDoS)", "ACM: Topic:: Social engineering (e.g., phishing) (cross-reference SP/Social Context/Social implications of computing ina networked world and HCI/Designing Interaction/Handling human/system failure)", "ACM: Topic:: Attacks on privacy and anonymity (cross-reference HCI/Foundations/Social models that inform interactiondesign: culture, communication, networks and organizations (cross-reference SP/Privacy and Civil Liberties/technology-based solutions for privacy protection)", "ACM: Topic:: Malware/unwanted communication such as covert channels and steganography", "ACM: Topic:: Network specific threats and attack types (e.g., denial of service, spoofing, sniffing and traffic redirection,man-in-the-middle, message integrity attacks, routing attacks, and traffic analysis)", "ACM: Topic:: Use of cryptography for data and network security", "ACM: Topic:: Architectures for secure networks (e.g., secure channels, secure routing protocols, secure DNS, VPNs,anonymous communication protocols, isolation)", "ACM: Topic:: Defense mechanisms and countermeasures (e.g., network monitoring, intrusion detection, firewalls,spoofing and DoS protection, honeypots, tracebacks)", "ACM: Topic:: Security for wireless, cellular networks (cross-reference NC/Mobility/Principles of cellular networks;cross-reference NC/Mobility/802.11)", "ACM: Topic:: Other non-wired networks (e.g., ad hoc, sensor, and vehicular networks)", "ACM: Topic:: Censorship resistance", "ACM: Topic:: Operational network security management (e.g., configure network access control)", "ACM: Topic:: Basic Cryptography Terminology covering notions pertaining to the different (communication) partners,secure/unsecure channel, attackers and their capabilities, encryption, decryption, keys and their characteristics, signatures", "ACM: Topic:: Cipher types (e.g., Caesar cipher, affine cipher) together with typical attack methods such as frequencyanalysis", "ACM: Topic:: Public Key Infrastructure support for digital signature and encryption and its challenges", "ACM: Topic:: Mathematical Preliminaries essential for cryptography, including topics in linear algebra, number theory,probability theory, and statistics", "ACM: Topic:: Cryptographic primitives:", "ACM: Topic:: hash functions, e.g., SHA2, collision resistance", "ACM: Topic:: message authentication codes", "ACM: Topic:: key derivations functions", "ACM: Topic:: Symmetric key cryptography", "ACM: Topic:: Perfect secrecy and the one time pad", "ACM: Topic:: Modes of operation for semantic security and authenticated encryption (e.g., encrypt-then-MAC,", "ACM: Topic:: B, GCM)", "ACM: Topic:: Message integrity (e.g., CMAC, HMAC)", "ACM: Topic:: Public key cryptography:", "ACM: Topic:: Trapdoor permutation, e.g., RSA", "ACM: Topic:: Public key encryption, e.g., RSA encryption, EI Gamal encryption", "ACM: Topic:: Digital signatures", "ACM: Topic:: Public-key infrastructure (PKI) and certificates", "ACM: Topic:: Hardness assumptions, e.g., Diffie-Hellman, integer factoring", "ACM: Topic:: Authenticated key exchange protocols, e.g., TLS", "ACM: Topic:: Cryptographic protocols: challenge-response authentication, zero-knowledge protocols, commitment,", "ACM: Topic:: livious transfer, secure 2-party or multi-party computation, secret sharing, and applications", "ACM: Topic:: Motivate concepts using real-world applications, e.g., electronic cash, secure channels between clients and", "ACM: Topic:: rvers, secure electronic mail, entity authentication, device pairing, voting systems.", "ACM: Topic:: Security definitions and attacks on cryptographic primitives:", "ACM: Topic:: Goals: indistinguishability, unforgeability, collision-resistance", "ACM: Topic:: Attacker capabilities: chosen-message attack (for signatures), birthday attacks, side channelattacks, fault injection attacks.", "ACM: Topic:: Cryptographic standards and references implementations", "ACM: Topic:: Quantum cryptography", "ACM: Topic:: Web security model", "ACM: Topic:: Browser security model including same-origin policy", "ACM: Topic:: Client-server trust boundaries, e.g., cannot rely on secure execution in the client", "ACM: Topic:: Session management, authentication", "ACM: Topic:: Single sign-on", "ACM: Topic:: HTTPS and certificates", "ACM: Topic:: Application vulnerabilities and defenses", "ACM: Topic:: SQL injection (Web Security)", "ACM: Topic:: XSS", "ACM: Topic:: CSRF", "ACM: Topic:: Client-side security", "ACM: Topic:: Cookies security policy", "ACM: Topic:: HTTP security extensions, e.g. HSTS", "ACM: Topic:: Plugins, extensions, and web apps", "ACM: Topic:: Web user tracking", "ACM: Topic:: Server-side security tools, e.g. Web Application Firewalls (WAFs) and fuzzers", "ACM: Topic:: Code integrity and code signing", "ACM: Topic:: Secure boot, measured boot, and root of trust", "ACM: Topic:: Attestation", "ACM: Topic:: TPM and secure co-processors", "ACM: Topic:: Security threats from peripherals, e.g., DMA, IOMMU", "ACM: Topic:: Physical attacks: hardware Trojans, memory probes, cold boot attacks", "ACM: Topic:: Security of embedded devices, e.g., medical devices, cars", "ACM: Topic:: Trusted path", "ACM: Topic:: Privacy policy (cross-reference SP/Social Context/Social implications of computing in a networked world;cross-reference SP/Professional Ethics/Accountability, responsibility and liability; cross-reference SP/Privacy and Civil Liberties/Legal foundations of privacy protection)", "ACM: Topic:: Inference controls/statistical disclosure limitation", "ACM: Topic:: Backup policy, password refresh policy", "ACM: Topic:: Breach disclosure policy", "ACM: Topic:: Data collection and retention policies", "ACM: Topic:: Supply chain policy", "ACM: Topic:: Cloud security tradeoffs", "ACM: Topic:: Basic Principles and methodologies for digital forensics", "ACM: Topic:: Design systems with forensic needs in mind", "ACM: Topic:: Rules of Evidence \u2013 general concepts and differences between jurisdictions and Chain of Custody", "ACM: Topic:: Search and Seizure of evidence: legal and procedural requirements", "ACM: Topic:: Digital Evidence methods and standards", "ACM: Topic:: Techniques and standards for Preservation of Data", "ACM: Topic:: Legal and Reporting Issues including working as an expert witness", "ACM: Topic:: OS/File System Forensics", "ACM: Topic:: Application Forensics", "ACM: Topic:: Web Forensics", "ACM: Topic:: Network Forensics", "ACM: Topic:: Mobile Device Forensics", "ACM: Topic:: Computer/network/system attacks", "ACM: Topic:: Attack detection and investigation", "ACM: Topic:: Anti-forensics", "ACM: Topic:: Building security into the software development lifecycle (cross-reference SE/Software Processes)", "ACM: Topic:: Secure design principles and patterns", "ACM: Topic:: Secure software specifications and requirements", "ACM: Topic:: Secure software development practices (cross-reference SE/Software Construction)", "ACM: Topic:: Secure testing - the process of testing that security requirements are met (including static and dynamicanalysis).", "ACM: Topic:: Software quality assurance and benchmarking measurements", "ACM: Topic:: Information systems as socio-technical systems", "ACM: Topic:: Basic information storage and retrieval (IS&R) concepts", "ACM: Topic:: Information capture and representation", "ACM: Topic:: Supporting human needs: searching, retrieving, linking, browsing, navigating", "ACM: Topic:: Information management applications", "ACM: Topic:: Declarative and navigational queries, use of links", "ACM: Topic:: Analysis and indexing", "ACM: Topic:: Quality issues: reliability, scalability, efficiency, and effectiveness", "ACM: Topic:: Approaches to and evolution of database systems", "ACM: Topic:: Components of database systems", "ACM: Topic:: Design of core DBMS functions (e.g., query mechanisms, transaction management, buffer management,access methods)", "ACM: Topic:: Database architecture and data independence", "ACM: Topic:: Use of a declarative query language", "ACM: Topic:: Systems supporting structured and/or stream content", "ACM: Topic:: Approaches for managing large volumes of data (e.g., noSQL database systems, use of MapReduce).", "ACM: Topic:: Data modeling", "ACM: Topic:: Conceptual models (e.g., entity-relationship, UML diagrams)", "ACM: Topic:: Spreadsheet models", "ACM: Topic:: Relational data models", "ACM: Topic:: Object-oriented models (cross-reference PL/Object-Oriented Programming)", "ACM: Topic:: Semi-structured data model (expressed using DTD or XML Schema, for example)", "ACM: Topic:: The impact of indices on query performance", "ACM: Topic:: The basic structure of an index", "ACM: Topic:: Keeping a buffer of data in memory", "ACM: Topic:: Creating indexes with SQL", "ACM: Topic:: Indexing text", "ACM: Topic:: Indexing the web (e.g., web crawling)", "ACM: Topic:: Mapping conceptual schema to a relational schema", "ACM: Topic:: Entity and referential integrity", "ACM: Topic:: Relational algebra and relational calculus", "ACM: Topic:: Relational Database design", "ACM: Topic:: Functional dependency", "ACM: Topic:: Decomposition of a schema; lossless-join and dependency-preservation properties of a decomposition", "ACM: Topic:: Candidate keys, superkeys, and closure of a set of attributes", "ACM: Topic:: Normal forms (BCNF)", "ACM: Topic:: Multi-valued dependency (4NF)", "ACM: Topic:: Join dependency (PJNF, 5NF)", "ACM: Topic:: Representation theory", "ACM: Topic:: Overview of database languages", "ACM: Topic:: SQL (data definition, query formulation, update sublanguage, constraints, integrity)", "ACM: Topic:: Selections", "ACM: Topic:: Projections", "ACM: Topic:: Select-project-join", "ACM: Topic:: Aggregates and group-by", "ACM: Topic:: Subqueries", "ACM: Topic:: QBE and 4th-generation environments", "ACM: Topic:: Different ways to invoke non-procedural queries in conventional languages", "ACM: Topic:: Introduction to other major query languages (e.g., XPATH, SPARQL)", "ACM: Topic:: Stored procedures", "ACM: Topic:: Transactions", "ACM: Topic:: Failure and recovery", "ACM: Topic:: Concurrency control", "ACM: Topic:: Interaction of transaction management with storage, especially buffering", "ACM: Topic:: Distributed DBMS", "ACM: Topic:: Distributed data storage", "ACM: Topic:: Distributed query processing", "ACM: Topic:: Distributed transaction model", "ACM: Topic:: Homogeneous and heterogeneous solutions", "ACM: Topic:: Client-server distributed databases (cross-reference SF/Computational Paradigms)", "ACM: Topic:: Parallel DBMS", "ACM: Topic:: Parallel DBMS architectures: shared memory, shared disk, shared nothing;", "ACM: Topic:: Speedup and scale-up, e.g., use of the MapReduce processing model (cross-referenceCN/Processing, PD/Parallel Decomposition)", "ACM: Topic:: Data replication and weak consistency models", "ACM: Topic:: Storage and file structure", "ACM: Topic:: Indexed files", "ACM: Topic:: Hashed files", "ACM: Topic:: Signature files", "ACM: Topic:: B-trees", "ACM: Topic:: Files with dense index", "ACM: Topic:: Files with variable length records", "ACM: Topic:: Database efficiency and tuning", "ACM: Topic:: Uses of data mining", "ACM: Topic:: Data mining algorithms", "ACM: Topic:: Associative and sequential patterns", "ACM: Topic:: Data clustering", "ACM: Topic:: Market basket analysis", "ACM: Topic:: Data cleaning", "ACM: Topic:: Data visualization (cross-reference GV/Visualization and CN/Interactive Visualization)", "ACM: Topic:: Documents, electronic publishing, markup, and markup languages", "ACM: Topic:: Tries, inverted files, PAT trees, signature files, indexing", "ACM: Topic:: Morphological analysis, stemming, phrases, stop lists", "ACM: Topic:: Term frequency distributions, uncertainty, fuzziness, weighting", "ACM: Topic:: Vector space, probabilistic, logical, and advanced models", "ACM: Topic:: Information needs, relevance, evaluation, effectiveness", "ACM: Topic:: Thesauri, ontologies, classification and categorization, metadata", "ACM: Topic:: Bibliographic information, bibliometrics, citations", "ACM: Topic:: Routing and (community) filtering", "ACM: Topic:: Multimedia search, information seeking behavior, user modeling, feedback", "ACM: Topic:: Information summarization and visualization", "ACM: Topic:: Faceted search (e.g., using citations, keywords, classification schemes)", "ACM: Topic:: Digital libraries", "ACM: Topic:: Digitization, storage, interchange, digital objects, composites, and packages", "ACM: Topic:: Metadata and cataloging", "ACM: Topic:: Naming, repositories, archives", "ACM: Topic:: Archiving and preservation, integrity", "ACM: Topic:: Spaces (conceptual, geographical, 2/3D, VR)", "ACM: Topic:: Architectures (agents, buses, wrappers/mediators), interoperability", "ACM: Topic:: Services (searching, linking, browsing, and so forth)", "ACM: Topic:: Intellectual property rights management, privacy, and protection (watermarking)", "ACM: Topic:: Input and output devices, device drivers, control signals and protocols, DSPs", "ACM: Topic:: Standards (e.g., audio, graphics, video)", "ACM: Topic:: Applications, media editors, authoring systems, and authoring", "ACM: Topic:: Streams/structures, capture/represent/transform, spaces/domains, compression/coding", "ACM: Topic:: Content-based analysis, indexing, and retrieval of audio, images, animation, and video", "ACM: Topic:: Presentation, rendering, synchronization, multi-modal integration/interfaces", "ACM: Topic:: Real-time delivery, quality of service (including performance), capacity planning, audio/videoconferencing, video-on-demand", "ACM: Topic:: Overview of AI problems, examples of successful recent AI applications", "ACM: Topic:: What is intelligent behavior?", "ACM: Topic:: The Turing test", "ACM: Topic:: Rational versus non-rational reasoning", "ACM: Topic:: Problem characteristics", "ACM: Topic:: Fully versus partially observable", "ACM: Topic:: Single versus multi-agent", "ACM: Topic:: Deterministic versus stochastic", "ACM: Topic:: Static versus dynamic", "ACM: Topic:: Discrete versus continuous", "ACM: Topic:: Nature of agents", "ACM: Topic:: Autonomous versus semi-autonomous", "ACM: Topic:: Reflexive, goal-based, and utility-based", "ACM: Topic:: The importance of perception and environmental interactions", "ACM: Topic:: Philosophical and ethical issues. [elective]", "ACM: Topic:: Problem spaces (states, goals and operators), problem solving by search", "ACM: Topic:: Factored representation (factoring state into variables)", "ACM: Topic:: Uninformed search (breadth-first, depth-first, depth-first with iterative deepening)", "ACM: Topic:: Heuristics and informed search (hill-climbing, generic best-first, A*)", "ACM: Topic:: Space and time efficiency of search", "ACM: Topic:: Two-player games (introduction to minimax search)", "ACM: Topic:: Constraint satisfaction (backtracking and local search methods)", "ACM: Topic:: Review of propositional and predicate logic (cross-reference DS/Basic Logic)", "ACM: Topic:: Resolution and theorem proving (propositional logic only)", "ACM: Topic:: Forward chaining, backward chaining", "ACM: Topic:: Review of probabilistic reasoning, Bayes theorem (cross-reference with DS/Discrete Probability)", "ACM: Topic:: Definition and examples of broad variety of machine learning tasks, including classification", "ACM: Topic:: Inductive learning", "ACM: Topic:: Simple statistical-based learning, such as Naive Bayesian Classifier, decision trees", "ACM: Topic:: The over-fitting problem", "ACM: Topic:: Measuring classifier accuracy", "ACM: Topic:: Constructing search trees, dynamic search space, combinatorial explosion of search space", "ACM: Topic:: Stochastic search", "ACM: Topic:: Simulated annealing", "ACM: Topic:: Genetic algorithms", "ACM: Topic:: Monte-Carlo tree search", "ACM: Topic:: Implementation of A* search, beam search", "ACM: Topic:: Minimax search, alpha-beta pruning", "ACM: Topic:: Expectimax search (MDP-solving) and chance nodes", "ACM: Topic:: Knowledge representation issues", "ACM: Topic:: Description logics", "ACM: Topic:: Ontology engineering", "ACM: Topic:: Non-monotonic reasoning (e.g., non-classical logics, default reasoning)", "ACM: Topic:: Argumentation", "ACM: Topic:: Reasoning about action and change (e.g., situation and event calculus)", "ACM: Topic:: Temporal and spatial reasoning", "ACM: Topic:: Rule-based Expert Systems", "ACM: Topic:: Semantic networks", "ACM: Topic:: Model-based and Case-based reasoning", "ACM: Topic:: Planning:", "ACM: Topic:: Partial and totally ordered planning", "ACM: Topic:: Plan graphs", "ACM: Topic:: Hierarchical planning", "ACM: Topic:: Planning and execution including conditional planning and continuous planning", "ACM: Topic:: Mobile agent/Multi-agent planning", "ACM: Topic:: Review of basic probability (cross-reference DS/Discrete Probability)", "ACM: Topic:: Random variables and probability distributions", "ACM: Topic:: Axioms of probability", "ACM: Topic:: Probabilistic inference", "ACM: Topic:: Bayes\u2019 Rule", "ACM: Topic:: Conditional Independence (IS)", "ACM: Topic:: Knowledge representations", "ACM: Topic:: Bayesian Networks", "ACM: Topic:: Exact inference and its complexity", "ACM: Topic:: Randomized sampling (Monte Carlo) methods (e.g. Gibbs sampling)", "ACM: Topic:: Markov Networks", "ACM: Topic:: Relational probability models", "ACM: Topic:: Hidden Markov Models", "ACM: Topic:: Decision Theory", "ACM: Topic:: Preferences and utility functions", "ACM: Topic:: Maximizing expected utility", "ACM: Topic:: Definitions of agents", "ACM: Topic:: Agent architectures (e.g., reactive, layered, cognitive)", "ACM: Topic:: Agent theory", "ACM: Topic:: Rationality, game theory", "ACM: Topic:: Decision-theoretic agents", "ACM: Topic:: Markov decision processes (MDP)", "ACM: Topic:: Software agents, personal assistants, and information access", "ACM: Topic:: Collaborative agents", "ACM: Topic:: Information-gathering agents", "ACM: Topic:: Believable agents (synthetic characters, modeling emotions in agents)", "ACM: Topic:: Learning agents", "ACM: Topic:: Multi-agent systems", "ACM: Topic:: Collaborating agents", "ACM: Topic:: Agent teams", "ACM: Topic:: Competitive agents (e.g., auctions, voting)", "ACM: Topic:: Swarm systems and biologically inspired models", "ACM: Topic:: Deterministic and stochastic grammars", "ACM: Topic:: Parsing algorithms", "ACM: Topic:: CFGs and chart parsers (e.g. CYK)", "ACM: Topic:: Probabilistic CFGs and weighted CYK", "ACM: Topic:: Representing meaning / Semantics", "ACM: Topic:: Logic-based knowledge representations", "ACM: Topic:: Semantic roles", "ACM: Topic:: Temporal representations", "ACM: Topic:: Beliefs, desires, and intentions", "ACM: Topic:: Corpus-based methods", "ACM: Topic:: N-grams and HMMs", "ACM: Topic:: Smoothing and backoff", "ACM: Topic:: Examples of use: POS tagging and morphology", "ACM: Topic:: Information retrieval (Cross-reference IM/Information Storage and Retrieval)", "ACM: Topic:: Vector space model", "ACM: Topic:: TF & IDF", "ACM: Topic:: Precision and recall", "ACM: Topic:: Information extraction", "ACM: Topic:: Language translation", "ACM: Topic:: Text classification, categorization", "ACM: Topic:: Bag of words model", "ACM: Topic:: Definition and examples of broad variety of machine learning tasks", "ACM: Topic:: General statistical-based learning, parameter estimation (maximum likelihood)", "ACM: Topic:: Inductive logic programming (ILP)", "ACM: Topic:: Supervised learning", "ACM: Topic:: Learning decision trees", "ACM: Topic:: Learning neural networks", "ACM: Topic:: Support vector machines (SVMs)", "ACM: Topic:: Ensembles", "ACM: Topic:: Nearest-neighbor algorithms", "ACM: Topic:: Unsupervised Learning and clustering", "ACM: Topic:: EM", "ACM: Topic:: K-means", "ACM: Topic:: Self-organizing maps", "ACM: Topic:: Semi-supervised learning", "ACM: Topic:: Learning graphical models (Cross-reference IS/Reasoning under Uncertainty)", "ACM: Topic:: Performance evaluation (such as cross-validation, area under ROC curve)", "ACM: Topic:: Learning theory", "ACM: Topic:: The problem of overfitting, the curse of dimensionality", "ACM: Topic:: Reinforcement learning", "ACM: Topic:: Exploration vs. exploitation trade-off", "ACM: Topic:: Markov decision processes", "ACM: Topic:: Value and policy iteration", "ACM: Topic:: Application of Machine Learning algorithms to Data Mining (cross-reference IM/Data Mining)", "ACM: Topic:: Overview: problems and progress", "ACM: Topic:: State-of-the-art robot systems, including their sensors and an overview of their sensor processing", "ACM: Topic:: Data-parallel decomposition", "ACM: Topic:: Robot control architectures, e.g., deliberative vs. reactive control and Braitenberg vehicles", "ACM: Topic:: World modeling and world models", "ACM: Topic:: Inherent uncertainty in sensing and in control", "ACM: Topic:: Configuration space and environmental maps", "ACM: Topic:: Interpreting uncertain sensor data", "ACM: Topic:: Localizing and mapping", "ACM: Topic:: Navigation and control", "ACM: Topic:: Motion planning", "ACM: Topic:: Multiple-robot coordination", "ACM: Topic:: Computer vision", "ACM: Topic:: Image acquisition, representation, processing and properties", "ACM: Topic:: Shape representation, object recognition and segmentation", "ACM: Topic:: Motion analysis", "ACM: Topic:: Audio and speech recognition", "ACM: Topic:: Modularity in recognition", "ACM: Topic:: Approaches to pattern recognition (cross-reference IS/Advanced Machine Learning)", "ACM: Topic:: Classification algorithms and measures of classification quality", "ACM: Topic:: Statistical techniques", "ACM: Topic:: Organization of the Internet (Internet Service Providers, Content Providers, etc.)", "ACM: Topic:: Switching techniques (e.g., circuit, packet)", "ACM: Topic:: Physical pieces of a network, including hosts, routers, switches, ISPs, wireless, LAN, access point, andfirewalls", "ACM: Topic:: Layering principles (encapsulation, multiplexing)", "ACM: Topic:: Roles of the different layers (application, transport, network, datalink, physical)", "ACM: Topic:: Naming and address schemes (DNS, IP addresses, Uniform Resource Identifiers, etc.)", "ACM: Topic:: Distributed applications (client/server, peer-to-peer, cloud, etc.)", "ACM: Topic:: HTTP as an application layer protocol", "ACM: Topic:: Multiplexing with TCP and UDP", "ACM: Topic:: Socket APIs", "ACM: Topic:: Error control (retransmission techniques, timers)", "ACM: Topic:: Flow control (acknowledgements, sliding window)", "ACM: Topic:: Performance issues (pipelining)", "ACM: Topic:: TCP", "ACM: Topic:: Routing versus forwarding", "ACM: Topic:: Static routing", "ACM: Topic:: Internet Protocol (IP)", "ACM: Topic:: Scalability issues (hierarchical addressing)", "ACM: Topic:: Multiple Access Problem", "ACM: Topic:: Common approaches to multiple access (exponential-backoff, time division multiplexing, etc)", "ACM: Topic:: Local Area Networks (Topic)", "ACM: Topic:: Ethernet", "ACM: Topic:: Switching", "ACM: Topic:: Need for resource allocation", "ACM: Topic:: Fixed allocation (TDM, FDM, WDM) versus dynamic allocation", "ACM: Topic:: End-to-end versus network assisted approaches", "ACM: Topic:: Fairness", "ACM: Topic:: Principles of congestion control", "ACM: Topic:: Approaches to Congestion (e.g., Content Distribution Networks)", "ACM: Topic:: Principles of cellular networks", "ACM: Topic:: 802.11 networks", "ACM: Topic:: Issues in supporting mobile nodes (home agents)", "ACM: Topic:: Social networks overview", "ACM: Topic:: Example social network platforms", "ACM: Topic:: Structure of social network graphs", "ACM: Topic:: Social network analysis", "ACM: Topic:: Role and purpose of the operating system", "ACM: Topic:: Functionality of a typical operating system", "ACM: Topic:: Mechanisms to support client-server models, hand-held devices", "ACM: Topic:: Design issues (efficiency, robustness, flexibility, portability, security, compatibility)", "ACM: Topic:: Influences of security, networking, multimedia, windowing systems", "ACM: Topic:: Structuring methods (monolithic, layered, modular, micro-kernel models)", "ACM: Topic:: Abstractions, processes, and resources", "ACM: Topic:: Concepts of application program interfaces (APIs)", "ACM: Topic:: The evolution of hardware/software techniques and application needs", "ACM: Topic:: Device organization", "ACM: Topic:: Interrupts: methods and implementations", "ACM: Topic:: Concept of user/system state and protection, transition to kernel mode", "ACM: Topic:: States and state diagrams (cross-reference SF/State and State Machines)", "ACM: Topic:: Structures (ready list, process control blocks, and so forth)", "ACM: Topic:: Dispatching and context switching", "ACM: Topic:: The role of interrupts", "ACM: Topic:: Managing atomic access to OS objects", "ACM: Topic:: Implementing synchronization primitives", "ACM: Topic:: Multiprocessor issues (spin-locks, reentrancy) (cross-reference SF/Parallelism)", "ACM: Topic:: Preemptive and non-preemptive scheduling (cross-reference SF/Resource Allocation and Scheduling,PD/Parallel Performance)", "ACM: Topic:: Schedulers and policies (cross-reference SF/Resource Allocation and Scheduling, PD/ParallelPerformance)", "ACM: Topic:: Processes and threads (cross-reference SF/Computational paradigms)", "ACM: Topic:: Deadlines and real-time issues", "ACM: Topic:: Review of physical memory and memory management hardware", "ACM: Topic:: Working sets and thrashing", "ACM: Topic:: Caching (cross-reference AR/Memory System Organization and Architecture)", "ACM: Topic:: Overview of system security", "ACM: Topic:: Policy/mechanism separation", "ACM: Topic:: Security methods and devices", "ACM: Topic:: Protection, access control, and authentication", "ACM: Topic:: Backups", "ACM: Topic:: Types of virtualization (including Hardware/Software, OS, Server, Service, Network)", "ACM: Topic:: Paging and virtual memory", "ACM: Topic:: Virtual file systems", "ACM: Topic:: Hypervisors", "ACM: Topic:: Portable virtualization; emulation vs. isolation", "ACM: Topic:: Cost of virtualization", "ACM: Topic:: Characteristics of serial and parallel devices", "ACM: Topic:: Abstracting device differences", "ACM: Topic:: Buffering strategies", "ACM: Topic:: Direct memory access", "ACM: Topic:: Recovery from failures", "ACM: Topic:: Files: data, metadata, operations, organization, buffering, sequential, nonsequential", "ACM: Topic:: Directories: contents and structure", "ACM: Topic:: File systems: partitioning, mount/unmount, virtual file systems", "ACM: Topic:: Standard implementation techniques", "ACM: Topic:: Memory-mapped files", "ACM: Topic:: Special-purpose file systems", "ACM: Topic:: Naming, searching, access, backups", "ACM: Topic:: Journaling and log-structured file systems", "ACM: Topic:: Process and task scheduling", "ACM: Topic:: Memory/disk management requirements in a real-time environment", "ACM: Topic:: Failures, risks, and recovery", "ACM: Topic:: Special concerns in real-time systems", "ACM: Topic:: Fundamental concepts: reliable and available systems (cross-reference SF/Reliability through Redundancy)", "ACM: Topic:: Spatial and temporal redundancy (cross-reference SF/Reliability through Redundancy)", "ACM: Topic:: Methods used to implement fault tolerance", "ACM: Topic:: Examples of OS mechanisms for detection, recovery, restart to implement fault tolerance, use of thesetechniques for the OS\u2019s own services", "ACM: Topic:: Why system performance needs to be evaluated (cross-reference SF/Performance/Figures of performancemerit)", "ACM: Topic:: What is to be evaluated (cross-reference SF/Performance/Figures of performance merit)", "ACM: Topic:: Systems performance policies, e.g., caching, paging, scheduling, memory management, and security", "ACM: Topic:: Evaluation models: deterministic, analytic, simulation, or implementation-specific", "ACM: Topic:: How to collect evaluation data (profiling and tracing mechanisms)", "ACM: Topic:: Overview of platforms (e.g., Web, Mobile, Game, Industrial)", "ACM: Topic:: Programming via platform-specific APIs", "ACM: Topic:: Overview of Platform Languages (e.g., Objective C, HTML5)", "ACM: Topic:: Programming under platform constraints", "ACM: Topic:: Web programming languages (e.g., HTML5, Java Script, PHP, CSS)", "ACM: Topic:: Web platform constraints", "ACM: Topic:: Software as a Service (SaaS)", "ACM: Topic:: Web standards", "ACM: Topic:: Mobile programming languages", "ACM: Topic:: Challenges with mobility and wireless communication", "ACM: Topic:: Location-aware applications", "ACM: Topic:: Performance / power tradeoffs", "ACM: Topic:: Mobile platform constraints", "ACM: Topic:: Emerging technologies", "ACM: Topic:: Types of Industrial Platforms (e.g., Mathematic, Robotic, Industrial Control)", "ACM: Topic:: Robotic software and its architecture", "ACM: Topic:: Domain-specific languages", "ACM: Topic:: Industrial platform constraints", "ACM: Topic:: Types of game platforms (e.g., XBox, Wii, PlayStation)", "ACM: Topic:: Game platform languages (e.g., C++, Java, Lua, Python)", "ACM: Topic:: Game platform constraints", "ACM: Topic:: Multiple simultaneous computations", "ACM: Topic:: Goals of parallelism (e.g., throughput) versus concurrency (e.g., controlling access to shared resources)", "ACM: Topic:: Parallelism, communication, and coordination", "ACM: Topic:: Programming constructs for coordinating multiple simultaneous computations", "ACM: Topic:: Need for synchronization", "ACM: Topic:: Programming errors not found in sequential programming", "ACM: Topic:: Data races (simultaneous read/write or write/write of shared state)", "ACM: Topic:: Higher-level races (interleavings violating program intention, undesired non-determinism)", "ACM: Topic:: Lack of liveness/progress (deadlock, starvation)", "ACM: Topic:: Need for communication and coordination/synchronization", "ACM: Topic:: Independence and partitioning", "ACM: Topic:: Basic knowledge of parallel decomposition concepts (cross-reference SF/System Support for Parallelism)", "ACM: Topic:: Task-based decomposition", "ACM: Topic:: Implementation strategies such as threads", "ACM: Topic:: Strategies such as SIMD and MapReduce", "ACM: Topic:: Actors and reactive processes (e.g., request handlers)", "ACM: Topic:: Shared Memory", "ACM: Topic:: Consistency, and its role in programming language guarantees for data-race-free programs", "ACM: Topic:: Message passing", "ACM: Topic:: Point-to-point versus multicast (or event-based) messages", "ACM: Topic:: Blocking versus non-blocking styles for sending and receiving messages", "ACM: Topic:: Message buffering (cross-reference PF/Fundamental Data Structures/Queues)", "ACM: Topic:: Atomicity", "ACM: Topic:: Specifying and testing atomicity and safety requirements", "ACM: Topic:: Granularity of atomic accesses and updates, and the use of constructs such as critical sections ortransactions to describe them", "ACM: Topic:: Mutual Exclusion using locks, semaphores, monitors, or related constructs", "ACM: Topic:: Potential for liveness failures and deadlock (causes, conditions, prevention)", "ACM: Topic:: Composition (PD)", "ACM: Topic:: Composing larger granularity atomic actions using synchronization", "ACM: Topic:: Transactions, including optimistic and conservative approaches", "ACM: Topic:: Consensus", "ACM: Topic:: (Cyclic) barriers, counters, or related constructs", "ACM: Topic:: Conditional actions", "ACM: Topic:: Conditional waiting (e.g., using condition variables)", "ACM: Topic:: Critical paths, work and span, and the relation to Amdahl\u2019s law (cross-reference SF/Performance)", "ACM: Topic:: Speed-up and scalability", "ACM: Topic:: Naturally (embarrassingly) parallel algorithms", "ACM: Topic:: Parallel algorithmic patterns (divide-and-conquer, map and reduce, master-workers, others)", "ACM: Topic:: Specific algorithms (e.g., parallel MergeSort)", "ACM: Topic:: Parallel graph algorithms (e.g., parallel shortest path, parallel spanning tree) (cross-reference", "ACM: Topic:: /Algorithmic Strategies/Divide-and-conquer)", "ACM: Topic:: Parallel matrix computations", "ACM: Topic:: Producer-consumer and pipelined algorithms", "ACM: Topic:: Examples of non-scalable parallel algorithms", "ACM: Topic:: Multicore processors", "ACM: Topic:: Shared vs. distributed memory", "ACM: Topic:: Symmetric multiprocessing (SMP)", "ACM: Topic:: SIMD, vector processing", "ACM: Topic:: GPU, co-processing", "ACM: Topic:: Flynn\u2019s taxonomy", "ACM: Topic:: Instruction level support for parallel programming", "ACM: Topic:: Atomic instructions such as Compare and Set", "ACM: Topic:: Memory issues", "ACM: Topic:: Multiprocessor caches and cache coherence", "ACM: Topic:: Non-uniform memory access (NUMA)", "ACM: Topic:: Topologies", "ACM: Topic:: Interconnects", "ACM: Topic:: Clusters", "ACM: Topic:: Resource sharing (e.g., buses and interconnects)", "ACM: Topic:: Load balancing", "ACM: Topic:: Performance measurement", "ACM: Topic:: Scheduling and contention (cross-reference OS/Scheduling and Dispatch)", "ACM: Topic:: Evaluating communication overhead", "ACM: Topic:: Data management", "ACM: Topic:: Non-uniform communication costs due to proximity (cross-reference SF/Proximity)", "ACM: Topic:: Cache effects (e.g., false sharing)", "ACM: Topic:: Maintaining spatial locality", "ACM: Topic:: Power usage and management", "ACM: Topic:: Faults (cross-reference OS/Fault Tolerance)", "ACM: Topic:: Network-based (including partitions) and node-based failures", "ACM: Topic:: Impact on system-wide guarantees (e.g., availability)", "ACM: Topic:: Distributed message sending", "ACM: Topic:: Data conversion and transmission", "ACM: Topic:: Sockets", "ACM: Topic:: Message sequencing", "ACM: Topic:: Buffering, retrying, and dropping messages", "ACM: Topic:: Distributed system design tradeoffs", "ACM: Topic:: Latency versus throughput", "ACM: Topic:: Consistency, availability, partition tolerance", "ACM: Topic:: Distributed service design", "ACM: Topic:: Stateful versus stateless protocols and services", "ACM: Topic:: Session (connection-based) designs", "ACM: Topic:: Reactive (IO-triggered) and multithreaded designs", "ACM: Topic:: Core distributed algorithms", "ACM: Topic:: Election, discovery", "ACM: Topic:: Internet-Scale computing", "ACM: Topic:: Task partitioning (cross-reference PD/Parallel Algorithms, Analysis, and Programming)", "ACM: Topic:: Data access", "ACM: Topic:: Clusters, grids, and meshes", "ACM: Topic:: Cloud services", "ACM: Topic:: Infrastructure as a service", "ACM: Topic:: Elasticity of resources", "ACM: Topic:: Platform APIs", "ACM: Topic:: Software as a service", "ACM: Topic:: Security", "ACM: Topic:: Cost management", "ACM: Topic:: Virtualization (cross-reference SF/Virtualization and Isolation and OS/Virtual Machines)", "ACM: Topic:: Shared resource management", "ACM: Topic:: Migration of processes", "ACM: Topic:: Cloud-based data storage", "ACM: Topic:: Shared access to weakly consistent data stores", "ACM: Topic:: Data synchronization", "ACM: Topic:: Data partitioning", "ACM: Topic:: Distributed file systems (cross-reference IM/Distributed Databases)", "ACM: Topic:: Replication", "ACM: Topic:: Formal models of processes and message passing, including algebras such as Communicating SequentialProcesses (CSP) and pi-calculus", "ACM: Topic:: Formal models of parallel computation, including the Parallel Random Access Machine (PRAM) andalternatives such as Bulk Synchronous Parallel (BSP)", "ACM: Topic:: Formal models of computational dependencies", "ACM: Topic:: Models of (relaxed) shared memory consistency and their relation to programming language specifications", "ACM: Topic:: Algorithmic correctness criteria including linearizability", "ACM: Topic:: Models of algorithmic progress, including non-blocking guarantees and fairness", "ACM: Topic:: Techniques for specifying and checking correctness properties such as atomicity and freedom from dataraces", "ACM: Topic:: Object-oriented design", "ACM: Topic:: Decomposition into objects carrying state and having behavior", "ACM: Topic:: Class-hierarchy design for modeling", "ACM: Topic:: Definition of classes: fields, methods, and constructors", "ACM: Topic:: Subclasses, inheritance, and method overriding", "ACM: Topic:: Dynamic dispatch: definition of method-call", "ACM: Topic:: Subtyping (cross-reference PL/Type Systems)", "ACM: Topic:: Subtype polymorphism; implicit upcasts in typed languages", "ACM: Topic:: Notion of behavioral replacement: subtypes acting like supertypes", "ACM: Topic:: Relationship between subtyping and inheritance", "ACM: Topic:: Object-oriented idioms for encapsulation", "ACM: Topic:: Privacy and visibility of class members", "ACM: Topic:: Interfaces revealing only method signatures", "ACM: Topic:: Abstract base classes", "ACM: Topic:: Using collection classes, iterators, and other common library components", "ACM: Topic:: Effect-free programming", "ACM: Topic:: Function calls have no side effects, facilitating compositional reasoning", "ACM: Topic:: Variables are immutable, preventing unexpected changes to program data by other code", "ACM: Topic:: Data can be freely aliased or copied without introducing unintended effects from mutation", "ACM: Topic:: Processing structured data (e.g., trees) via functions with cases for each data variant", "ACM: Topic:: Associated language constructs such as discriminated unions and pattern-matching over them", "ACM: Topic:: Functions defined over compound data in terms of functions applied to the constituent pieces", "ACM: Topic:: First-class functions (taking, returning, and storing functions)", "ACM: Topic:: Function closures (functions using variables in the enclosing lexical environment)", "ACM: Topic:: Basic meaning and definition -- creating closures at run-time by capturing the environment", "ACM: Topic:: Canonical idioms: call-backs, arguments to iterators, reusable code via function arguments", "ACM: Topic:: Using a closure to encapsulate data in its environment", "ACM: Topic:: Currying and partial application", "ACM: Topic:: Defining higher-order operations on aggregates, especially map, reduce/fold, and filter", "ACM: Topic:: Events and event handlers", "ACM: Topic:: Canonical uses such as GUIs, mobile devices, robots, servers", "ACM: Topic:: Using a reactive framework", "ACM: Topic:: Defining event handlers/listeners", "ACM: Topic:: Main event loop not under event-handler-writer\u2019s control", "ACM: Topic:: Externally-generated events and program-generated events", "ACM: Topic:: Separation of model, view, and controller", "ACM: Topic:: A type as a set of values together with a set of operations", "ACM: Topic:: Primitive types (e.g., numbers, Booleans)", "ACM: Topic:: Compound types built from other types (e.g., records, unions, arrays, lists, functions, references)", "ACM: Topic:: Association of types to variables, arguments, results, and fields", "ACM: Topic:: Type safety and errors caused by using values inconsistently given their intended types", "ACM: Topic:: Goals and limitations of static typing", "ACM: Topic:: Eliminating some classes of errors without running the program", "ACM: Topic:: Undecidability means static analysis must conservatively approximate program behavior", "ACM: Topic:: Generic types (parametric polymorphism)", "ACM: Topic:: Definition", "ACM: Topic:: Use for generic libraries such as collections", "ACM: Topic:: Comparison with ad hoc polymorphism (overloading) and subtype polymorphism", "ACM: Topic:: Complementary benefits of static and dynamic typing", "ACM: Topic:: Errors early vs. errors late/avoided", "ACM: Topic:: Using formal semantics for systems modeling", "ACM: Topic:: Principles of language design such as orthogonality", "ACM: Topic:: Enforce invariants during code development and code maintenance vs. postpone typing decisionswhile prototyping and conveniently allow flexible coding patterns such as heterogeneous collections", "ACM: Topic:: Avoid misuse of code vs. allow more code reuse", "ACM: Topic:: Detect incomplete programs vs. allow incomplete programs to run", "ACM: Topic:: Programs that take (other) programs as input such as interpreters, compilers, type-checkers, documentationgenerators", "ACM: Topic:: Abstract syntax trees; contrast with concrete syntax", "ACM: Topic:: Data structures to represent code for execution, translation, or transmission", "ACM: Topic:: Interpretation vs. compilation to native code vs. compilation to portable intermediate representation", "ACM: Topic:: Language translation pipeline: parsing, optional type-checking, translation, linking, execution", "ACM: Topic:: Execution as native code or within a virtual machine", "ACM: Topic:: Alternatives like dynamic loading and dynamic (or \u201cjust-in-time\u201d) code generation", "ACM: Topic:: Run-time representation of core language constructs such as objects (method tables) and first-classfunctions (closures)", "ACM: Topic:: Run-time layout of memory: call-stack, heap, static data", "ACM: Topic:: Implementing loops, recursion, and tail calls", "ACM: Topic:: Memory management", "ACM: Topic:: Manual memory management: allocating, de-allocating, and reusing heap memory", "ACM: Topic:: Automated memory management: garbage collection as an automated technique using the notionof reachability", "ACM: Topic:: Scanning (lexical analysis) using regular expressions", "ACM: Topic:: Parsing strategies including top-down (e.g., recursive descent, Earley parsing, or LL) and bottom-up (e.g.,backtracking or LR) techniques; role of context-free grammars", "ACM: Topic:: Generating scanners and parsers from declarative specifications", "ACM: Topic:: High-level program representations such as abstract syntax trees", "ACM: Topic:: Scope and binding resolution", "ACM: Topic:: Type checking (Compiler Semantic Analysis)", "ACM: Topic:: Declarative specifications such as attribute grammars", "ACM: Topic:: Procedure calls and method dispatching", "ACM: Topic:: Separate compilation; linking", "ACM: Topic:: Instruction selection", "ACM: Topic:: Instruction scheduling", "ACM: Topic:: Register allocation", "ACM: Topic:: Peephole optimization", "ACM: Topic:: Dynamic memory management approaches and techniques: malloc/free, garbage collection (mark-sweep,copying, reference counting), regions (also known as arenas or zones)", "ACM: Topic:: Data layout for objects and activation records", "ACM: Topic:: Just-in-time compilation and dynamic recompilation", "ACM: Topic:: Other common features of virtual machines, such as class loading, threads, and security.", "ACM: Topic:: Relevant program representations, such as basic blocks, control-flow graphs, def-use chains, and staticsingle assignment", "ACM: Topic:: Undecidability and consequences for program analysis", "ACM: Topic:: Flow-insensitive analyses, such as type-checking and scalable pointer and alias analyses", "ACM: Topic:: Flow-sensitive analyses, such as forward and backward dataflow analyses", "ACM: Topic:: Path-sensitive analyses, such as software model checking", "ACM: Topic:: Tools and frameworks for defining analyses", "ACM: Topic:: Role of static analysis in program optimization", "ACM: Topic:: Role of static analysis in (partial) verification and bug-finding", "ACM: Topic:: Lazy evaluation and infinite streams", "ACM: Topic:: Control Abstractions: Exception Handling, Continuations, Monads", "ACM: Topic:: Object-oriented abstractions: Multiple inheritance, Mixins, Traits, Multimethods", "ACM: Topic:: Metaprogramming: Macros, Generative programming, Model-based development", "ACM: Topic:: Module systems", "ACM: Topic:: String manipulation via pattern-matching (regular expressions)", "ACM: Topic:: Dynamic code evaluation (\u201ceval\u201d)", "ACM: Topic:: Language support for checking assertions, invariants, and pre/post-conditions", "ACM: Topic:: Constructs for thread-shared variables and shared-memory synchronization", "ACM: Topic:: Actor models", "ACM: Topic:: Futures", "ACM: Topic:: Language support for data parallelism", "ACM: Topic:: Models for passing messages between sequential processes", "ACM: Topic:: Effect of memory-consistency models on language semantics and correct code generation", "ACM: Topic:: Compositional type constructors, such as product types (for aggregates), sum types (for unions), functiontypes, quantified types, and recursive types", "ACM: Topic:: Type checking (Type Systems)", "ACM: Topic:: Type safety as preservation plus progress", "ACM: Topic:: Type inference", "ACM: Topic:: Static overloading", "ACM: Topic:: Syntax vs. semantics", "ACM: Topic:: Lambda Calculus", "ACM: Topic:: Approaches to semantics: Operational, Denotational, Axiomatic", "ACM: Topic:: Proofs by induction over language semantics", "ACM: Topic:: Formal definitions and proofs for type systems (cross-reference PL/Type Systems)", "ACM: Topic:: Parametricity (cross-reference PL/Type Systems)", "ACM: Topic:: Evaluation order, precedence, and associativity", "ACM: Topic:: Eager vs. delayed evaluation", "ACM: Topic:: Defining control and iteration constructs", "ACM: Topic:: External calls and system libraries", "ACM: Topic:: Clausal representation of data structures and algorithms", "ACM: Topic:: Unification", "ACM: Topic:: Backtracking and search", "ACM: Topic:: Cuts", "ACM: Topic:: The concept and properties of algorithms", "ACM: Topic:: Informal comparison of algorithm efficiency (e.g., operation counts)", "ACM: Topic:: The role of algorithms in the problem-solving process", "ACM: Topic:: Problem-solving strategies", "ACM: Topic:: Iterative and recursive mathematical functions", "ACM: Topic:: Iterative and recursive traversal of data structures", "ACM: Topic:: Divide-and-conquer strategies", "ACM: Topic:: Fundamental design concepts and principles", "ACM: Topic:: Abstraction", "ACM: Topic:: Program decomposition", "ACM: Topic:: Encapsulation and information hiding", "ACM: Topic:: Separation of behavior and implementation", "ACM: Topic:: Basic syntax and semantics of a higher-level language", "ACM: Topic:: Variables and primitive data types (e.g., numbers, characters, Booleans)", "ACM: Topic:: Expressions and assignments", "ACM: Topic:: Simple I/O including file I/O", "ACM: Topic:: Conditional and iterative control structures", "ACM: Topic:: Functions and parameter passing", "ACM: Topic:: The concept of recursion", "ACM: Topic:: Arrays", "ACM: Topic:: Records/structs (heterogeneous aggregates)", "ACM: Topic:: Strings and string processing", "ACM: Topic:: Abstract data types and their implementation", "ACM: Topic:: Stacks", "ACM: Topic:: Queues", "ACM: Topic:: Priority queues", "ACM: Topic:: Sets (SDF)", "ACM: Topic:: Maps", "ACM: Topic:: References and aliasing", "ACM: Topic:: Linked lists", "ACM: Topic:: Strategies for choosing the appropriate data structure", "ACM: Topic:: Program comprehension", "ACM: Topic:: Program correctness", "ACM: Topic:: Types of errors (syntax, logic, run-time)", "ACM: Topic:: The concept of a specification", "ACM: Topic:: Defensive programming (e.g. secure coding, exception handling)", "ACM: Topic:: Code reviews", "ACM: Topic:: Testing fundamentals and test-case generation", "ACM: Topic:: The role and the use of contracts, including pre- and post-conditions", "ACM: Topic:: Unit testing", "ACM: Topic:: Simple refactoring", "ACM: Topic:: Modern programming environments", "ACM: Topic:: Code search", "ACM: Topic:: Programming using library components and their APIs", "ACM: Topic:: Debugging strategies", "ACM: Topic:: Documentation and program style", "ACM: Topic:: Systems level considerations, i.e., the interaction of software with its intended environment (cross-reference IAS/Secure Software Engineering)", "ACM: Topic:: Introduction to software process models (e.g., waterfall, incremental, agile)", "ACM: Topic:: Activities within software lifecycles", "ACM: Topic:: Programming in the large vs. individual programming", "ACM: Topic:: Evaluation of software process models", "ACM: Topic:: Software quality concepts", "ACM: Topic:: Process improvement", "ACM: Topic:: Software process capability maturity models", "ACM: Topic:: Software process measurements", "ACM: Topic:: Team participationo Team processes including responsibilities for tasks, meeting structure, and work schedule", "ACM: Topic:: Roles and responsibilities in a software team", "ACM: Topic:: Team conflict resolution", "ACM: Topic:: Risks associated with virtual teams (communication, perception, structure)", "ACM: Topic:: Effort Estimation (at the personal level)", "ACM: Topic:: Risk (cross reference IAS/Secure Software Engineering)", "ACM: Topic:: The role of risk in the lifecycle", "ACM: Topic:: Risk categories including security, safety, market, financial, technology, people, quality, structureand process", "ACM: Topic:: Team management", "ACM: Topic:: Team organization and decision-making", "ACM: Topic:: Role identification and assignment", "ACM: Topic:: Individual and team performance assessment", "ACM: Topic:: Project management", "ACM: Topic:: Scheduling and tracking", "ACM: Topic:: Project management tools", "ACM: Topic:: Cost/benefit analysis", "ACM: Topic:: Software measurement and estimation techniques", "ACM: Topic:: Software quality assurance and the role of measurements", "ACM: Topic:: Risk", "ACM: Topic:: Risk identification and management", "ACM: Topic:: Risk analysis and evaluation", "ACM: Topic:: Risk tolerance (e.g., risk-adverse, risk-neutral, risk-seeking)", "ACM: Topic:: Risk planning", "ACM: Topic:: System-wide approach to risk including hazards associated with tools", "ACM: Topic:: Software configuration management and version control", "ACM: Topic:: Release management", "ACM: Topic:: Requirements analysis and design modeling tools", "ACM: Topic:: Testing tools including static and dynamic analysis tools", "ACM: Topic:: Programming environments that automate parts of program construction processes (e.g., automated builds)", "ACM: Topic:: Continuous integration", "ACM: Topic:: Tool integration concepts and mechanisms", "ACM: Topic:: Describing functional requirements using, for example, use cases or users stories", "ACM: Topic:: Properties of requirements including consistency, validity, completeness, and feasibility", "ACM: Topic:: Software requirements elicitation", "ACM: Topic:: Describing system data using, for example, class diagrams or entity-relationship diagrams", "ACM: Topic:: Non-functional requirements and their relationship to software quality (cross-reference IAS/SecureSoftware Engineering)", "ACM: Topic:: Evaluation and use of requirements specifications", "ACM: Topic:: Requirements analysis modeling techniques", "ACM: Topic:: Acceptability of certainty / uncertainty considerations regarding software / system behavior", "ACM: Topic:: Prototyping", "ACM: Topic:: Basic concepts of formal requirements specification", "ACM: Topic:: Requirements specification", "ACM: Topic:: Requirements validation", "ACM: Topic:: Requirements tracing", "ACM: Topic:: System design principles: levels of abstraction (architectural design and detailed design), separation ofconcerns, information hiding, coupling and cohesion, re-use of standard structures", "ACM: Topic:: Design Paradigms such as structured design (top-down functional decomposition), object-oriented analysisand design, event driven design, component-level design, data-structured centered, aspect oriented, function oriented, service oriented", "ACM: Topic:: Structural and behavioral models of software designs", "ACM: Topic:: Design patterns", "ACM: Topic:: Relationships between requirements and designs: transformation of models, design of contracts, invariants", "ACM: Topic:: Software architecture concepts and standard architectures (e.g. client-server, n-layer, transform centered,pipes-and-filters)", "ACM: Topic:: Refactoring designs using design patterns", "ACM: Topic:: The use of components in design: component selection, design, adaptation and assembly of components,components and patterns, components and objects (for example, building a GUI using a standard widget set)", "ACM: Topic:: Internal design qualities, and models for them: efficiency and performance, redundancy and faulttolerance, traceability of requirements", "ACM: Topic:: External design qualities, and models for them: functionality, reliability, performance and efficiency,usability, maintainability, portability", "ACM: Topic:: Measurement and analysis of design quality", "ACM: Topic:: Tradeoffs between different aspects of quality", "ACM: Topic:: Application frameworks", "ACM: Topic:: Middleware: the object-oriented paradigm within middleware, object request brokers and marshalling,", "ACM: Topic:: ansaction processing monitors, workflow systems", "ACM: Topic:: Principles of secure design and coding (cross-reference IAS/Principles of Secure Design)", "ACM: Topic:: Principle of least privilege", "ACM: Topic:: Principle of fail-safe defaults", "ACM: Topic:: Principle of psychological acceptability", "ACM: Topic:: Coding practices: techniques, idioms/patterns, mechanisms for building quality programs (cross-referenceIAS/Defensive Programming; SDF/Development Methods)", "ACM: Topic:: Defensive coding practices", "ACM: Topic:: Secure coding practices", "ACM: Topic:: Using exception handling mechanisms to make programs more robust, fault-tolerant", "ACM: Topic:: Coding standards", "ACM: Topic:: Integration strategies", "ACM: Topic:: Development context: \u201cgreen field\u201d vs. existing code base", "ACM: Topic:: Change impact analysis", "ACM: Topic:: Change actualization", "ACM: Topic:: Potential security problems in programs", "ACM: Topic:: Buffer and other types of overflows", "ACM: Topic:: Race conditions", "ACM: Topic:: Improper initialization, including choice of privileges", "ACM: Topic:: Checking input", "ACM: Topic:: Assuming success and correctness", "ACM: Topic:: Validating assumptions", "ACM: Topic:: Verification and validation concepts", "ACM: Topic:: Inspections, reviews, audits", "ACM: Topic:: Testing types, including human computer interface, usability, reliability, security, conformance tospecification (cross-reference IAS/Secure Software Engineering)", "ACM: Topic:: Testing fundamentals (cross-reference SDF/Development Methods)", "ACM: Topic:: Unit, integration, validation, and system testing", "ACM: Topic:: Test plan creation and test case generation", "ACM: Topic:: Black-box and white-box testing techniques", "ACM: Topic:: Regression testing and test automation", "ACM: Topic:: Defect tracking", "ACM: Topic:: Limitations of testing in particular domains, such as parallel or safety-critical systems", "ACM: Topic:: Static approaches and dynamic approaches to verification", "ACM: Topic:: Test-driven development", "ACM: Topic:: Validation planning; documentation for validation", "ACM: Topic:: Object-oriented testing; systems testing", "ACM: Topic:: Verification and validation of non-code artifacts (documentation, help files, training materials)", "ACM: Topic:: Fault logging, fault tracking and technical support for such activities", "ACM: Topic:: Fault estimation and testing termination including defect seeding", "ACM: Topic:: Software development in the context of large, pre-existing code bases", "ACM: Topic:: Software change", "ACM: Topic:: Concerns and concern location", "ACM: Topic:: Refactoring", "ACM: Topic:: Software evolution", "ACM: Topic:: Characteristics of maintainable software", "ACM: Topic:: Reengineering systems", "ACM: Topic:: Software reuse", "ACM: Topic:: Code segments", "ACM: Topic:: Libraries and frameworks", "ACM: Topic:: Components", "ACM: Topic:: Product lines", "ACM: Topic:: Software reliability engineering concepts", "ACM: Topic:: Software reliability, system reliability and failure behavior (cross-reference SF/Reliability ThroughRedundancy)", "ACM: Topic:: Fault lifecycle concepts and techniques", "ACM: Topic:: Software reliability models", "ACM: Topic:: Software fault tolerance techniques and models", "ACM: Topic:: Software reliability engineering practices", "ACM: Topic:: Measurement-based analysis of software reliability", "ACM: Topic:: Role of formal specification and analysis techniques in the software development cycle", "ACM: Topic:: Program assertion languages and analysis approaches (including languages for writing and analyzing pre-and post-conditions, such as OCL, JML)", "ACM: Topic:: Formal approaches to software modeling and analysis", "ACM: Topic:: Model checkers", "ACM: Topic:: Model finders", "ACM: Topic:: Tools in support of formal methods", "ACM: Topic:: Basic building blocks and components of a computer (gates, flip-flops, registers, interconnections;Datapath + Control + Memory)", "ACM: Topic:: Hardware as a computational paradigm: Fundamental logic building blocks; Logic expressions,minimization, sum of product forms", "ACM: Topic:: Application-level sequential processing: single thread", "ACM: Topic:: Simple application-level parallel processing: request level (web services/client-server/distributed), singlethread per server, multiple threads with multiple servers", "ACM: Topic:: Basic concept of pipelining, overlapped processing stages", "ACM: Topic:: Basic concept of scaling: going faster vs. handling larger problems", "ACM: Topic:: Programming abstractions, interfaces, use of libraries", "ACM: Topic:: Distinction between Application and OS services, Remote Procedure Call", "ACM: Topic:: Application-Virtual Machine Interaction", "ACM: Topic:: Reliability", "ACM: Topic:: Digital vs. Analog/Discrete vs. Continuous Systems", "ACM: Topic:: Simple logic gates, logical expressions, Boolean logic simplification", "ACM: Topic:: Clocks, State, Sequencing", "ACM: Topic:: Combinational Logic, Sequential Logic, Registers, Memories", "ACM: Topic:: Computers and Network Protocols as examples of state machines", "ACM: Topic:: Sequential vs. parallel processing", "ACM: Topic:: Parallel programming vs. concurrent programming", "ACM: Topic:: Request parallelism vs. Task parallelism", "ACM: Topic:: Client-Server/Web Services, Thread (Fork-Join), Pipelining", "ACM: Topic:: Multicore architectures and hardware support for synchronization", "ACM: Topic:: Performance figures of merit", "ACM: Topic:: Workloads and representative benchmarks, and methods of collecting and analyzing performance figures ofmerit", "ACM: Topic:: CPI (Cycles per Instruction) equation as tool for understanding tradeoffs in the design of instruction sets,processor pipelines, and memory system organizations.", "ACM: Topic:: Amdahl\u2019s Law: the part of the computation that cannot be sped up limits the effect of the parts that can", "ACM: Topic:: Kinds of resources (e.g., processor share, memory, disk, net bandwidth)", "ACM: Topic:: Kinds of scheduling (e.g., first-come, priority)", "ACM: Topic:: Advantages of fair scheduling, preemptive scheduling", "ACM: Topic:: Speed of light and computers (one foot per nanosecond vs. one GHz clocks)", "ACM: Topic:: Latencies in computer systems: memory vs. disk latencies vs. across the network memory", "ACM: Topic:: Caches and the effects of spatial and temporal locality on performance in processors and systems", "ACM: Topic:: Caches and cache coherency in databases, operating systems, distributed systems, and computerarchitecture", "ACM: Topic:: Introduction into the processor memory hierarchy and the formula for average memory access time", "ACM: Topic:: Rationale for protection and predictable performance", "ACM: Topic:: Levels of indirection, illustrated by virtual memory for managing physical memory resources", "ACM: Topic:: Methods for implementing virtual memory and virtual machines", "ACM: Topic:: Distinction between bugs and faults", "ACM: Topic:: Redundancy through check and retry", "ACM: Topic:: Redundancy through redundant encoding (error correcting codes, CRC, FEC)", "ACM: Topic:: Duplication/mirroring/replicas", "ACM: Topic:: Other approaches to fault tolerance and availability", "ACM: Topic:: Analytical tools to guide quantitative evaluation", "ACM: Topic:: Order of magnitude analysis (Big-Oh notation)", "ACM: Topic:: Analysis of slow and fast paths of a system", "ACM: Topic:: Events on their effect on performance (e.g., instruction stalls, cache misses, page faults)", "ACM: Topic:: Understanding layered systems, workloads, and platforms, their implications for performance, and thechallenges they represent for evaluation", "ACM: Topic:: Microbenchmarking pitfalls", "ACM: Topic:: Social implications of computing in a networked world (cross-reference HCI/Foundations/social models;IAS/Fundamental Concepts/social issues)", "ACM: Topic:: Impact of social media on individualism, collectivism and culture.", "ACM: Topic:: Growth and control of the Internet (cross-reference NC/Introduction/organization of the Internet)", "ACM: Topic:: Often referred to as the digital divide, differences in access to digital technology resources and its resultingramifications for gender, class, ethnicity, geography, and/or underdeveloped countries.", "ACM: Topic:: Accessibility issues, including legal requirements", "ACM: Topic:: Context-aware computing (cross-reference HCI/Design for non-mouse interfaces/ ubiquitous and context-aware)", "ACM: Topic:: Ethical argumentation", "ACM: Topic:: Ethical theories and decision-making", "ACM: Topic:: Moral assumptions and values", "ACM: Topic:: Community values and the laws by which we live", "ACM: Topic:: The nature of professionalism including care, attention and discipline, fiduciary responsibility, andmentoring", "ACM: Topic:: Keeping up-to-date as a computing professional in terms of familiarity, tools, skills, legal and professionalframework as well as the ability to self-assess and progress in the computing field", "ACM: Topic:: Professional certification, codes of ethics, conduct, and practice, such as the ACM/IEEE-CS, SE, AITP,IFIP and international societies (cross-reference IAS/Fundamental Concepts/ethical issues)", "ACM: Topic:: Accountability, responsibility and liability (e.g. software correctness, reliability and safety, as well asethical confidentiality of cybersecurity professionals)", "ACM: Topic:: The role of the computing professional in public policy", "ACM: Topic:: Maintaining awareness of consequences", "ACM: Topic:: Ethical dissent and whistle-blowing", "ACM: Topic:: The relationship between regional culture and ethical dilemmas", "ACM: Topic:: Dealing with harassment and discrimination", "ACM: Topic:: Forms of professional credentialing", "ACM: Topic:: Acceptable use policies for computing in the workplace", "ACM: Topic:: Ergonomics and healthy computing environments", "ACM: Topic:: Time to market and cost considerations versus quality professional standards", "ACM: Topic:: Philosophical foundations of intellectual property", "ACM: Topic:: Intellectual property rights (cross-reference IM/Information Storage and Retrieval/intellectual property and", "ACM: Topic:: otection)", "ACM: Topic:: Intangible digital intellectual property (IDIP)", "ACM: Topic:: Legal foundations for intellectual property protection", "ACM: Topic:: Digital rights management", "ACM: Topic:: Copyrights, patents, trade secrets, trademarks", "ACM: Topic:: Plagiarism", "ACM: Topic:: Foundations of the open source movement", "ACM: Topic:: Software piracy", "ACM: Topic:: Philosophical foundations of privacy rights (cross-reference IS/Fundamental Issues/philosophical issues)", "ACM: Topic:: Legal foundations of privacy protection", "ACM: Topic:: Privacy implications of widespread data collection for transactional databases, data warehouses,surveillance systems, and cloud computing (cross-reference IM/Database Systems/data independence; IM/Data Mining/data cleaning)", "ACM: Topic:: Ramifications of differential privacy", "ACM: Topic:: Technology-based solutions for privacy protection (cross-reference IAS/Threats and Attacks/attacks onprivacy and anonymity)", "ACM: Topic:: Privacy legislation in areas of practice", "ACM: Topic:: Civil liberties and cultural differences", "ACM: Topic:: Freedom of expression and its limitations", "ACM: Topic:: Reading, understanding and summarizing technical material, including source code and documentation", "ACM: Topic:: Writing effective technical documentation and materials", "ACM: Topic:: Dynamics of oral, written, and electronic team and group communication (cross-referenceHCI/Collaboration and Communication/group communication; SE/Project Management/team participation)", "ACM: Topic:: Communicating professionally with stakeholders", "ACM: Topic:: Utilizing collaboration tools (cross-reference HCI/Collaboration and Communication/online communities;IS/Agents/collaborative agents)", "ACM: Topic:: Dealing with cross-cultural environments (cross-reference HCI/User-Centered Design and Testing/cross-cultural evaluation)", "ACM: Topic:: Tradeoffs of competing risks in software projects, such as technology, structure/process, quality, people,market and financial (cross-reference SE/Software Project Management/Risk)", "ACM: Topic:: Being a sustainable practitioner by taking into consideration cultural and environmental impacts ofimplementation decisions (e.g. organizational policies, economic viability, and resource consumption).", "ACM: Topic:: Explore global social and environmental impacts of computer use and disposal (e-waste)", "ACM: Topic:: Environmental impacts of design choices in specific areas such as algorithms, operating systems, networks,databases, or human-computer interaction (cross-reference SE/Software Evaluation/software evolution; HCI/Design-Oriented HCI/sustainability)", "ACM: Topic:: Guidelines for sustainable design standards", "ACM: Topic:: Systemic effects of complex computer-mediated phenomena (e.g. telecommuting or web shopping)", "ACM: Topic:: Pervasive computing; information processing integrated into everyday objects and activities, such as smartenergy systems, social networking and feedback systems to promote sustainable behavior, transportation, environmental monitoring, citizen science and activism.", "ACM: Topic:: Research on applications of computing to environmental issues, such as energy, pollution, resource usage,recycling and reuse, food management, farming and others.", "ACM: Topic:: The interdependence of the sustainability of software systems with social systems, including the knowledgeand skills of its users, organizational processes and policies, and its societal context (e.g., market forces, government policies).", "ACM: Topic:: Prehistory\u2014the world before 1946", "ACM: Topic:: History of computer hardware, software, networking (cross-reference AR/Digital logic and digital systems/history of computer architecture)", "ACM: Topic:: Pioneers of computing", "ACM: Topic:: History of the Internet", "ACM: Topic:: Monopolies and their economic implications", "ACM: Topic:: Effect of skilled labor supply and demand on the quality of computing products", "ACM: Topic:: Pricing strategies in the computing domain", "ACM: Topic:: The phenomenon of outsourcing and off-shoring software development; impacts on employment and oneconomics", "ACM: Topic:: Consequences of globalization for the computer science profession", "ACM: Topic:: Differences in access to computing resources and the possible effects thereof", "ACM: Topic:: Cost/benefit analysis of jobs with considerations to manufacturing, hardware, software, and engineeringimplications", "ACM: Topic:: Cost estimates versus actual costs in relation to total costs", "ACM: Topic:: Entrepreneurship: prospects and pitfalls", "ACM: Topic:: Network effect or demand-side economies of scale", "ACM: Topic:: Use of engineering economics in dealing with finances", "ACM: Topic:: Examples of computer crimes and legal redress for computer criminals (cross-reference IAS/DigitalForensics/rules of evidence)", "ACM: Topic:: Social engineering, identity theft and recovery (cross-reference HCI/Human Factors and Security/trust,privacy and deception)", "ACM: Topic:: Issues surrounding the misuse of access and breaches in security", "ACM: Topic:: Motivations and ramifications of cyber terrorism and criminal hacking, \u201ccracking\u201d", "ACM: Topic:: Effects of malware, such as viruses, worms and Trojan horses", "ACM: Topic:: Crime prevention strategies", "ACM: Topic:: Security policies (cross-reference IAS/Security Policy and Governance/policies)"]}
