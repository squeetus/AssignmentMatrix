[{"model": "assignments.assignment", "pk": 22, "fields": {"title": "Collage", "description": "Combine images (or sounds) with modifications in order to create a creative artifact.", "upstream_url": "http://nifty.stanford.edu/2013/guzdial-collage/", "authors": [25], "topics": [1, 9, 15, 27], "data_sets": [], "languages": [], "courses": [1, 2], "classifications": []}}, {"model": "assignments.assignment", "pk": 4, "fields": {"title": "Random Mondrian Art", "description": "This assignment asks students to create random \"art\" in a Mondrian style using a recursive algorithm.", "upstream_url": "http://nifty.stanford.edu/2018/stephenson-mondrian-art/", "authors": [3], "topics": [1, 2, 7], "data_sets": [], "languages": [2, 3], "courses": [2], "classifications": [110, 111, 691, 1293, 1294]}}, {"model": "assignments.assignment", "pk": 5, "fields": {"title": "Hurricane Tracker", "description": "This assignment gives students an opportunity to work with loops, file io, and string manipulation in a graphical way. In this assignment students write a program that processes real-world hurricane data and animate the path of hurricanes.", "upstream_url": "http://nifty.stanford.edu/2018/ventura-hurricane-tracker/nifty-hurricanes.html", "authors": [3], "topics": [1, 6, 8, 9], "data_sets": [2], "languages": [2], "courses": [2], "classifications": []}}, {"model": "assignments.assignment", "pk": 6, "fields": {"title": "Pong AI Tournament", "description": "Write an AI engine for the game of Pong. Explore the handout code which contains the game physics. Design and implement a Pong AI engine that beats an AI that simply chases the ball's y-coordinate. Improve the AI engine further and enter it into a class-wide tournament.", "upstream_url": "http://nifty.stanford.edu/2018/guerzhoy-pong-ai-tournament/", "authors": [4], "topics": [10], "data_sets": [], "languages": [2], "courses": [2], "classifications": []}}, {"model": "assignments.assignment", "pk": 7, "fields": {"title": "Wiki Racer", "description": "The WikiRacer assignment lets students implement an intelligent bot that finds a Wikipedia link ladder between two given pages.", "upstream_url": "http://nifty.stanford.edu/2018/malik-wikiracer/", "authors": [5], "topics": [5, 9, 11, 12], "data_sets": [], "languages": [1], "courses": [3], "classifications": []}}, {"model": "assignments.assignment", "pk": 8, "fields": {"title": "Nifty Remixes", "description": "These assignments demonstrate how one can take key ideas from existing nifty assignments and remix them for different audiences using different contexts. Nifty ideas from the Boggle assignment (Zelenski, 2002) are remixed into a series of assignments solving grid-based games, and pieces of the Guitar Heroine assignment (Wayne, 2012) are remixed to model other musical instruments.", "upstream_url": "http://nifty.stanford.edu/2018/reed-nifty-remixes/", "authors": [6], "topics": [2, 3, 7, 12], "data_sets": [], "languages": [4], "courses": [4], "classifications": []}}, {"model": "assignments.assignment", "pk": 9, "fields": {"title": "Bear Maps", "description": "Students write the Java back end of a browser based street mapping application. They must fill in two functions. The first takes coordinates corresponding to a region of the world, and outputs a list of String filenames to display. The second takes a starting and ending point, and generates a route along real streets.", "upstream_url": "http://nifty.stanford.edu/2018/hug-bear-maps.html", "authors": [7], "topics": [13, 14], "data_sets": [3], "languages": [4], "courses": [3], "classifications": []}}, {"model": "assignments.assignment", "pk": 10, "fields": {"title": "Falling Sand", "description": "The Falling Sand assignment lets users paint with particles--stationary metal particles, falling sand, flowing water, and whatever students can think up! Students have introduced acid, clouds, fire, gas, lightning, plants, seeds, and much more! Students are essentially inventing their own interactive 2-D cellular automata.", "upstream_url": "http://nifty.stanford.edu/2017/feinberg-falling-sand/", "authors": [8], "topics": [1, 15], "data_sets": [], "languages": [4], "courses": [2, 3], "classifications": []}}, {"model": "assignments.assignment", "pk": 11, "fields": {"title": "2048 in Python", "description": "In this assignment, students have the opportunity to create a version of the popular mobile app 2048 in Python. Since this project is targeted towards CS0 and CS1 students, this project includes skeleton code, helper functions, \"Targeted Help\" sections, and even video introductions to guide the students along the way.", "upstream_url": "http://nifty.stanford.edu/2017/mishra-2048/", "authors": [9], "topics": [1, 2, 8, 16], "data_sets": [], "languages": [2], "courses": [1, 2], "classifications": []}}, {"model": "assignments.assignment", "pk": 12, "fields": {"title": "Fractal Sound", "description": "In this assignment, students generate sound waveforms from scratch, starting with simple examples (sine waves, sawtooth waves, chords), and ending with an exploration of the strange and haunting world of fractal sounds.", "upstream_url": "http://nifty.stanford.edu/2017/hug-fractal-sound/", "authors": [7], "topics": [14, 17], "data_sets": [], "languages": [4], "courses": [2, 3], "classifications": []}}, {"model": "assignments.assignment", "pk": 13, "fields": {"title": "SAT Synonyms", "description": "Write small (optionally: medium-sized) functions to read text from files, process the text, and compute descriptors (counts) from the text. Write small functions to read and process the Synonym Questions (optionally: this can be provided to students). Write functions to combine all of the above in order to test the system and obtain its performance (optionally: if the student's first attempt runs slowly, come up with a solution that takes less time).", "upstream_url": "http://nifty.stanford.edu/2017/guerzhoy-SAT-synonyms/", "authors": [10, 11, 4], "topics": [2, 8, 9], "data_sets": [4], "languages": [2], "courses": [2, 3], "classifications": []}}, {"model": "assignments.assignment", "pk": 14, "fields": {"title": "NBody Simulation", "description": "Students compose a program to simulate the motion of n particles, subject to Newton's laws of motion.", "upstream_url": "http://nifty.stanford.edu/2017/wayne-nbody/", "authors": [12, 13], "topics": [1, 8], "data_sets": [], "languages": [2, 4], "courses": [2, 3], "classifications": []}}, {"model": "assignments.assignment", "pk": 15, "fields": {"title": "Counting Squares", "description": "This assignment teaches the basics of algorithm design without using much programming. Students program a robot in a grid of square rooms.", "upstream_url": "http://nifty.stanford.edu/2015/tychonievich-sherriff-layer-counting-squares/", "authors": [16, 14, 15], "topics": [5], "data_sets": [], "languages": [2], "courses": [2], "classifications": []}}, {"model": "assignments.assignment", "pk": 16, "fields": {"title": "Speed Reader", "description": "Students build a speed reader that displays text files using Rapid Serial Visual Presentation (RSVP) and test the effectiveness of RSVP by running small usability studies on themselves and their friends. Students practice core CS1 skills (file IO, string processing, graphics) and gain exposure to interface design and evaluation and the science of speed reading.", "upstream_url": "http://nifty.stanford.edu/2015/posera-speed-reader/", "authors": [17], "topics": [6, 9], "data_sets": [5], "languages": [2, 4], "courses": [2], "classifications": []}}, {"model": "assignments.assignment", "pk": 17, "fields": {"title": "GeoLocator", "description": "Students practice being a client of a class for storing location information (latitude and longitude) and then write a variation of the class that stores extra information about a place of interest (name, address, and tags)", "upstream_url": "http://nifty.stanford.edu/2015/reges-geolocator/", "authors": [18], "topics": [18, 19, 20], "data_sets": [3], "languages": [4], "courses": [2], "classifications": []}}]
